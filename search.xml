<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>⟬ 紀錄 ⟭ Foresea畢業專題(I) ─《綜合資源分享》</title>
    <url>/bookreport/Foresea-bookreport-I/</url>
    <content><![CDATA[<p><code>[此篇為舊文，從Notion搬運過來，撰寫日期為05/18/21]</code>  </p>
<h2 id="大學簡陋的句點"><a href="#大學簡陋的句點" class="headerlink" title="大學簡陋的句點"></a>大學簡陋的句點</h2><p>你曾想過自己大學最後會帶走什麼嗎?<br>現在我還在想答案似乎遲了點，但在疫情草草結束我的大學生涯的最後…  </p>
<span id="more"></span>  
<p>| <strong>我想發揮自己的價值</strong>。  </p>
<p>對。<br>除了分享也是種紀錄，如果有幫助到任何人大概是件好事<br>目前預計寫幾篇製作畢業專題相關的，包含 資源分享、程式學習、心得歷程。  </p>
<hr>
<h2 id="想法萌生"><a href="#想法萌生" class="headerlink" title="想法萌生"></a>想法萌生</h2><p>人生八九不如意，因此我選擇十分努力<br>我並不是一個特別厲害的人。單純熱愛分享而已。<br>憶起一位學長在我大三系學會會長任期結束時，提出可否組成技術互助會什麼的<br>協助系上同學整體學習與資源的傳承<br>當時我無法提供一個完善的機制來運作這件事…<br>目前我只能以文章類型來提供(我有思考另一種方式，但技術不夠)<br>做這件事我相信我不是第一位，也希望不是最後一位。<br>(偷偷搬運 :  <strong><a href="https://www.youtube.com/channel/UCbZ34gnooSIHXAZUW1_wvgQ">程式大師</a><strong>、</strong><a href="https://www.notion.so/fd0b3d043fcb4bbc86d542424e4b6040">動態大師</a></strong>  <strong>)</strong> 還有更多我不知道的。<br>這些資源與建議請作為參考，非絕對</p>
<hr>
<h2 id="專題簡單介紹"><a href="#專題簡單介紹" class="headerlink" title="專題簡單介紹"></a>專題簡單介紹</h2><p>以專題為例，還是來簡單介紹一下🥳<br>Foresea 是我的畢業專題，組成為四人，我負責遊戲程式的部分<br>內容是關於認識六個海洋議題的遊戲與網站，有興趣的話可以點下方觀看<br><strong>專題網站:</strong><br><a href="https://byforesea.github.io/foresea/">Foresea｜預見海洋最糟的情況，你會怎麼做？</a><br><strong>本系專題介紹:</strong><br><a href="https://dedm66019206.github.io/dedm110expo/about/Foresea.html">Foresea | 嘉義大學數位系110級畢業展覽</a><br>以下這些資源，已取得我們團隊同意，就一併開放  </p>
<p><strong>重要聲明 :</strong></p>
<ol>
<li>Package中的美術素材不可複製、修改或應用於別處。</li>
<li>不可拿Foresea 主程式修改後，做為自己的作品(僅提供學習觀摩用)</li>
<li>任何資源請抱持學習與愛惜之心。若發現不當使用，將撤銷所有文章  </li>
</ol>
<hr>
<h2 id="資源分享正篇"><a href="#資源分享正篇" class="headerlink" title="資源分享正篇"></a>資源分享正篇</h2><h3 id="一、音樂-音效-資源"><a href="#一、音樂-音效-資源" class="headerlink" title="一、音樂 / 音效 資源"></a>一、音樂 / 音效 資源</h3><table>
<thead>
<tr>
<th>用途</th>
<th>網站</th>
</tr>
</thead>
<tbody><tr>
<td>音效</td>
<td><a href="https://taira-komori.jpn.org/freesoundtw.html">小森平音效</a></td>
</tr>
<tr>
<td>音效</td>
<td><a href="https://on-jin.com/kiyaku.php">音人</a></td>
</tr>
<tr>
<td>音效</td>
<td><a href="https://gamesounds.xyz/">Xyz</a></td>
</tr>
<tr>
<td>BGM</td>
<td><a href="https://www.tam-music.com/se000_category/natural">TAM</a></td>
</tr>
<tr>
<td>BGM</td>
<td><a href="http://amachamusic.chagasi.com/index.html">甘茶の音楽工房</a></td>
</tr>
<tr>
<td>BGM</td>
<td><a href="http://conte-de-fees.com/">conte-de-fees</a></td>
</tr>
<tr>
<td>Both</td>
<td>Youtube 音效庫</td>
</tr>
</tbody></table>
<p>也可以找找 Unity 商店有些人免費提供的音樂包<br>⚠ 遵守CC，有些須註明標記，請自行斟酌  </p>
<hr>
<h3 id="二、程式包-Package"><a href="#二、程式包-Package" class="headerlink" title="二、程式包 (Package)"></a>二、程式包 (Package)</h3><p>Unity 建置環境 :<br><strong>2019.4.9.f1</strong> (請用以上的版本)  2D 平台<br><strong>注意事項 :</strong>  </p>
<ol>
<li>如果有一堆黃色驚嘆號，是正常的</li>
<li>按開始無反應，可能是 <code>Tag</code> 或是<code>layer</code> 設定跑掉，導致程式找不到。請自行創建 layer 與 tag 替換上。  </li>
</ol>
<p>🤙可以詢問我， Email :  <a href="mailto:&#x79;&#97;&#110;&#x73;&#104;&#97;&#x6e;&#104;&#111;&#110;&#103;&#x32;&#x33;&#64;&#x67;&#109;&#97;&#105;&#x6c;&#46;&#x63;&#111;&#109;">&#x79;&#97;&#110;&#x73;&#104;&#97;&#x6e;&#104;&#111;&#110;&#103;&#x32;&#x33;&#64;&#x67;&#109;&#97;&#105;&#x6c;&#46;&#x63;&#111;&#109;</a>  </p>
<blockquote>
<p>📄 <strong><a href="https://1drv.ms/u/s!AtRw0OR0iI_KjYJrOgYRJWs_90BckQ">Download</a></strong>  </p>
</blockquote>
<p><strong>密碼提示</strong> (英文校系名大寫+系上主要的電腦教室的代號)<br>下載後請開新Project ，到Assest 匯入package。</p>
<hr>
<h3 id="三、我常用軟體推薦"><a href="#三、我常用軟體推薦" class="headerlink" title="三、我常用軟體推薦"></a>三、我常用軟體推薦</h3><p>(如果你還沒找到合適的軟體可以試試)    </p>
<ol>
<li><p><strong>Mind-Map</strong><br> 幾乎每一堂課都會使用到的好工具，對於想法上的整體很有幫助<br> 常見的 <a href="https://coggle.it/">coggle</a>、 <a href="https://miro.com/mind-map/">miro</a>  </p>
<ul>
<li><strong>coggle</strong></li>
</ul>
<ol>
<li>多人共同編輯與檢閱</li>
<li>缺點的話大概是操作有點反人類<br><img data-src="https://chi01pap001files.storage.live.com/y4mmjL6nXvoTD5vue0HhyP6fa4l_DJEeQ7bsG0goiqQ55KBHTn55tbB_9KK3sirJnSeTFwD3zqKzt_oGtD4owZZ5LfL0NEb28QeJeJwR8UR1LKu_WFL4l4TyXG3J9ThrHj2xiwu_1cDLp1nqvPozMXGybnVOofMfR4nfaUxUyGbjEHBjN61nsIt3D8_VK_3TZuz?width=2728&height=1519&cropmode=none" alt="coggle.png" title="RUNOOB">    </li>
</ol>
<hr>
</li>
<li><p><strong>流程圖</strong> : <u><a href="https://www.diagrams.net/">Diagram</a></u>  </p>
<ul>
<li><strong>Diagram</strong>  <ol>
<li>可與google雲端整合，也可共編</li>
<li>釐清程式邏輯順序或架構好用(我覺得啦)</li>
<li>缺點是我後期很少使用，因為我變懶了…，但在一開始確實幫助不少<br><img data-src="https://chi01pap001files.storage.live.com/y4mYgX9RMMGIobacfZ38FjqtbUkMn9FsRTycTrfWIpisvTwtivy2XZggSR3EjE9ujoc_RHDIRN_cg3z-63Md0F4xsgpWjLtdwxCs7yr3q1TI6o16I9bV2VSKw5rF-p0OwkNuZ0ueesuG8WclWX0AzWnzM3iqv8USR-gqdjPPou-WYuMJOvjdn7ep0ISlzDhWAEJ?width=2705&height=1517&cropmode=none" alt="draw.io">  </li>
</ol>
</li>
</ul>
<hr>
</li>
<li><p><strong>Excel</strong><br> 條列整理文件或交付事項  </p>
<ul>
<li><strong>Google Excel</strong><br>  以”加入音效到遊戲”這件事為例<br>  與幫忙的組員寫清楚規則，檔案規範、用途等等，加速彼此的效率。<br>  <font color=#FF0000> <code>這個見仁見智^^ </code></font><br>  <img data-src="https://chi01pap001files.storage.live.com/y4m-zTcPiKrGUr0_8QqtNeDnkW407YWkCp-iOrL9nwJcFBr2LhD1xfgYNSdhXM9n-SdcXuhpIqVWUQpjChuXTfwa-j2gY1P39AkeAtTO6uls83zOFIxgY6hvPg2QLnFJ7sstNtPJYAsygOp5oKLMMLSxMX9QN7BorimhbOT_wF80MMwwVuGo9JqIqug0V585h8m?width=2711&height=1507&cropmode=none" alt="googleExcel.png">  </li>
</ul>
</li>
</ol>
<hr>
<ol start="4">
<li><p><a href="https://trello.com/zh-Hant"><strong>Trello</strong></a><br>清單管理，除了一般瑣碎的事，寫程式checklist非常好用<br>一定要配開發時使用，當有問題不能當下解決紀錄就不會忘記了<br>每一個LIST都還能再細寫更多東西，也能團隊共同管理使用。<br><img data-src="https://chi01pap001files.storage.live.com/y4mnqXqhpGYU0GU7j_M-eNzyAz7SLC6gSLfvcU4Np2J8Ca_bJ3Gf8ChjSXOwviwoJaJsgSGsJZM7y0CSCsYDunoUVWfGWwFdt7x61T45BYcF2fvXBwhHpI3KZNip13ae5xHZlVYKDGA2qm71gNcDy-6uzKg53g42_prkJTHdOvDeZjaPJ5oo50iqSt6E239NEZm?width=2732&height=1751&cropmode=none" alt="Trello.png">  </p>
<hr>
</li>
<li><p><a href="https://www.notion.so/product?fredir=1"><strong>Notion</strong></a><br>我們團隊有拿來管理使用，但效果不佳，大概是新軟體不太適應。<br>但這個功能很多，我通常會拿來寫學習筆記之類的紀錄<br><img data-src="https://chi01pap001files.storage.live.com/y4mQsK7Du13b6XsXKXFwW-8NI-gXSCyzmrmtzkxBu791sAWQs5domiCmdDBw2-Sw5TCMqirK85llxH9o2AjMKAV4qgPc1Qo2EbnbyTtqUwus4y0vvBXTRolGYuKXUtM8i9V3o9_XAUMSTWVCJBYI0ZDfP1YSmWAk6MIwNM1kIQXSL0wsWGiGI45zux-1q3JhLfC?width=2720&height=1738&cropmode=none" alt="Notion.png">  </p>
<hr>
</li>
<li><p><strong>Teams</strong><br> 你懂得，大家不見得窩在一起做，這時候需要及時討論的工具<br> 大家都熟的很就不貼了，可以使用裡面的whiteboard<br> 每個人都可以進行即時的畫面討論，在白板上畫圖溝通<br> <img data-src="https://chi01pap001files.storage.live.com/y4mTNZnfCLxG2SeK8w3pqa3Ks0J5BfNAr7c-0V7eb09ujKkShZi9UZ1JipLBlSxuWfJaf7HYW9LEqV4PXyXh1NN_9YzsfWF-wnWQ0-iBY0rnON-z2kw54UQ5GQcXf37p5VpuQoVeMpyplY_UkuQpXLYgDuof_LEObmcNXi3kIBnxM-PkQus94PjrkivLfOYkcFE?width=2413&height=1526&cropmode=none" alt="Teams.png">  </p>
<hr>
<p> 如果你覺得不好用也可以統一整合使用Google 的產品  </p>
<ul>
<li><p><strong><a href="https://jamboard.google.com/u/0/">Google Jamboard</a></strong><br>  以前曾在修APP課堂時，因為真的都太難了😥，我創來課後作業討論<br>  很推便利貼，老師們最愛的那一味。<br>  <img data-src="https://chi01pap001files.storage.live.com/y4mJWII5EapwwyxJb5NL2PWExyGzoxTbLR09J1m-rw7WvuEkjHTRbHF6p9qMFfBEdXZ-2MojI1fq9jnPm4SvLWQFmYrSNeWLImZLKpVsftIs2ltZIC7ZcmocbqKDHAjGnppV36rW81tR5R5VsfE5qoSH7SV7qTNiJMAeBceb1J6urCXdMbI0LGcNuUTz1_IcvdR?width=2736&height=1510&cropmode=none" alt="google Jamboard.png">  </p>
<hr>
</li>
</ul>
</li>
<li><p><strong>Visual Studio Code</strong><br> 寫code的好朋友👯‍♀️，Extension 裝一裝非常好用。<br> <img data-src="https://chi01pap001files.storage.live.com/y4mWWAZ2a5ZYDZM9BDrvvBYx04ee8joAsfFALh9AtPl3pu_YICmUIbEeBY95KivST82H8__ZQVSpwH53Qu7PV02VOGvpmmZ5baW4hR8p2XGV4jyHxW2m3JMcprETT-aGDTq0M8jMaqMWv9RGhxx9rKILB1ZdxOrpP0blH1_f81PNs28FLwW28fB88PoE8HHjmQJ?width=2736&height=1762&cropmode=none" alt="vscode.png">  </p>
<p> <strong>Extension必裝</strong><br> 如果你是負責 <code>**網頁**</code> :  Live Sever(網站更動即時瀏覽) ，也可參考<u><a href="https://hackmd.io/@TSweb/Bkyx5zY94"><strong>這篇</strong></a></u><br> 如果你是負責<code>**Unity**</code> : 請參考<u><a href="https://medium.com/@walkerwalker427/unity-%E7%94%A8vscode%E9%96%8B%E7%99%BCunity3d-491a87a8b880">這篇</a></u><br> (大概step5就差不多了) </p>
</li>
</ol>
<blockquote>
<p>我說那個Unity 會叫你裝的 Visual Studios呢?  </p>
</blockquote>
<p>VScode小巧方便、開啟快速，我用過後就回不去了，但我個人建議以習慣的就好。  </p>
<hr>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><blockquote>
<p><strong>工欲善其事，必先利其器。</strong></p>
</blockquote>
<p>你我都懂，結合應用才是考驗的開始。<br>以上這些是我用過還不錯的資源與工具<br>如果你本身有愛用的，就用舊愛就好，以免要適應一段時間。<br>謝謝你閱讀完，希望能幫助每一個點開的人。<br>我並不是一個特別厲害的人。單純熱愛分享而已。  </p>
]]></content>
      <categories>
        <category>bookreport</category>
      </categories>
      <tags>
        <tag>畢業專題</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 筆記 ⟭ CSS 選擇器</title>
    <url>/Frontend/CSS/CSS-Selector/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>複習常見用法與了解選擇器權重的問題   </p>
<span id="more"></span>  
<h2 id="條件使用"><a href="#條件使用" class="headerlink" title="條件使用"></a>條件使用</h2><p>舉 class 的例子<br>選擇器還有 <code>Universal(*) 、pseudo-classes(偽類別)、id、tag(標籤)</code>等等的選擇器<br>除了 <strong>id</strong> 外基本都以此類推。</p>
<h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 省略 Html 架構--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
		<span class="token comment">&lt;!-- 範例 4 開始 --></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>B<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 1 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>B<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 2 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>C<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 3 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>C<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 4 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>item<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>P<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>來套上CSS   </p>
<ol>
<li>同時符合條件才套用</li>
</ol>
<ul>
<li><code>.A.item</code> : 連續的，並無空格<blockquote>
<p>是 A 又有 item 的才會被選，其他 A 不套用</p>
</blockquote>
</li>
</ul>
<ol start="2">
<li>父層以下的所有叫 OO <strong>都</strong>  套用 </li>
</ol>
<ul>
<li><code>.wrapper .A</code> : 中間空一格<blockquote>
<p>這邊通通有 class <code>A</code> 的都會被套用</p>
</blockquote>
</li>
</ul>
<ol start="3">
<li> 父層的下一層要叫 OO 才套用</li>
</ol>
<ul>
<li><code>.wrapper&gt;.A</code> : 下一層的 A 都會套用    <blockquote>
<p>box 裡面的 A 是屬於 下下層，因此不套用</p>
</blockquote>
</li>
</ul>
<ol start="4">
<li> 同一層的旁邊叫 OO 的才套用  </li>
</ol>
<ul>
<li><code>.B+.C</code> : 兩個都同一層  <blockquote>
<p>只有 B-2 旁邊的 <code>C-3</code> 會套用</p>
</blockquote>
</li>
</ul>
<ol start="5">
<li> 同一層的右邊只要叫 OO 的都套用</li>
</ol>
<ul>
<li><code>.B~.C</code> : 兩個都同一層 <blockquote>
<p> B-2 旁邊的 <code>C-3</code> 與 <code>C-4</code> 皆會套用  </p>
</blockquote>
</li>
</ul>
<blockquote>
<p><a href="https://codepen.io/shan473/pen/BaRMyrz">練習</a>  </p>
</blockquote>
<h4 id="快速複習"><a href="#快速複習" class="headerlink" title="快速複習"></a>快速複習</h4><table>
<thead>
<tr>
<th align="center">符號</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&gt;</td>
<td>下一層</td>
</tr>
<tr>
<td align="center">+</td>
<td>同一層的旁邊一個</td>
</tr>
<tr>
<td align="center">~</td>
<td>同一層的旁邊所有的</td>
</tr>
</tbody></table>
<h2 id="常用的選擇器"><a href="#常用的選擇器" class="headerlink" title="常用的選擇器"></a>常用的選擇器</h2><ul>
<li>pseudo-classes (偽類別)<br>  以 <code>:</code> 表示<ul>
<li>關於動作的 (Dynamic)<br>  像是 <code>:hover</code>、<code>:active</code> … 等等    以往在開發時可能都要實際操作再看效果<br>  在 Dev tool 中可以手動直接控制<br>  瀏覽器顯示 style 有個 <code>:hov</code><br>  <img data-src="https://chi01pap001files.storage.live.com/y4mXniSc9YQknILFFtKip8TAQ82En47NCTww_UljZH2WPpwqvQD9hnkcwXYNUQu4BrLI_6xTabbid29wewJsyt3Kj522mgEJaTDHjoN0PzHXFUSvUP8ZTj3OBzQEs91uitM5P80iFV083PpDcTt6BzOsT4yaDtMYgcVgBNAKvX0bnj3LL0-BoayHXrZxslbKj8r?width=660&height=236&cropmode=none">  </li>
<li>選擇器<br>  <code>:nth-child(n)</code> : 選擇子層的第 n 個<br>  <code>:first-child</code>  :  指第一個<br>  <code>:first-child</code>  :  指最後一個    快速一點  <ol>
<li><code>:nth-child(odd)</code> : 只選奇數位</li>
<li><code>:nth-child(even)</code> : 只選偶數位</li>
<li><code>:nth-child(an+b)</code> : 等差選  </li>
</ol>
<blockquote>
<p>nth-child 是從後面解讀<br>例 : .wrapper .A:nth-child(3)<br>XX層的第 n 個元素是 OO 再動作</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>參考資料<br><a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/Pseudo-classes">虛擬類別 - CSS | MDN (mozilla.org)</a></p>
</blockquote>
<ul>
<li>pseudo-elements (偽元素)<br>  以 <code>::</code> 表示<br>  最常用的是 <code>::before</code> 跟 <code>::after</code><br>  使用上可以用 <strong>共同想加入的東西</strong><br>  例如 金錢符號    <iframe height="300" style="width: 100%;" scrolling="no" title="" src="https://codepen.io/shan473/embed/OJmdPvN?default-tab=result&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
See the Pen <a href="https://codepen.io/shan473/pen/OJmdPvN">
</a> by YanShanHong (<a href="https://codepen.io/shan473">@shan473</a>)
on <a href="https://codepen.io">CodePen</a>.
</iframe>  
  
  這樣只要改 ::before 的內容就可以統一修改      </li>
</ul>
<blockquote>
<p>content 一定要有，沒有內容也可以空的</p>
</blockquote>
<p>*<code>content : attr( class or tag )</code><br>可以抓到 html 的資料 </p>
<blockquote>
<p>參考資料<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/content">content - CSS（层叠样式表） | MDN (mozilla.org)</a></p>
</blockquote>
<h2 id="選擇器權重"><a href="#選擇器權重" class="headerlink" title="選擇器權重"></a>選擇器權重</h2><p>常常會因為套用很多 CSS 而眼花撩亂<br>誰被套用了 ? 誰套了又沒效果了 ?<br>透過權重就能清楚知道</p>
<ul>
<li>把握基本原則<blockquote>
<p><strong>id &gt; class &gt; tag</strong><br>越詳細越先套用<br>重複寫到一樣的，以後面的為重</p>
</blockquote>
</li>
</ul>
<p>網路上會以 <code>100 : 10 : 1</code>  來說明比重<br>但我更喜歡 Huli 大講的 <code>0,0,0</code> 越前面的越重<br>誰佔的比較前面就吃那個樣式   </p>
<p>假如都使用 class 那第二個就是看 <code>數量</code><br>數字並不會十進位  </p>
<p>有神人測試過 256 個 class 可以超過 id<br>不過應該不會有人會寫到這麼多 class …<br>應該是測試極限用而已  </p>
<blockquote>
<p>參考資料<br><a href="https://juejin.cn/post/6844903608199151630">你对CSS权重真的足够了解吗？ (juejin.cn)</a></p>
</blockquote>
<h3 id="進階原則"><a href="#進階原則" class="headerlink" title="進階原則"></a>進階原則</h3><p>也就是 <code>!important</code> 與 <code>inline style</code> </p>
<ol>
<li>inline style : 寫在 html 同一行元素裡的 style   <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>!important<pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">.class&#123;
	background:red !important;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
綜合排一下<blockquote>
<p>!important &gt; inline style &gt; id &gt; class &gt; tag  </p>
</blockquote>
</li>
</ol>
<p>看成 <code>0 , 0 , 0 , 0 , 0</code><br>越後面樣式越容易被覆蓋</p>
<p>因此套上 <code>!important</code> 是奧義<br>並不會很常使用<br>不然其他寫的都沒意義了   </p>
<p>最常使用的是 class 而非 id</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>以前使用 CSS 重點在其他設定<br>老是一直層層疊上去<br>透過整理可以更清楚知道選擇器的權重<br>與選擇器正確的使用  </p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 筆記 ⟭ HTML 基本語法</title>
    <url>/Frontend/HTML/HTML-Tags/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>這邊紀錄常用標籤與標籤用處<br>標籤基本都成雙成對<br>本篇主要複習跟稍微解析實際網頁的應用部分  </p>
<span id="more"></span>

<h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- !DOCTYPE HTML :告訴瀏覽器這是標準的 html 格式--></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
	<span class="token comment">&lt;!-- head : 網頁資本資訊--></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
		(1) title : 網站標題
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>網站標題<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
		(2) charset : 編碼
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> 
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
	<span class="token comment">&lt;!--body : 主要呈現的地方--></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
		(1) div : 分組，會換行 
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> 
		(2) span : 分組，不會換行
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> 
		(3) img : 圖片 
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>放source<span class="token punctuation">"</span></span> 
			 <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>滑鼠 Hover 顯示文字<span class="token punctuation">"</span></span>
			 <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>圖片跑不出來的替代文字<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
		(4) 清單  
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span> : 沒有排序的清單，只會出現 dot
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span> : 有排序的清單 (order)，會顯示數字
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span> : 項目
		
		(5) pre : 保留完整格式 
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span>
		說明 : 在 html 空多少格都會只有呈現一格
		加入 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span> 後，html長相都會被「照實呈現」
		
		(6) br : 換行 
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>
		
		(7) 表格
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>
			(7-1) 表格標題 (header)
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
			說明 : 可以放在首列，標題字會變粗體
			-----
			(7-2) 列(row)
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
				(7-3) 子項
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
		
		(8) 錨點 
		(8-1) 連外部網絡
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">herf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>連結網址<span class="token punctuation">"</span></span> 
		   <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">新分頁開啟</span>
		   				   <span class="token attr-name">不加的話預設是直接打開</span>
		<span class="token punctuation">></span></span>
		(8-2) 連內部段落
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">herf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#段落ID<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
		說明 : 使用 id 來進行連結
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>&lt;!DOCTYPE HTML&gt;</code> 通常可加可不加<br>不加偶爾會出 Bug ，所以還是加一下。</li>
</ul>
<h3 id="實用型"><a href="#實用型" class="headerlink" title="實用型"></a>實用型</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">1. iframe  : 嵌入網站。
說明:通常會看到嵌入 yt 影片、網頁內容等等。
實際上很多網站會擋，以防資訊被偷竊。
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>來源網址<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>

2. form : 表單
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>
	2-1. input : 輸入 
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>輸入類型<span class="token punctuation">"</span></span> 
		   <span class="token attr-name">vaule</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>被輸入的值可以先預設<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">></span></span>
	type 常見有 : 
           text、password、email、radio、
           checkbox、date
	有作用的按鈕 :
	    submit (送出)
	注意 : submit 類型的 vaule 是指按鈕文字
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>input 更多類型往這邊<br><a href="https://developer.mozilla.org/zh-TW/docs/Web/HTML/Element/input">超文本標記語言 | MDN (mozilla.org)</a>  </p>
</blockquote>
<p>範例</p>
<ul>
<li><strong>radio</strong> 單選  </li>
</ul>
<iframe height="300" style="width: 100%;" scrolling="no" title="" src="https://codepen.io/shan473/embed/bGWOrWB?default-tab=html%2Cresult&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/shan473/pen/bGWOrWB">
  </a> by YanShanHong (<a href="https://codepen.io/shan473">@shan473</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<ol>
<li><code>type</code>  : 設定種類</li>
<li><code>name</code> :  把選項群組。<br>使用單選時，要確定哪個是同一種單選<br>如果沒有 <strong>name</strong> 就沒用哦</li>
<li><code>label</code> : 可以把內容也變的跟同個 id 有一樣的效果。<br>如果沒有 label 可以發現 <strong>使用者體驗較差</strong><br>每次點擊必須精準落在圈圈內<br>加上之後，讓 label 裡的字串點擊也可以勾選<br>以便來 <strong>提升使用者的體驗</strong></li>
</ol>
<blockquote>
<p>關於 vaule 的範例<br><a href="https://matthung0807.blogspot.com/2019/08/html-input-value.html">菜鳥工程師 肉豬: HTML value屬性</a>  </p>
</blockquote>
<h3 id="語意化標籤"><a href="#語意化標籤" class="headerlink" title="語意化標籤"></a>語意化標籤</h3><p>英文 <em>Semantic Elements</em></p>
<p>綜觀所有東西確實可以使用 <code>div</code> 來包裹<br>但在閱讀上其實不太方便<br>尤其網頁在爬蟲時，要讓機器方便閱讀<br>因此才有語意化標籤來輔助<br>如果是人，在閱讀上也來的更清楚快速</p>
<blockquote>
<p>更多的可以參照 W3 說明<br>(<a href="https://www.w3schools.com/html/html5_semantic_elements.asp">HTML Semantic Elements (w3schools.com)</a>)  </p>
</blockquote>
<p>提到給機器看，很大一部分跟 SEO (search engine optimization) 也有關連<br>比起看 <code>div</code> 猜意思，不如直接跟他說這是什麼區塊 </p>
<p>這邊舉幾個是常見的  </p>
<ol>
<li><code>&lt;main&gt;</code> : 放主要內容的</li>
<li><code>&lt;nav&gt;</code> : 導覽列</li>
<li><code>&lt;footer&gt;</code> : 網頁底部資訊</li>
<li><code>&lt;section&gt;</code> : 區塊資訊</li>
</ol>
<p>總之，功能跟 <code>div</code> 包裹沒差別，差在更容易識別。</p>
<h3 id="跳脫標籤"><a href="#跳脫標籤" class="headerlink" title="跳脫標籤"></a>跳脫標籤</h3><p>有些特殊字元並沒辦法在 html 中呈現<br>當你打 想顯示 &lt;div&gt; ，怎麼打就是看不見<br>例如 <code>div</code> 前面跟後面的 <code>&lt; &gt;</code> 這個標籤<br>替代符號可以用以下幾個  </p>
<table>
<thead>
<tr>
<th>符號</th>
<th>替代使用</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>&amp;amp;</td>
</tr>
<tr>
<td>&lt;</td>
<td>&amp;lt;</td>
</tr>
<tr>
<td>&gt;</td>
<td>&amp;gt;</td>
</tr>
</tbody></table>
<p>範例 : *markdown 語法也會吃 html<br> <pre>            &lt;div&gt;</pre><br> 實際上長這樣 <strong>&amp;lt;div&amp;gt;</strong></p>
<h3 id="SEO-相關東西"><a href="#SEO-相關東西" class="headerlink" title="SEO 相關東西"></a>SEO 相關東西</h3><p>這邊我覺得蠻有趣的，所以也記錄一下      </p>
<p>搜尋一打，為什麼有些網站名列前茅?<br>SEO 要做得好，其實跟 meta tag 脫不了關係<br>因為這部份真的很 <strong>深深深深</strong><br>有些公司是有一個專門團隊在管理這部分的<br>僅列出稍微知道的一部分  </p>
<h4 id="SEO是給機器看的"><a href="#SEO是給機器看的" class="headerlink" title="SEO是給機器看的"></a>SEO是給機器看的</h4><p>也就是為什麼有語意化標籤的產生<br>除了內容標籤之外<br>又必須在網頁設定告訴機器哪些事?    </p>
<p>常見的有這幾個<br>以 <a href="https://www.walkerland.com.tw/article/view/186797">這個網站</a> 為例<br>按出 devtool 打開 head 就可以看見<br>記得 head 裡面的東西是 <strong>網頁的資本資訊</strong><br><img data-src="https://chi01pap001files.storage.live.com/y4mJy12jCWqUv8I3m2vELwKn21a1DPZjMIadHGCUzAOxa4X6RW-HfYkEBrWU1KomtH6K40CNew2xpfnfk64KV51Gek1qn-XTbvyr7E65IcIgyyGjosLV9kyNCsyyjQk-1NUgZanO06xoRqbydtD3pRl7nrxCyJC0QUm5UeTudmF47vINqUkYQWoAnzv0wybtQRM?width=660&height=462&cropmode=none"></p>
<p>這邊都是指在搜尋引擎相關的資訊 </p>
<ol>
<li> <code>keywords</code> : 關鍵字</li>
<li> <code>description</code>  : 網頁敘述。這蠻重要的，寫得好容易被排的前面</li>
<li> <code>title</code> : 網頁的標題。搏人眼球的標題容易點進來</li>
<li> <code>property</code> : 屬性。這邊通常會給 <code>社群媒體</code> 相關設定用</li>
</ol>
<h5 id="property"><a href="#property" class="headerlink" title="property"></a><strong>property</strong></h5><ol>
<li><p><code>og</code> : Open Graph protocol。最常用的是 FB 。<br>裡面可以設定在 FB 分享時出現的 <code>圖片、標題、敘述</code><br>詳細可以到 偵錯工具看<br>子屬性分別有對應的功能</p>
<blockquote>
<p><a href="https://developers.facebook.com/tools/debug/?locale=zh_TW">分享偵錯工具 - Facebook for Developers</a></p>
</blockquote>
</li>
<li><p><code>app_id</code> : 有些網站具有 app ，會挑出訊息告訴使用者可以下載來獲得更加體驗之類的。</p>
</li>
</ol>
<h5 id="JSON-LD"><a href="#JSON-LD" class="headerlink" title="JSON-LD"></a><strong>JSON-LD</strong></h5><p>這個是給 google 引擎看的<br>是在搜尋後呈現的東西<br>一樣同個網站，Umm不太好找<br>主要有找到這個標籤<br><img data-src="https://chi01pap001files.storage.live.com/y4myYnkBblETyqypt00tVvRJJCVVClV3ueNCz4wZmj6vFMd_cwhAPAFQJLmtm8-TsF-CxnhijUI_n6HF80TxRos9HOO3yWE1n96TzqWQbECYmjCGlLlXiIFfSZJe8FERdC9C8NrXgp9NLSxp8tY1B_3oEaNLMJPQ_I7YEbuNWcJMF1Px7RyrLfK5IpGyQsN-I2E?width=660&height=146&cropmode=none"></p>
<blockquote>
<p>詳細參考這篇文章有提到各式種類呈現<br><a href="https://z3388638.medium.com/%E4%BD%BF%E7%94%A8-json-ld-%E8%99%95%E7%90%86-seo-%E4%B8%A6%E8%AE%93-google-%E9%87%9D%E5%B0%8D%E4%B8%8D%E5%90%8C%E5%BD%A2%E5%BC%8F%E7%B6%B2%E7%AB%99%E5%81%9A%E7%8D%A8%E7%89%B9%E7%9A%84%E6%90%9C%E5%B0%8B%E7%B5%90%E6%9E%9C%E5%91%88%E7%8F%BE-9c74783c017a">使用 JSON-LD 處理 SEO，並讓 Google 針對不同形式網站做獨特的搜尋結果呈現 | by YY | Medium</a></p>
</blockquote>
<p>google 的開發者頁面就有提到這部分</p>
<blockquote>
<p><a href="https://developers.google.com/search/docs/advanced/structured-data/intro-structured-data?hl=zh-tw">瞭解結構化資料的運作方式 | Google 搜尋中心  |  Google Developers</a></p>
</blockquote>
<p>關於 JSON-LD</p>
<blockquote>
<p><a href="https://json-ld.org/">JSON-LD - JSON for Linking Data</a></p>
</blockquote>
<h5 id="robot-txt"><a href="#robot-txt" class="headerlink" title="robot.txt"></a><strong>robot.txt</strong></h5><p>這個檔案是給爬蟲看的<br>裡面也明確規範告訴爬蟲<br>哪些不要看、哪些給你看</p>
<blockquote>
<p>參考資料<br><a href="https://zh.wikipedia.org/wiki/Robots.txt">robots.txt - 維基百科，自由的百科全書 (wikipedia.org)</a>  </p>
</blockquote>
<h5 id="sitemap-xml"><a href="#sitemap-xml" class="headerlink" title="sitemap.xml"></a><strong>sitemap.xml</strong></h5><p>也就是網站地圖<br>更快速幫助機器讀懂網站架構<br>通常也會規範在 robot.txt 裡</p>
<blockquote>
<p>參考資料<br><a href="https://ranking.works/%E6%8A%80%E8%A1%93SEO/sitemap">【Sitemap SEO教學篇】Sitemap是什麼？一次掌握Sitemap網站地圖製作與提交流程！ | Ranking SEO</a></p>
</blockquote>
<h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>主要是紀錄 html 的架構說明<br>SEO 的部分只是蜻蜓點水<br>以後有興趣再往深處寫  </p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - 資料型態(I)</title>
    <url>/Frontend/JavaScript/JavaScript-DataType/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這篇 Primaitvie vaule (原始值) 以及 Object 之間差別的說明     </p>
<span id="more"></span>
<h3 id="Primitive-vaule"><a href="#Primitive-vaule" class="headerlink" title="Primitive vaule"></a>Primitive vaule</h3><p>常見的有六種，另外兩種 symbol 跟 BigInt 先不做討論  </p>
<ol>
<li>boolean</li>
<li>string</li>
<li>number</li>
<li>null </li>
<li>undefined</li>
<li>object ( function 函式 、array 陣列 … )</li>
</ol>
<p>在 <strong>null</strong> 與  <strong>undefined</strong> 的定義有點微妙<br>暫不討論   </p>
<h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p>像是 Object 或 Array 這類的會被歸類在 object</p>
<blockquote>
<p>注意 :  主要是記憶體跟純賦值不同<br>function 算是被視為一種 Object 只是被呼叫而已 </p>
</blockquote>
<h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>查詢數值型態  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'abc'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span> <span class="token comment">// string</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>其他的類別以此類推  </p>
<blockquote>
<p>詳細的型態說明<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#examples">typeof - JavaScript | MDN (mozilla.org)</a>    </p>
</blockquote>
<h3 id="可變與不可變-Immutable"><a href="#可變與不可變-Immutable" class="headerlink" title="可變與不可變 (Immutable)"></a>可變與不可變 (Immutable)</h3><h4 id="不可變"><a href="#不可變" class="headerlink" title="不可變"></a>不可變</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'hello'</span>
<span class="token number">2.</span> a <span class="token operator">=</span> <span class="token string">'yo'</span>
<span class="token number">3.</span> a<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>(2) <code>a  = yo</code> 這是被賦值，並非完全被覆蓋掉<br>在  <strong><code>hello </code></strong> 已建立了一個記憶體位置儲存值<br>而 <strong><code>yo</code></strong> 只是重新賦值<br>且又新建立一個新的記憶體位置存放值</p>
<p>(3) 的部分是沒有任何效果的，是不會變動到 a<br>也不會改變a的值<br>要麼寫成 <code>a = a.toUpperCase()</code>  </p>
<blockquote>
<p>這邊講的不可變是 <strong><code>操作值所回傳的結果</code></strong><br>a.toUpperCase() 回傳回來的並沒有被改變<br>而在 a = a.toUpperCase() 才做改變  </p>
</blockquote>
<p>因此 CDN 這邊說明 Primaitive vaule 是不可變的   </p>
<h4 id="可變"><a href="#可變" class="headerlink" title="可變"></a>可變</h4><p>舉 object 來看 mutable    </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span> <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span><span class="token number">1</span> <span class="token punctuation">&#125;</span>
<span class="token number">2.</span> <span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj 
<span class="token number">3.</span> obj2<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span>
<span class="token number">4.</span> obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">0</span>
<span class="token number">5.</span> obj2<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>必須先知道 Object 是儲存記憶體的位置<br>並非只有單純的值  </p>
<ol>
<li>(1)新建立一個 obj 實際是建立了一個記憶體<br>例如是 <code>0x01</code></li>
<li>(2) 新物件 obj2 =  obj<br> obj 跟 obj2 是指向同一個記憶體位置  </li>
<li>(3) obj2 改變 a 的值， <strong><code>obj 的 a 也會一同被改變</code></strong><br> 也就是 <code>obj2 = &#123;a : 2&#125; ,obj = &#123;a : 2&#125;</code>   <blockquote>
<p>改變的是同一個記憶體位置<br>obj2 的 記憶體位置也是 <code>0x01</code><br>兩者指向的是同一個，因此改變其中一個就會通通改變  </p>
</blockquote>
</li>
</ol>
<ul>
<li>列出跟 Primative vaule 差別  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> a
b <span class="token operator">=</span> <span class="token number">1</span>
<span class="token comment">//請問 b = ?</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
答案 <strong><code>b = 1 ,a = 2</code></strong><br>這邊我們可以知道這邊指的是賦值<br>並非指向同一個記憶體   </li>
</ul>
<ol start="4">
<li>因此到 (4) 再看一次 <code>obj = &#123;a : 0&#125; ,obj = &#123;a : 0&#125;</code>    </li>
<li>(5)  obj2 多新增一個 b ，但 obj 並不會新增<br>這邊 obj 已經是另一個新的記憶體 <code>0x02</code><br>代表兩者已經不一樣了<br><code>obj = &#123;a : 0&#125; ,obj = &#123;a : 0 ,b : 2&#125;</code>      </li>
</ol>
<p>關於 <strong>淺拷貝與深拷貝</strong> 參考可以看這篇  </p>
<blockquote>
<p><a href="https://blog.huli.tw/2018/06/23/javascript-call-by-value-or-reference/">深入探討 JavaScript 中的參數傳遞：call by value 還是 reference？ - Huli</a></p>
</blockquote>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>之前在使用物件時<br>常常不知道為什麼會突然改到原物件<br>我以為的拷貝結果不是拷貝 :O<br>接觸更深後才知道<br>要複製可以使用展開的方式<br>像這樣  </p>
<pre><code class="javascript">  var obj = &#123;
    a:1,
    b:2
  &#125;
  var obj2 = &#123;...obj&#125;
</code></pre>
<p>再改動 obj2 值就不會影響 obj 了  </p>
<p>基礎篇章都只是記錄小東西<br>更新的不快<br>繼續學習 ! GOGO  </p>
<hr>
<blockquote>
<p>參考資料<br><a href="https://derek.coderbridge.io/2020/09/29/javascript-%E6%A0%B8%E5%BF%83-%E8%AE%8A%E6%95%B8%E8%88%87%E4%BB%96%E7%9A%84%E7%94%A2%E5%9C%B0/">JavaScript 核心 - 變數與他們的產地 (coderbridge.io)</a>  </p>
</blockquote>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript 邏輯運算子</title>
    <url>/Frontend/JavaScript/JavaScript-Logic/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在寫網頁的經歷<br>有很大一部分是關於 <strong><code>「設計面」</code></strong><br>程式面的部份都像蘸醬油一樣<br>打算把基礎的概念弄得清楚  </p>
<span id="more"></span>
<p>未來打算規劃 30 Days Javascript Challenages<br>提升自己對解決問題的敏感度 XD<br>在這之前先補齊一些常識吧 QQ  </p>
<h2 id="邏輯運算"><a href="#邏輯運算" class="headerlink" title="邏輯運算"></a><strong>邏輯運算</strong></h2><p>在二元邏輯裡面知道布林值有 <code>true</code> 和 <code>false</code><br>JS 什麼情況下是 <code>true</code>？ 什麼是 <code>false</code> ？<br>其實 JS 對於這兩個各自又對某些值有不同的定義  </p>
<p>在一般的程式語言中，不是回傳 true 就是 fasle<br>但在 JS 裡數字、字串也可以做邏輯運算<br>後面會說明  </p>
<p>先來看一下運算子有哪三個：  </p>
<h3 id="運算子"><a href="#運算子" class="headerlink" title="運算子"></a><strong>運算子</strong></h3><p>運算子有三種  </p>
<table>
<thead>
<tr>
<th>邏輯</th>
<th align="center">長相</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>AND</td>
<td align="center">&amp;&amp;</td>
<td>兩個為 <code>真</code> 就是 <code>真</code>；其一為 <code>假</code> 就是 <code>假</code></td>
</tr>
<tr>
<td>OR</td>
<td align="center">||</td>
<td>其一為 <code>真</code> 就是 <code>真</code>，反之 <code>假</code> 也是</td>
</tr>
<tr>
<td>NOT</td>
<td align="center">!</td>
<td><code>真</code> 為 <code>假</code> ； <code>假</code> 為 <code>真</code></td>
</tr>
</tbody></table>
<p>* <strong>NOT</strong> 簡單來說就是把得出的值給相反過來。  </p>
<p>總之基本上有四種狀況  </p>
<ul>
<li>true , true</li>
<li>true , false</li>
<li>false , true  </li>
<li>false , false  </li>
</ul>
<p>應該還行吧～  </p>
<h3 id="短路求值"><a href="#短路求值" class="headerlink" title="短路求值"></a>短路求值</h3><p>上面有提及關於數字與字串也可以做邏輯運算<br>來看看官方的例子  </p>
<ol>
<li>&amp;&amp;     <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a1 <span class="token operator">=</span>  <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token comment">// t &amp;&amp; t 回傳 true</span>
<span class="token keyword">var</span> a2 <span class="token operator">=</span>  <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// t &amp;&amp; f 回傳 false</span>
<span class="token keyword">var</span> a3 <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token comment">// f &amp;&amp; t 回傳 false</span>
<span class="token keyword">var</span> a4 <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// f &amp;&amp; f 回傳 false</span>
<span class="token keyword">var</span> a5 <span class="token operator">=</span> <span class="token string">"Cat"</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"Dog"</span><span class="token punctuation">;</span> <span class="token comment">// t &amp;&amp; t 回傳 Dog</span>
<span class="token keyword">var</span> a6 <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"Cat"</span><span class="token punctuation">;</span> <span class="token comment">// f &amp;&amp; t 回傳 false</span>
<span class="token keyword">var</span> a7 <span class="token operator">=</span> <span class="token string">"Cat"</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// t &amp;&amp; f 回傳 false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<ul>
<li>a1 兩者為 <code>真</code> 就是真 <code>真</code>  </li>
<li>a2、a3 其一為 <code>假</code> ，就是 <code>假</code>   </li>
<li>a4 兩者為 <code>假</code> ， 就是 <code>假</code>  </li>
<li>a5 為什麼會回傳 <strong><code>Dog</code></strong> 呢　？  而不是 <code>Cat</code>  </li>
<li>a6 為什麼會回傳 <strong><code>false</code></strong> 呢　？ 而不是 <code>Cat</code> </li>
<li>a7 為什麼會回傳 <strong><code>false</code></strong> 呢　？ 而不是 <code>Cat</code> </li>
</ul>
<p>  官方到底在 <strong>りしれ供さ小</strong><br>  甚至看到 <code>||</code> 的例子又更懵了  </p>
<ol start="2">
<li>||  </li>
</ol>
  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o5 <span class="token operator">=</span> <span class="token string">'Cat'</span> <span class="token operator">||</span> <span class="token string">'Dog'</span><span class="token punctuation">;</span>  <span class="token comment">// t || t 回傳 Cat</span>
<span class="token keyword">var</span> o6 <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token string">'Cat'</span><span class="token punctuation">;</span>  <span class="token comment">// f || t 回傳 Cat</span>
<span class="token keyword">var</span> o7 <span class="token operator">=</span> <span class="token string">'Cat'</span> <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// t || f 回傳 Cat  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>o5 為什麼會回傳 <strong><code>Cat</code></strong> 呢　？  而不是 <code>Dog</code>  </li>
<li>o6 為什麼會回傳 <strong><code>Cat</code></strong> 呢　？ 而不是 <code>false</code> </li>
<li>o7 為什麼會回傳 <strong><code>Cat</code></strong> 呢　？ 而不是 <code>false</code>  </li>
</ul>
<p>   6 跟 7 看起來一樣，判斷上又不一樣  </p>
<h4 id="什麼是短路求值"><a href="#什麼是短路求值" class="headerlink" title="什麼是短路求值?"></a>什麼是短路求值?</h4><p>把兩者分開來看    </p>
<ol>
<li><h5 id="amp-amp"><a href="#amp-amp" class="headerlink" title="&amp;&amp;"></a><strong>&amp;&amp;</strong></h5><p> 如果遇到假，整個就是假的了<br> 那個 <code>假</code> 就是產出的值   </p>
<p> 都為真的情況下，最後一個的值才會是產出      </p>
<blockquote>
<p>簡單來說就是 <strong><code>真的就過關斬將</code></strong><br>遇到假的就停止   </p>
</blockquote>
<p> 總結來說<br> 遇到第一個 <code>假</code> ，就短路了<br> 後面就不用判斷了  </p>
</li>
<li><h5 id=""><a href="#" class="headerlink" title="||"></a><strong>||</strong></h5><p> 那麼 <code>||</code> 就是相反了<br> 遇到真，整個亦為真<br> 那個真，就是產出的值  </p>
<p> 反之，全都假，最後一個值才會是產出  </p>
<blockquote>
<p>遇真就停止<br>全假就假到底  </p>
</blockquote>
<p> 簡單來說，遇到第一個 <code>真</code> ，就短路了  </p>
</li>
</ol>
<p><strong>這有什麼好處呢？</strong><br>短路求值的好處就在 <strong><code>不用整個都去判斷完才有果</code></strong><br>遇到短路就得值，就 Out<br>比較不會占用效能</p>
<p>其實這也不用背啦<br>只要知道哪些東西會被判斷為假才叫假  </p>
<h4 id="真真假假是又是怎麼判斷"><a href="#真真假假是又是怎麼判斷" class="headerlink" title="真真假假是又是怎麼判斷"></a>真真假假是又是怎麼判斷</h4><blockquote>
<p>哪些是 <strong><code>false</code></strong> ?</p>
</blockquote>
<p>以下是 <a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy">官方文件</a> 說的<br>常見的是這幾個  </p>
<ol>
<li><code>0</code></li>
<li><code>&quot;&quot;</code>、<code>&#39;&#39;</code> 空字串</li>
<li><code>null</code></li>
<li><code>NaN</code> (not a number)，這個很…微妙，改天做一篇  </li>
<li><code>undefined</code> (未定義)</li>
</ol>
<p>其餘的就是 <code>真</code> 了。</p>
<p>所以來看看這些例子  </p>
<ol>
<li>0 <code>||</code> 3 =&gt; 3</li>
<li>3 <code>&amp;&amp;</code> 0 =&gt; 0</li>
</ol>
<ul>
<li><p><strong><code>||</code></strong> : </p>
<blockquote>
<p>是真。求真，遇到 3 是真，得值</p>
</blockquote>
</li>
<li><p><strong><code>&amp;&amp;</code></strong></p>
<blockquote>
<p>是假。求假，遇到 0 是假，得值  </p>
</blockquote>
</li>
</ul>
<p>如果是一場串的，也是一樣的  </p>
<p>當然還有 <strong><code>ToBoolean</code></strong> 的問題<br>這邊先不討論<br><code>布林值</code> 跟 <code>布林物件</code> 是不一樣的  </p>
<h2 id="位元運算"><a href="#位元運算" class="headerlink" title="位元運算"></a>位元運算</h2><p>邏輯運算子是兩個符號湊在一起<br>像 <code>&amp;&amp;</code> 、 <code>||</code><br>看的是整體，而位元看的是個體  </p>
<p>位元，會想到 2 進位<br>也就是 <code>1001</code> 這類的<br>那邏輯上哪裡不同 ?  </p>
<h3 id="何謂整體與個體？"><a href="#何謂整體與個體？" class="headerlink" title="何謂整體與個體？"></a>何謂整體與個體？</h3><h4 id="個體-位元運算"><a href="#個體-位元運算" class="headerlink" title="個體 (位元運算)"></a>個體 <strong>(位元運算)</strong></h4><p>舉例運算 <strong><code>10 &amp; 15</code></strong><br>先把兩者都變成2進位<br>不足的話往前補零</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">         <span class="token number">1010</span>
<span class="token constant">AND</span>      <span class="token number">1111</span>
輸出     <span class="token number">1010</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>位元 <code>1010</code> 換十進位值是 <code>10</code><br>所以 <code>10 &amp; 15 = 10</code></p>
<h4 id="整體-邏輯運算"><a href="#整體-邏輯運算" class="headerlink" title="整體 (邏輯運算)"></a>整體 <strong>(邏輯運算)</strong></h4><p>一樣舉例 <code>10 &amp;&amp; 15</code><br>兩者為真，最後為值<br>所以 <code>10 &amp;&amp; 15 = 15</code>。</p>
<p>在 JS 輸入 <code>&amp;&amp;</code> 以及 <code>&amp;</code> 兩者會不一樣的  </p>
<h3 id="位元運算符號"><a href="#位元運算符號" class="headerlink" title="位元運算符號"></a>位元運算符號</h3><table>
<thead>
<tr>
<th align="center">符號</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&amp; (AND)</td>
<td>和邏輯運算一樣</td>
</tr>
<tr>
<td align="center">| (OR)</td>
<td>和邏輯運算一樣</td>
</tr>
<tr>
<td align="center">^ (XOR)</td>
<td>都一樣回傳 <code>0</code>，反之傳 <code>1</code></td>
</tr>
<tr>
<td align="center">~ (NOT)</td>
<td>把 <code>1</code> 變 <code>0</code>，反之 <code>0</code> 變 <code>1</code></td>
</tr>
</tbody></table>
<p>舉例 :  </p>
<ol>
<li><code>10 &amp; 15 = 10</code></li>
<li><code>10 | 15 = 15</code></li>
<li><code>10 ^ 15 = 5</code></li>
<li><code>~ 10 = -11</code></li>
</ol>
<ul>
<li>前面空的位數都需要補零，在 NOT 才不會算錯  </li>
</ul>
<blockquote>
<p>參考資料<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#bitwise_operators">bitwise_operators</a>  </p>
</blockquote>
<h3 id="這能做什麼？"><a href="#這能做什麼？" class="headerlink" title="這能做什麼？"></a>這能做什麼？</h3><p>從 <code>&amp;</code> 來看 </p>
<ul>
<li><code>A &amp; 1</code> 尾數是 <strong><code>0</code></strong>  就是偶數</li>
<li><code>A &amp; 1</code> 尾數是 <strong><code>1</code></strong>  就是奇數</li>
</ul>
<p>這樣可以來判斷該數是 <code>偶數</code> 或 <code>基數</code><br>不然以往我們要判斷時都要透過 <code>2 的餘數是不是 0</code><br>也就是 <code>A % 2</code> 來判斷。</p>
<ol>
<li>來個實例，例如 5<pre class="line-numbers language-none"><code class="language-none">  101
&amp;   1
-----
  001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
可以發現這個值的尾數是 1 ， 5 是奇數。  </li>
</ol>
<p>大概是這樣 XD</p>
<ol start="2">
<li>來個實例，例如 10<pre class="line-numbers language-none"><code class="language-none">  1010
&amp;    1
------
  0000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
可以發現這個值的尾數是 0 ， 10 是偶數。  </li>
</ol>
<h2 id="位元進位"><a href="#位元進位" class="headerlink" title="位元進位"></a>位元進位</h2><table>
<thead>
<tr>
<th align="center">符號</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&gt;&gt;</td>
<td>往右二進位</td>
</tr>
<tr>
<td align="center">&lt;&lt;</td>
<td>往左二進位</td>
</tr>
</tbody></table>
<p>舉例 : </p>
<ul>
<li>10 &lt;&lt; 2 = 40  </li>
<li>10 &gt;&gt; 2 = 2</li>
</ul>
<p>* 記得要先換成二進位。</p>
<h3 id="這能做什麼？-1"><a href="#這能做什麼？-1" class="headerlink" title="這能做什麼？"></a>這能做什麼？</h3><ul>
<li><code>&lt;&lt; 1</code> 可以想成 <strong>乘以 2</strong>  </li>
<li><code>&gt;&gt; 1</code> 可以想成 <strong>除以 2</strong>  </li>
</ul>
<p>位元運算一般效能比較快</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>運算子其實有很多<br>有用到再查好了<br>我才知道原來有位元進位這東西<br>不過實際的用途沒什麼概念   </p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 筆記 ⟭ CSS 預處理器 Sass 結構化&amp;模組化</title>
    <url>/Frontend/CSS/CSS-Sass-02/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上篇了解 CSS 預處理器的運作<br>跟 Sass 的安裝<br>接下來要認識 Sass 的使用了！<br>一樣根據 <a href="https://lidemy.com/p/fe201">[FE201] 前端中階：那些前端會用到的工具們</a><br>這堂課的隨堂筆記<br>若有誤請指教  </p>
<p>接下來會提到幾個常用的功能  </p>
<h2 id="結構化"><a href="#結構化" class="headerlink" title="結構化"></a>結構化</h2><p>想一下如果每次都要抓色票<br>都要複製 6 碼<br>是一件蠻麻煩的事<br>呈上篇介紹&amp;安裝所講的<br>預處理器是套用程式的概念來寫樣式<br>在程式邏輯中如果重複出現的東西<br>最好想辦法簡單化<br>因此結構化地處理可以使的維修更快速<br>就必須講到兩個東西  </p>
<ol>
<li>自訂義變數  </li>
<li>巢狀結構  </li>
</ol>
<h3 id="變數-variable"><a href="#變數-variable" class="headerlink" title="變數 ( variable )"></a>變數 ( variable )</h3><blockquote>
<p><code>$variable</code> : <code>css value</code></p>
</blockquote>
<p>用 <code>$</code> 符號來表示定義變數<br>當然別跟 <code>JQuery</code> 的 <code>$</code> 搞混了<br>兩個沒什麼關係  </p>
<p>在 Sass 中可以自訂義多組變數<br>使用上 :  </p>
<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$color-primary</span></span><span class="token punctuation">:</span> #eee
<span class="token property"><span class="token variable">$h1</span></span><span class="token punctuation">:</span> 1.6rem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>不過最近的 CSS 已經可以自訂義變數了<br>只是是用 <code>var</code> 也就是全域變數  </p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">:root</span><span class="token punctuation">&#123;</span>
  <span class="token property">--text-color</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.box</span><span class="token punctuation">&#123;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--text-color<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>有興趣可以讀一下 MDN 的文件<br>目前我還沒有研究這部分 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties">Using CSS custom properties</a><br>但不代表可以完全替代 Sass<br>泛用 <code>var</code> 全域變數其實是不太方便的     </p>
<h3 id="巢狀-nesting"><a href="#巢狀-nesting" class="headerlink" title="巢狀 ( nesting )"></a>巢狀 ( nesting )</h3><p><code>HTML</code> 也是一層層像洋蔥皮<br><code>Sass</code> 也可以堆疊<br>整體來說沒有 CSS 那麼囉嗦  </p>
<ul>
<li><p>以往 css 寫要這樣</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.menu</span><span class="token punctuation">&#123;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.menu__listgroup</span><span class="token punctuation">&#123;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.menu__listgroup:hover</span><span class="token punctuation">&#123;</span>
  <span class="token property">color</span><span class="token punctuation">:</span>white<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>Sass</p>
<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss">.menu
  <span class="token property">color</span><span class="token punctuation">:</span> red
  &amp;.listgroup
    <span class="token property">background-color</span><span class="token punctuation">:</span>blue
  &amp;.<span class="token property">listgroup</span><span class="token punctuation">:</span>hover
    <span class="token property">color</span><span class="token punctuation">:</span>white<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>&amp;</code> 是指 上一層的本身元素<br>這樣可以不用重複撰寫  </li>
<li>如果是寫<code>:hover</code>、<code>::before</code> 這些也可以<br>例 : <code>&amp;:hover</code> <code>&amp;::before</code>  </li>
</ul>
</li>
</ul>
<p>噹噹！這樣不用重複罰寫多棒 QQ  </p>
<h3 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h3><ol>
<li>自訂義變數用 <code>$</code>  </li>
<li>重複提起自己用 <code>&amp;</code>  </li>
</ol>
<h2 id="模組化"><a href="#模組化" class="headerlink" title="模組化"></a>模組化</h2><p>就像 javascript 一樣可以 <code>import</code> </p>
<h3 id="import-amp-use"><a href="#import-amp-use" class="headerlink" title="@import  &amp; @use"></a>@import  &amp; @use</h3><p>這兩者都是可以引入  </p>
<ul>
<li><p>@import<br>引入其他檔案的 sass</p>
<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">// style.sass</span>
<span class="token keyword">@import</span> __<span class="token function">variables</span><span class="token punctuation">(</span>.sass<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p><code>__variables</code> 是變數檔案命名習慣<br><code>__mixins</code> 以此類推<br>這樣可以直接使用裡面的內容  </p>
</blockquote>
</li>
<li><p>@use<br>跟 import 很像，但可以另外訂 namespace</p>
<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">// style.sass</span>
<span class="token keyword">@use</span> __<span class="token function">variables</span><span class="token punctuation">(</span>.sass<span class="token punctuation">)</span> <span class="token module-modifier keyword">as</span> variable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>引用就像 object 一樣<br>例 : <code>variable.color</code>  </p>
</li>
</ul>
<h3 id="extend"><a href="#extend" class="headerlink" title="@extend"></a>@extend</h3><p>利用 <code>%</code> 百分比符號來表示 <strong>模板</strong></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">%btn
	<span class="token property">width</span><span class="token punctuation">:</span>50px
	<span class="token property">height</span><span class="token punctuation">:</span>50px
	<span class="token property">background</span><span class="token punctuation">:</span>$btn-color<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>使用的時候用 <code>@extend</code> <pre class="line-numbers language-scss" data-language="scss"><code class="language-scss">div
	<span class="token keyword">@extend</span> <span class="token placeholder selector">%btn</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="mixin-amp"><a href="#mixin-amp" class="headerlink" title="@mixin  &amp; +"></a>@mixin  &amp; +</h3><p>把想要的元件內容包裝起來<br>可以 <strong>帶變數</strong></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">// 不帶變數
@mixin hover-btn
	&amp;<span class="token punctuation">:</span>hover
		<span class="token property">transition</span> <span class="token punctuation">:</span> .3s
	
// 帶變數 <span class="token punctuation">(</span>$<span class="token property">Value</span><span class="token punctuation">:</span>default value<span class="token punctuation">)</span>
@mixin btntemp <span class="token punctuation">(</span>$<span class="token property">bg-color</span><span class="token punctuation">:</span>grey<span class="token punctuation">)</span>
	<span class="token property">width</span><span class="token punctuation">:</span>50px
	<span class="token property">height</span><span class="token punctuation">:</span>50px
	<span class="token property">background</span><span class="token punctuation">:</span>$bg-color
		<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>使用的時候</li>
</ul>
<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss">div
	btn
	+hover-btn
	+<span class="token function">btntemp</span><span class="token punctuation">(</span>red<span class="token punctuation">)</span> <span class="token comment">//如果沒有填的話就是預設 grey</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="function-amp-return"><a href="#function-amp-return" class="headerlink" title="@function &amp; @return"></a>@function &amp; @return</h3><p>可以寫一個函式回傳值</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">@function <span class="token function">btn-size</span><span class="token punctuation">(</span>$size<span class="token punctuation">)</span>
	@return $size * .1rem
	
.btn
	<span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">btn-size</span><span class="token punctuation">(</span>2<span class="token punctuation">)</span>  
// 結果就是 0.2rem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="小結-1"><a href="#小結-1" class="headerlink" title="小結"></a>小結</h3><ol>
<li><code>@import</code>、<code>@use</code> 都是拿來引入的，<code>@use</code> 可以自訂義名稱  </li>
<li><code>%</code> 是寫模板用的。<code>@extend</code> 是在 className 裡引入模板用。</li>
<li><code>@mixin</code> 可以加入參數，但不會回傳<br>使用時用 <code>@include</code>  或 <code>+</code>  </li>
<li><code>@function</code> 可以加入參數，使用 <code>@return</code> 回傳  </li>
</ol>
<h2 id="個別差別"><a href="#個別差別" class="headerlink" title="個別差別"></a>個別差別</h2><p>有些功能會讓人混淆<br>有一些小小差別<br>不過用的 OK 其實都行   </p>
<h3 id="import-v-s-use"><a href="#import-v-s-use" class="headerlink" title="@import v.s @use"></a>@import v.s @use</h3><table>
<thead>
<tr>
<th></th>
<th>@import</th>
<th>@use</th>
</tr>
</thead>
<tbody><tr>
<td>差別</td>
<td>純引入位址</td>
<td>引入可以加 namespace</td>
</tr>
</tbody></table>
<p><code>@use</code> 比較客製化<br>在命名上比較不會混亂    </p>
<h3 id="extend-v-s-mixin"><a href="#extend-v-s-mixin" class="headerlink" title="@extend v.s @mixin"></a>@extend v.s @mixin</h3><p>兩者都可以模組化需要的東西</p>
<table>
<thead>
<tr>
<th></th>
<th>@extend</th>
<th>@mixin</th>
</tr>
</thead>
<tbody><tr>
<td>使用用處</td>
<td>純模板</td>
<td>可以帶參數微調的模板</td>
</tr>
<tr>
<td>用法</td>
<td>固定的部件(按鈕的外觀形狀)</td>
<td>附加的屬性(按鈕客製顏色)</td>
</tr>
<tr>
<td>產出差別</td>
<td>同樣的東西以逗號隔開</td>
<td>個別獨立出來</td>
</tr>
</tbody></table>
<ul>
<li>可以這樣用<pre class="line-numbers language-css" data-language="css"><code class="language-css">%btn
	<span class="token property">height</span><span class="token punctuation">:</span> 50px
	<span class="token property">width</span><span class="token punctuation">:</span> 50px
	<span class="token property">padding</span> <span class="token punctuation">:</span> 5px

@mixin btn_<span class="token function">color</span><span class="token punctuation">(</span>$<span class="token property">color</span><span class="token punctuation">:</span>#eee<span class="token punctuation">)</span>
		<span class="token property">background-color</span><span class="token punctuation">:</span>$color  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">.btn
	@extend %btn
	&amp;<span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span>odd<span class="token punctuation">)</span>
		+btn_<span class="token function">color</span><span class="token punctuation">(</span>red<span class="token punctuation">)</span>
	&amp;<span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span>even<span class="token punctuation">)</span>
		+btn_<span class="token function">color</span><span class="token punctuation">(</span>blue<span class="token punctuation">)</span>		<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<p>範例 : 產出的差別<br><img data-src="https://i.imgur.com/ndmDRQY.png" alt="針對不同的按鈕"></p>
<ol>
<li><code>@extend</code> : 產生同樣模板的東西會以逗號隔開<br> <img data-src="https://i.imgur.com/RMcBMOl.png" alt="extend產出"></li>
<li><code>@mixin</code> 則是會個別獨立，重新複製貼上<br> <img data-src="https://i.imgur.com/tkgByt1.png" alt="mixin產出"> </li>
</ol>
<p>以效能上來說<br>重複性值的屬性 <code>@extend</code> 比較好<br>因為用字數較少<br>容量自然就小一點  </p>
<h3 id="mixin-v-s-function"><a href="#mixin-v-s-function" class="headerlink" title="@mixin v.s @function"></a>@mixin v.s @function</h3><table>
<thead>
<tr>
<th></th>
<th>@mixin</th>
<th>@function</th>
</tr>
</thead>
<tbody><tr>
<td>常使用</td>
<td>多項同個元件</td>
<td>單個屬性回傳值</td>
</tr>
<tr>
<td>用法</td>
<td>一塊跨頁的部件</td>
<td>一些特定狀況時回傳，通常會在 mixin 裡面</td>
</tr>
</tbody></table>
<p>因為我比較少用到 <code>@function</code> 的用法<br>不過可以拿 boostrap 的檔案來看<br><img data-src="https://i.imgur.com/6bnQPlz.png" alt="boostrap 圓角"><br>boostrap 也是使用 sass<br>針對條件來寫判斷以及迴圈更快產生樣式<br>簡單來說  </p>
<blockquote>
<p>boostrap 已經幫你寫好一堆 css  </p>
</blockquote>
<p>以常見的 <code>h1~h6</code> <code>mt-1~-4(margin-top)</code><br>當然不會一個個寫<br>而是利用 Sass 的 <code>loop</code> 以及 <code>mixin</code> 寫響應<br>來產生一系列的功能<br>有興趣的可以下載 boostrap 官方文件看看<br>也能更知道實際這些功能的應用何在   </p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>知道基本的功能在撰寫 CSS 時<br>可以更加簡潔！<br>Sass 還有 <code>loop</code> 以及 <code>if-else</code> 判斷式<br><code>loop</code> 在動畫上的搭配就可以更加靈活<br>我覺得可能要多看一些例子才知道怎麼應用在專案上 QQ<br>雖然官方寫得算清楚<br>但我看倒像是綠豆糕 QQ   </p>
<hr>
<p>參考資料 :<br><a href="https://sass-lang.com/documentation">Sass Documentation</a></p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>Sass</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 紀錄 ⟭ UnityWebgl 輸出問題</title>
    <url>/Unity/UnityWebGL-Output-Promblem/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很不容易終於把案子的遊戲做出來了<br>輸出 WebGL ，遇上不少問題  </p>
<span id="more"></span>
<p>在與對方對接時都是使用 Github Pages 來呈現<br>運行的很順利  </p>
<p>沒想到遇到對方外包的網頁公司 <code>伺服器</code> 就不行了 QQ<br>因為我也是第一次碰到這問題<br>網頁不是我的專長，這下我也不知道怎麼辦</p>
<p>這篇稍微紀錄一下問題跟解決方式  </p>
<blockquote>
<p>主要是 <code>MIME type</code> 的問題  </p>
</blockquote>
<h2 id="遇到問題"><a href="#遇到問題" class="headerlink" title="遇到問題"></a>遇到問題</h2><p><img data-src="https://chi01pap001files.storage.live.com/y4m8Z81Ua_QFAxCDEHu3CXVZNDlALhmbNSwT1XhMY0TSA9BscdtnomNnmQX5RP5WzdtaqXy5zYX0EiR8PJZJo03_Hk1LATCyDhLQ2vJkpbP4baeuDQB14elPoHRI061wVNDT9sZenz_5g-hWYGapBGfsv4Z60gWmUUXM_2oPLIcg1Bsij5JfL7Z5PpgMspsQO4F?width=660&height=180&cropmode=none">  </p>
<p>console 顯示的是這兩個問題  </p>
<ol>
<li>Invoking error handler due to<br> <strong><code>Uncaught SyntaxError: Unexpected token &#39;&lt;&#39;</code></strong></li>
</ol>
<ol start="2">
<li><strong><code>UnityModule is not defined</code></strong><br> at UnityLoader.loadCode.Module (UnityLoader.js:4)<br> at HTMLScriptElement.i.onload (UnityLoader.js:4)</li>
</ol>
<blockquote>
<p><strong>Uncaught SyntaxError: Unexpected token ‘&lt;’</strong><br>      根據 <a href="https://wcc723.github.io/development/2020/09/16/chrome-js-alert/">JavaScript 開發中常見錯誤解決辦法</a><br>      是指 <code>結構錯誤</code> 或者 <code>類型錯誤</code><br>      我想應該下面 not defined 問題造成的  </p>
</blockquote>
<blockquote>
<p><strong>UnityModule is not defined</strong><br>      可以知道 unity 相關檔案好像沒被定義到<br>      導致 Unity 內容無法被呈現出來<br>      所以語法上關於 Unity 是會報錯的   </p>
</blockquote>
<h2 id="剖析問題"><a href="#剖析問題" class="headerlink" title="剖析問題"></a><strong>剖析問題</strong></h2><p>這是目前有看到的<a href="https://answers.unity.com/questions/1397472/webgl-build-when-uploaded-gives-me-this-error-unca.html">解決方針</a><br>針對 Undefined 的問題  </p>
<h3 id="為何沒被定義"><a href="#為何沒被定義" class="headerlink" title="為何沒被定義"></a><strong>為何沒被定義</strong></h3><p>  仔細拜讀一下文章提及的 <strong>MIME TYPE</strong><br>  關於伺服器端沒有包含這類的 <code>媒體類別</code><br>  也就是在後端中傳送出來認不得這個媒體是什麼<br>  所以才會出現 <code>UnityModule is not defined</code><br>  檔案中 <strong><code>.unityweb</code></strong> 是無法被讀取內容  </p>
<blockquote>
<p>Github Pages 可以好好運行的原因<br>    <a href="https://docs.github.com/en/enterprise-server@2.22/pages/getting-started-with-github-pages/about-github-pages#mime-types-on-github-pages">官方有說 Pages 在這部分有支援 750 種</a><br>    因此普遍在開發上才不會特別有問題<br>    真的是太甘心了 QQ  </p>
</blockquote>
<h3 id="何謂-MIME-TYPE-媒體類別"><a href="#何謂-MIME-TYPE-媒體類別" class="headerlink" title="何謂 MIME TYPE (媒體類別)"></a>何謂 MIME TYPE (媒體類別)</h3><p>  常見的就是 <code>text/css</code> 或 <code>text/plain</code>  </p>
<p>  根據 <a href="https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Basics_of_HTTP/MIME_types">MDN 說明</a><br>  基本形式是長這個樣子  <code>type/subtype</code><br>  也可以加參數<br>  <code>type/subtype;parameter=value</code><br>  EX : <code>text/plain;charset=UTF-8</code>  </p>
<p>  很熟悉吧<br>  就是常常在 head 裡面寫的 <code>link</code> 或 <code>script</code> 格式<br>  有些特殊的媒體檔案一樣也可以透過這樣的方式加入  </p>
<h4 id="有哪些媒體類型"><a href="#有哪些媒體類型" class="headerlink" title="有哪些媒體類型?"></a>有哪些媒體類型?</h4><p>  這邊我還不是很清楚<br>  但好像有分很多種樣式<br>  總之有分 <code>標準</code> 與 <code>非標準</code><br>  非標準前面會有 <code>x-</code> 開頭<br>  區分的是 IANA 是否經過認證而定  </p>
<blockquote>
<p><a href="https://www.freeformatter.com/mime-types-list.html">很詳細的網站</a>  </p>
</blockquote>
<p>  透過搜尋就可以找到 <code>.unityweb</code><br>  接著就想辦法安插進去    </p>
<h2 id="解決問題"><a href="#解決問題" class="headerlink" title="解決問題"></a>解決問題</h2><p>  根據 <a href="https://answers.unity.com/questions/1397472/webgl-build-when-uploaded-gives-me-this-error-unca.html">解決方針</a>  </p>
<ol>
<li>開啟一個新 txt 檔  </li>
<li>把檔案另存成 <strong><code>web.config</code></strong>  </li>
<li>用 IDE 打開，貼上下面那串  </li>
<li>讓 <code>index.html</code> 更新一次  </li>
</ol>
<p>簡單來說，要讓專案初始化的時候知道 <code>.unityweb</code> 是誰就好了    </p>
<blockquote>
<p>得解 : 新增關於 Unity 的 <strong>MIME TYPE</strong></p>
</blockquote>
<pre><code class="XML"> &lt;configuration&gt;
      &lt;system.webServer&gt;
         &lt;staticContent&gt;
            &lt;mimeMap fileExtension=&quot;.unityweb&quot; mimeType =&quot;TYPE/SUBTYPE&quot; /&gt;
         &lt;/staticContent&gt;
      &lt;/system.webServer&gt; 
   &lt;/configuration&gt;
</code></pre>
<h3 id="了解其運作"><a href="#了解其運作" class="headerlink" title="了解其運作"></a>了解其運作</h3><h4 id="什麼是-web-config-檔？"><a href="#什麼是-web-config-檔？" class="headerlink" title="什麼是 web.config 檔？"></a><strong>什麼是 <code>web.config</code> 檔？</strong></h4><p>我以為是自訂義檔名，結果這個檔很特別哦 !  </p>
<p>根據 <a href="https://docs.microsoft.com/zh-tw/aspnet/core/host-and-deploy/iis/web-config?view=aspnetcore-5.0">MS 官方開發說明</a>   </p>
<ul>
<li>是 IIS 所讀取的檔案， <code>web.config</code> 以及用來設定以 iis 託管之應用程式的 ASP.NET Core 模組 。   </li>
</ul>
<p>這個檔案在建置 ASP.NET 的時候就會建置了<br>而且是每一層都會有<br>如果 <code>子層</code> 沒有，就會吃 <code>父層</code> 的<br>再沒有就 <code>祖父層</code> …</p>
<p>很好，跨謀 :D …<br>查了一下別人怎麼解釋  </p>
<p><code>web.config</code> 是對網站的設定檔，包含很多像是  </p>
<ul>
<li>設定 <code>application</code> 中的各種 settings (裝置)  </li>
<li><code>settings</code> 包含如何呈現網頁  </li>
<li>如何 <code>compile</code> 網頁程式  </li>
<li><code>session state</code> 的管理  </li>
<li><code>security</code> 的控管、…等等。</li>
</ul>
<p>我的理解是網頁一打開幫你設定端口、讀取型態之類<br><code>congfig</code> 就是對整體專案在初始化時的設定。   </p>
<p>在 <code>html檔</code> 最前面其實就有設定這些東西<br>我也不太清楚    </p>
<blockquote>
<p>直接來看，如何設定一個 MIME TYPE  </p>
</blockquote>
<ul>
<li><p><strong><code>mimeMap</code></strong> <a href="https://docs.microsoft.com/zh-tw/iis/configuration/system.webServer/staticcontent/mimemap">MS 官方文件</a></p>
<pre><code class="html">&lt;mimeMap fileExtension=&quot;.unityweb&quot; mimeType =&quot;TYPE/SUBTYPE&quot; /&gt;
</code></pre>
<ul>
<li><code>fileExtension</code> 寫檔案類型</li>
<li><code>mimeType</code> 這邊好像是因為 <code>.unityweb</code> 是標準寫法<br>  只要套個形式就可以吃到值<br>  應該可以寫 <code>application/vnd.unity</code>  </li>
</ul>
<blockquote>
<p>* 為什麼說應該，因為我無法測試，伺服器是客戶的<br>我並不知道結果與過程  </p>
</blockquote>
</li>
</ul>
<h4 id="關於-lt-system-webServer-gt"><a href="#關於-lt-system-webServer-gt" class="headerlink" title="關於 &lt;system.webServer&gt;"></a>關於 <strong>&lt;system.webServer&gt;</strong></h4><p><a href="https://www.cnblogs.com/xcsn/p/6939628.html">Web.config设置system.webServer</a><br>這篇提到一般在 web 上是不用特定去設定的<br>有時候會遇到一些需要複雜的情況需要去特別設定  </p>
<blockquote>
<p>需要修改 <code>system.webServer</code> 節的三個常見配置任務：</p>
<ol>
<li>添加默認檔，以便在請求 URL 未包含特定的檔時，提供該默認檔。  </li>
<li>註冊託管代碼模組。  </li>
<li>添加自訂回應標頭。 </li>
</ol>
</blockquote>
<p>本次的問題看起來比較偏  <del>1</del>。</p>
<p>本篇下面還有提到文件要加入 <strong><code>remove</code></strong><br>避免檔案 <strong><code>已存在</code></strong> 的情況下導致錯誤訊息<br>變這樣  </p>
<pre><code class="XML">&lt;remove fileExtension=&quot;.unityweb&quot; /&gt;  
  &lt;mimeMap fileExtension=&quot;.unityweb&quot; mimeType =&quot;TYPE/SUBTYPE&quot; /&gt;
</code></pre>
<h2 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h2><p>放在不同的伺服器好像有不同的寫法<br>看到 <code>Azure</code> 跟 <code>Aapche Server</code> 好像有點不太一樣<br>可能之後才能理解 QQ  </p>
<blockquote>
<p>參考<br><a href="https://forum.unity.com/threads/solved-unity-2020-webgl-doesnt-work-uncaught-syntaxerror-invalid-or-unexpected-token.872581/">[SOLVED] Unity 2020 WebGL Doesn’t work Uncaught SyntaxError: Invalid or unexpected token</a>  </p>
</blockquote>
<p>一方面好像跟 Unity 輸出時的檔案壓縮方式有關<br>官方在解說關於 <a href="http://docs.unity3d.com/2019.3/Documentation/Manual/webgl-deploying.html">輸出的部分</a> 非常詳細<br>也包含這次 IIS 組態的問題  </p>
<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>今天算急件<br>所以有不少細節忽略過去<br>要再找時間吸收一下了 QQ<br>怕下一個專案也有同問題<br>極速的做個紀錄 </p>
<p>將 config 弄好後，沒多久對方說 「沒問題了~」<br>我也看不到結果，對方說沒問題就 OK 了吧  </p>
<p>就在懵懵懂懂之間解決掉，我心想  </p>
<center>

<p><strong>「奇怪的知識又增加了」</strong>  </p>
<p><img data-src="https://chi01pap001files.storage.live.com/y4myqjbK3Roj7WjrEv-CzkHhAcpNzI46qzCFneGbIYW8EydJa7kmtireeyC3ojmny-WWeh3T9f71khS4CDv15xeGvn7aZbKcq_-hznr8KZbFlmDi433AFKO4jB4hHeD1r27bKNSEtsqXyh9Tn9m4WYkkMxLN0EGWallC22EW4DCRK4RwRt6H9Fl1QKTBfWg1Zxp?width=584&height=421&cropmode=none">  </p>
</center>  

<blockquote>
<p>參考資料 :  </p>
</blockquote>
<ol>
<li><a href="https://zh.wikipedia.org/wiki/HTTP%E5%A4%B4%E5%AD%97%E6%AE%B5">維基百科_Http表頭</a>  </li>
<li><a href="http://docs.unity3d.com/2019.3/Documentation/Manual/webgl-deploying.html">WebGL: Deploying compressed builds</a>  </li>
<li><a href="https://blog.xuite.net/ghel0915/nblog/21685755">ASP.NET不可或缺的組態檔→Web.config</a>  </li>
<li><a href="https://answers.unity.com/questions/1397472/webgl-build-when-uploaded-gives-me-this-error-unca.html">WebGL build error :Uncaught SyntaxError: Unexpected token &lt; || UnityLoader.js is not a function (SOLVED)</a>  </li>
<li><a href="https://www.cnblogs.com/xcsn/p/6939628.html">Web.config设置system.webServer</a>  </li>
<li><a href="https://stackoverflow.com/questions/3828352/what-is-a-mime-type">很不錯的解釋文_What is a MIME type?</a>  </li>
</ol>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 紀錄 ⟭ JavaScript - Twitch API 實戰</title>
    <url>/Frontend/JavaScript/JavaScript_API_twitch/</url>
    <content><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>紀錄串接 API 的過程以及想法<br>事不宜遲，直接上手吧 !  </p>
<h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><h3 id="事前預備"><a href="#事前預備" class="headerlink" title="事前預備"></a>事前預備</h3><ol>
<li>創建帳號進入 twitch dev<br> <a href="https://dev.twitch.tv/">Home | Twitch Developers</a></li>
<li>建立 app<br> <img data-src="https://dsm01pap006files.storage.live.com/y4mh-F93GYryYifP-KaHhsLHMLdlRFmH8aH0JC7-ViFhkXZ5hSaibFN5NpsXMprq0qqLd3X4czumdP1D_dKDvbv0iFjtMYWWZl9eMO0DiXLs5wRAU5e7hJUIx6Xnmc0p5DIOWbB31h37gq-deaq9Dx8edWnlXXdJhLmSyCq-x6YqkUiWEg2sngSnn3iCMw3gj5r?width=660&height=379&cropmode=none"><br> 填上 app 名稱以及 app 應用地方  </li>
</ol>
<ul>
<li><code>OAuth</code> 開發階段可設為本機<br>  <img data-src="https://dsm01pap006files.storage.live.com/y4mt-abtC6iaRNJOcL06xmknc_DuRdRzrfQP2uyGOYGjVMCT5wTWo3kaaohr9CSO-oX8ttudhoCYPVByDWhMDc8dHS_PZD4hYBs2CD7OH4V0y5oVSc5oSNMdiSsLbkZQEoNIcc-GR-LNEFZvcA_5KGnrrt-CIBYGsk5X5RbIou1jXLAeUUlSx6rXFsnr5ifXMBd?width=660&height=637&cropmode=none"><br>  設定完按儲存    </li>
</ul>
<h3 id="認證"><a href="#認證" class="headerlink" title="認證"></a>認證</h3><p>API 文件 : <a href="https://dev.twitch.tv/docs/api">Twitch API | Twitch Developers</a><br>Step 1 已經做完了所以直接跳 Step 2  </p>
<ol>
<li>透過 twitch cli 認證 app  <ul>
<li>下載 cli 之前，先看自己的電腦系統<br>  因為我是 window 所以用 <a href="https://scoop.sh/">Scoop</a>  <pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">iwr</span> <span class="token operator">-</span>useb get<span class="token punctuation">.</span>scoop<span class="token punctuation">.</span>sh <span class="token punctuation">|</span> <span class="token function">iex</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
再透過 Scoop 下載 twitch cli<br>→  <a href="https://github.com/twitchdev/twitch-cli#scoop">官方操作</a></li>
</ul>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">scoop bucket <span class="token function">add</span> twitch https://github.com/twitchdev/scoop-bucket.git
scoop <span class="token function">install</span> twitch-cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ol>
<ul>
<li>再來拿取 <strong>app-token</strong> 認證<br>  以防自己 cli 沒裝成功<br>  可以用 <strong>twitch version</strong> 來確認一下          <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">twitch token<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  如果是第一次拿取 token<br>  會要求 <code>client-id</code> 跟 <code>client-secret</code><br>  <img data-src="https://dsm01pap006files.storage.live.com/y4mG2G8j3XoHH9PQKBsVEt5iN7jDGaTfj4edFSEWc_5e3SGLo-eeXErIS_YuC8KAMtJp7d6sJa_kWfn6pTP08n5BnHC60oUFk2DC1V87ozkdR9uI-Fr60OnFBfgXIfJPZpm9D75EyIIz1L8aikwhZ0GT_AMWASyBv5q819n69I53hmp9ekGl3L2C4g0VyIckD4S?width=660&height=121&cropmode=none"><br>  來源是這裡<br>  <img data-src="https://dsm01pap006files.storage.live.com/y4mdi7Nh5dMfPQ5xzSVtxSdnByfMY4LZWnKeCPaCfw-h2GWDXkXiq5bviTNls30NA8ACNG0Zq1NDiNEmeP9hwTLueF-GZtj13QR0eLFHiovrg6mXTjaapiuXFN9OGw0kcqywuRIlUr1UrgveD-uJYIryaNqV83W3toFb157Hko6Hhry98S5ucLULH5XcA2gOpkV?width=660&height=657&cropmode=none"><br>  輸入進去就會獲得一組 token<br>  先複製起來，待會會用到 !  </li>
</ul>
<blockquote>
<p>twitch token 出現錯誤怎辦 ?<br><code>responded with an error while generating token</code><br><strong>莫驚莫慌莫害怕</strong><br>透過 <code>twitch configure</code><br>刷新設定再索取一次<br><img data-src="https://dsm01pap006files.storage.live.com/y4m5G8UcXoxPKOlkwNHqQT_XMLTpCR-o0mZ-MukKd3rYsfZIlReY4a4r0spvs413G12ssJf-JcSZLBdDxs1m4WL5m9K6uIhj6Tyf1-iLOSi1QcHl25_27HYeUav6X_yU0uWUx9Rmbp6jGFUTIcpb5PhCNHQBMn1gRvHWabo9pZsm5XqZ80ufADj_rexSeDSxtjh?width=660&height=145&cropmode=none">   </p>
</blockquote>
<p>官方有提到認證時效性的問題<br>過 60 天會失效<br>過期之後再重新設定一次 ~  </p>
<h3 id="拿資料"><a href="#拿資料" class="headerlink" title="拿資料"></a>拿資料</h3><p>使用資料前先有辦法<strong>拿到資料</strong><br>所以必須了解 twitch api 的規則<br>→ <a href="https://dev.twitch.tv/docs/api/guide">Guide | Twitch Developers</a><br>→ <a href="https://dev.twitch.tv/docs/api/reference#get-streams">Reference | Twitch Developers</a>    </p>
<p>規則 :   </p>
<ol>
<li>要加入請求 2 個標頭  <ul>
<li><strong>client-id</strong>  </li>
<li><strong>Authorization</strong>  </li>
</ul>
</li>
<li>傳參數用 <code>&amp;</code> 串<br> 像這樣<br> <code>&amp;login=twitch&amp;login=twitchgaming</code>  </li>
</ol>
<p>接著來串目前正在串流的遊戲 LOL<br>動手之前先想好如何架構    </p>
<h4 id="個人想法與流程"><a href="#個人想法與流程" class="headerlink" title="個人想法與流程"></a>個人想法與流程</h4><p>透過 game_name 來知道 game_id<br>再找 streams  </p>
<ol>
<li>拿到 Game id (data1)  </li>
<li>拿到 data1.id<br> 找正在串流資料符合的遊戲之 data2  </li>
<li>data2 中要用到的  <ul>
<li>user_id  </li>
<li>live_titile   </li>
<li>thumbnail_img_url  </li>
</ul>
</li>
<li>拿到 符合 data2.user_id 的 data3  </li>
<li>data3 中  <ul>
<li>找 data3_user_id 和 data2_user_id 一樣的  <ul>
<li>data3_user_name  </li>
<li>data3_user_profile_img_url  </li>
</ul>
</li>
</ul>
</li>
<li>把資料展現在畫面<br> data中的 3-2,3-3，5-1-1,5-1-2<br> 最後出現在畫面上  </li>
</ol>
<h3 id="javascript-實際操作"><a href="#javascript-實際操作" class="headerlink" title="javascript 實際操作"></a>javascript 實際操作</h3><p>官方文件有範例知道取的資料格式<br>→ <a href="https://dev.twitch.tv/docs/api/reference#get-streams">Reference-streams | Twitch Developers</a>  </p>
<p>使用 HTTP method 的 <code>GET</code> 來取得我們想要的資料    </p>
<p>看一下 reference 可以查到什麼<br>query string 的參數有 <code>game</code><br>要的遊戲名稱是 <code>League of Legends</code><br>網址會轉成 <code>League%20of%20Legends</code>  </p>
<p>因此在找的時候 api 的 url 是<br><code>https://api.twitch.tv/helix/streams?game=League%20of%20Legends</code>  </p>
<p>直接輸入在網址會沒有回應<br>是因為 CORS 的問題<br>要加上 <code>標頭</code><br>並且透過 ajax 來存取  </p>
<h4 id="前置設定"><a href="#前置設定" class="headerlink" title="前置設定"></a>前置設定</h4><p>把 id 跟 Authorization 設定成變數<br>jquery 的 ajax 為<code>$.ajax(&quot;網址&quot;,設定)</code><br>把設定內容寫在一起  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> clientID <span class="token operator">=</span> <span class="token string">"i9vpv94xpthipcxeo902aunlhw9940"</span>
<span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token string">"Bearer 1wcbnczsqjzp3675p5dngbxq19hh5d"</span>
<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">"https://api.twitch.tv/helix/"</span>

<span class="token keyword">const</span> XhrSetting <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
 method<span class="token operator">:</span><span class="token string">"GET"</span><span class="token punctuation">,</span>
 <span class="token function-variable function">beforeSend</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">xhr</span><span class="token punctuation">)</span>
 <span class="token punctuation">&#123;</span>
 	xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Client-ID'</span><span class="token punctuation">,</span> clientID<span class="token punctuation">)</span><span class="token punctuation">;</span>
	xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Authorization'</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>setRequestHeader</code> : 用來設定 HTTP 的表頭請求，<code>XMLHttpRequest</code> 物件中的方法。   </li>
</ul>
<p>參考 :<br><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/XMLHttpRequest/setRequestHeader">XMLHttpRequest.setRequestHeader() - Web APIs | MDN (mozilla.org)</a></p>
<h4 id="函式"><a href="#函式" class="headerlink" title="函式"></a>函式</h4><p>根據上面的架構先存取遊戲 id<br>以下都是使用 jquery    </p>
<ul>
<li>GetGames</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">GetGames</span><span class="token punctuation">(</span><span class="token parameter">gamename<span class="token punctuation">,</span>callback</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
 	$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">"games/?name="</span><span class="token operator">+</span>gamename<span class="token punctuation">,</span>XhrSetting<span class="token punctuation">)</span>
 	<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
 	<span class="token function">callback</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>為什麼用 callback function ?<br>callback function 是可以把 B 函式<br>作為 A 函式的參數  </p>
<p>這樣可以拿 GetGame 拿到的 response裡的 id 再去拿下一個資料  </p>
</blockquote>
<p>再來就是取得串流資料    </p>
<ul>
<li><p>GetStreams</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">GetStreams</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
 $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">streams/?game_id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>data<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;first=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>limit<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>language<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>XhrSetting<span class="token punctuation">)</span>
 <span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">streams</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	 <span class="token comment">/*
	 	拿 userId 取頭貼
		以及顯示在 html 
	 */</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>GetUser : 串流的 userId 再去得個別資訊  </p>
</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span>callback</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
 $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">"users?id="</span><span class="token operator">+</span>data<span class="token punctuation">,</span>XhrSetting<span class="token punctuation">)</span>
 <span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
 <span class="token function">callback</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>這裡的 response 是要顯示在 html 資訊的<br>所以這邊的函式是 <code>渲染畫面</code>  </p>
</blockquote>
<ul>
<li><p>GetColumn : 顯示  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">GetColumn</span><span class="token punctuation">(</span><span class="token parameter">stream<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
 <span class="token keyword">const</span> userProfileImg <span class="token operator">=</span> data<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>profile_image_url<span class="token punctuation">;</span>
 <span class="token keyword">const</span> stremsThumbnail <span class="token operator">=</span> stream<span class="token punctuation">.</span>thumbnail_url<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-&#123;width&#125;x&#123;height&#125;"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>
 <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
 &lt;div class="card">
	 &lt;div class="card_video">
	 &lt;img src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>stremsThumbnail<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">" alt="">
	 &lt;/div>
	 &lt;div class="card_profile">
		 &lt;div class="card_profile_img">
		 &lt;img src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>userProfileImg<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">" alt="">
		 &lt;/div>
		 &lt;div class="card_profile_content">
			 &lt;div class="card_profile_content_title"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>stream<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>
			 &lt;div class="card_profile_content_name"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>stream<span class="token punctuation">.</span>user_name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>
		 &lt;/div>
	 &lt;/div>
 &lt;/div>
 </span><span class="token template-punctuation string">`</span></span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>利用<code>‵‵</code> 包裹字串是 ES6 的語法<br>  可以塞多行文字，其帶入值用 <code>$&#123;value&#125;</code>    </p>
</li>
</ul>
<p>接著合補完 <code>GetGames</code>  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">GetStreams</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

 $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">streams/?game_id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>data<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;first=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>limit<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>language<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>XhrSetting<span class="token punctuation">)</span>
 <span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">streams</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	 streams<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">stream</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
		<span class="token function">GetUser</span><span class="token punctuation">(</span>stream<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			 <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">===</span> stream<span class="token punctuation">.</span>user_id<span class="token punctuation">)</span>
				 <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.row'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span> <span class="token function">GetColumn</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
		 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最後在補上  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> limit <span class="token operator">=</span> <span class="token number">20</span> <span class="token comment">// 資料數量</span>
<span class="token keyword">const</span> language <span class="token operator">=</span> <span class="token string">"&amp;language=zh"</span> <span class="token comment">//語言系</span>
<span class="token keyword">const</span> gameName <span class="token operator">=</span> <span class="token string">"League%20of%20Legends"</span>
<span class="token function">GetGames</span><span class="token punctuation">(</span>gameName<span class="token punctuation">,</span>GetStreams<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>結果 :<br><img data-src="https://dsm01pap006files.storage.live.com/y4mzBThzpbO12L6GrjUQzYhQb-bPJf086nDiPhzZnbGQHRhXmro10FMYN4kHIfrwUCxHuwNb8L7ZqW8_1xhj5Uw7k7KLJG7TqHWnrginQRlFeMxpjarZfQgYkzfEqjEKHdyz7oYhvsftONoZ4e-e9sYzZL-E7-E02dOG6GfGV-HBOCrvsfYGTTIRlW6I-Xo9Wdx?width=1024&height=593&cropmode=none">    </li>
</ul>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>透過實戰一次串接<br>就比較知道 API 內容在做什麼<br>從中也認識 RESTful API 的意義<br>還有 HTTP Method、StatusCode  </p>
<p>實作時覺得結構上可以再更精簡<br>有些重複性的東西盡可能省略    </p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 紀錄 ⟭ HEXO 一起來做部落格(I)</title>
    <url>/Blog/Hexo-BuildBloger-I/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每次在學習新的概念，都會忘記零碎的步驟<br>想說還是來架個網頁來記錄好了  </p>
<p>雖然我自己有在Notion 紀錄前端、動畫以及Unity等等的學習文<br>但很常忘記更新，很多都東西做完文章卻寫到一半<br>不得不說寫文章還蠻…累人的，很常想寫成「大家覺得很棒的文」  </p>
<p>這樣不行!寫文章成了有點痛苦的事，寫的時間也加倍，就變教材了<br>於是辦了一個專頁「經營」，像跟大家紀錄分享心得這樣<br>當然，滑FB我可是不會錯過的，經營也會讓大家像在監督一樣，就決定做了!  </p>
<p>另外也是受到 <a href="https://hulitw.medium.com/blog-e7a23a74ae2b"><strong>Huli 大大的文章</strong></a>啟發，才下定決心認真做  </p>
<blockquote>
<p>對阿，寫文章即使是廢文也沒關係，我的文章又沒有多少人會看，自己看得懂就好  </p>
</blockquote>
<p>在那之前有想過用 Blogspot 、Notion、HackMD…等等的<br>但想想自己想成為一個 Junior Web Developer<br>就還是想自己打指令來架XD  </p>
<p>很常看技術文的時候<br>一直看到同個版面的主題，一度讓我以為是X角學院的架網站作業<br>結果是Hexo，查一查才知道這東西有多好用<br>啊~沒錯就是那個 NEXT 主題，很好看，我也很想架一個<br>說來就來吧!  </p>
<h2 id="環境建置"><a href="#環境建置" class="headerlink" title="環境建置"></a>環境建置</h2><p>我是使用 <code>Window 10 + Visual Studio Code</code> 來建置哦!<br>簡單來說是 使用 <code>git + Hexo</code> 來架架構<br>最後使用 <code>github pages</code> 來做網站發布的地方  </p>
<blockquote>
<p><a href="https://hexo.io/zh-tw/">官方 Hexo 安裝文件</a></p>
</blockquote>
<ol>
<li>需要下載 node.js 因為Hexo 是基於Node.js 的網誌框架<br>版本選LTS 長期維護的版本就可以了，除非有要用到很新的功能  <ul>
<li><a href="https://nodejs.org/en/">Node.js</a></li>
</ul>
</li>
<li>下載git，拿來做專案上的版本控制，至於git嘛…還在學<ul>
<li><a href="https://git-scm.com/downloads">Downloads</a>  </li>
</ul>
</li>
</ol>
<p>原本我先創建好資料夾在Visual Studio開始步驟<br>確認npm、node 版本  </p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">npm <span class="token operator">-</span>v
node <span class="token operator">-</span>v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>v 是<code>version</code>  </li>
</ul>
<p>官方有說建議使用 Node.js 10.0 及以上版本  </p>
<blockquote>
<p>安裝Hexo</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">npm install hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>挖咧，第一個安裝就遇到問題<br><img data-src="https://chi01pap001files.storage.live.com/y4mCxHVbujSFcMehB-U5KPzs--xmlmuYVVZe2pMyTZSft1rncg9MkzMxxEosNX3BuTX2KnWZ9fs3KOT_aS8Gv8d92vR79PvIFdkSQIq8LBBvUSFulofH9OmU8rtEPfEenW5qP1eVPwXf3ij67XR3qSEkl85Kn-iTyrBbx1vCJrrxlcvGY9P-nEUuOQjzGriSrSA?width=660&height=139&cropmode=none"><br>爬了一小時的文也無解阿…<br>網路上都說 WARN 是沒關係的<br>參考<a href="https://github.com/hexojs/hexo/issues?q=npm+WARN+optional+SKIPPING+OPTIONAL+DEPENDENCY:+fsevents@~2.3.2">官方issue</a>這邊的三篇文還是無解<br>像是 <code>fsevents</code> 是 Mac使用上要注意的點，Window可以忽略<br>到這步是已經完成安裝了才對，像是輸入 <code>hexo -v</code> 應該能看到hexo的版本<br>但當我查詢 Hexo 的版本來確定是否安裝了<br>結果還是悲劇QQ  </p>
<p>於是我決定重新安裝node.js，按照巴哈這篇的指示去做<br><a href="https://home.gamer.com.tw/creationDetail.php?sn=4849277">【教學】10分鐘內從安裝Hexo到佈署至GitHub Pages - 巴哈姆特</a><br>唉呦!蠻成功的哦 ! 不過過程還是有一些奇怪的錯誤QQ<br>以下是我的紀錄  </p>
<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>安裝完環境後在想要建立檔案夾的地方案右鍵<br>按 Git Bash here ，要開始長專案的地方了<br>接著會打開cmd  </p>
<p><img data-src="https://chi01pap001files.storage.live.com/y4mIK9wCuNQwZ0zJMHkou9hRVyXWh28JoKBA-1bZ6FcLDaKkUPDeGBpyQdYuH7VsvRi8nhD8WVovBSyTOKR2vGocFQviA6ShMudM1SNTyUeWmn4tvzaCQrqA_9XZkZU6RyLDkXxW-xtFuoacHlZydEqGzsdwsosj-3VDki_KfPysUZuSuBYT5f7KiXGRzy4LccO?width=380&height=477&cropmode=none">  </p>
<ol>
<li>輸入 <code>npm install hexo-cli -g</code> 安裝hexo</li>
<li><code>hexo init **自訂義資料夾名稱**</code> hexo建置的設定</li>
<li><code>cd **資料夾名稱**</code> 移到剛剛指定的資料夾，記得cd前是在資料夾外部，要設定的東西要移到裡面哦!  </li>
<li><code>npm install</code> npm檔案建立</li>
<li><code>hexo g</code> 建立網頁，這是 <code>hexo generate</code> 的縮寫，大致來說就是收集/重構</li>
</ol>
<p><img data-src="https://chi01pap001files.storage.live.com/y4m7NCCI1fphAc3k5NKaTmP41Iby0YB-h5Cbn-SwSnTImTZZTJAXyCTjmzq_CzVAaFfJLche0TAe2N1b2iDmjbLYdY5oNFGpThho_rkUOhEv6klUo9MtSGnbbFRuvSN4SM8lCcFRK8VgKkLtWDq5ZRCsl80U_tA2pgHfnSP2rcbFDcrqLekv2DOaaWDWdWX_IxP?width=256&height=143&cropmode=none"><br>有一個大大的NEXT 可以忽略，因為我已經偷去安裝NEXT主題XD<br>一開始沒有是正常的哦!  </p>
<ol start="6">
<li><code>hexo s</code> 建立伺服器，這是  <code>hexo server</code> 的縮寫，會開啟本機伺服器來測試哦!</li>
</ol>
<p><img data-src="https://chi01pap001files.storage.live.com/y4mycn74k2IMLb1w2uZqoidTS7ipFDmgX_9nGZ-2GL_7L8jfiX0em-cxLBDOu8YCbDrJVCfYn8Xjk6tHvjv8RV8QM09oQx1kStTjZaxi8lcVmolKGkM-pIN5TcDc3g1oNKLsFuH282XlaWq2rx7xlnBL7Esif-E6eXPZOmDoFXzRslmIlhzdmFzNUJtN_jjV2po?width=256&height=126&cropmode=none"></p>
<p>之後它會寫出 <a href="http://localhost:4000/">localhost:4000</a><br>在網址中輸入<code>localhost:4000</code>就可以看到原始設定好的網站<br>哈哈我設定的太多看不出來原本的，之後還會設定相關的布局。<br>最簡單的長出網站就完成了<br><img data-src="https://chi01pap001files.storage.live.com/y4mCBYZSy_5x5ydLOC4xpxPk09WVHkKiY1buv_Qa5pOl3SoFu0g_9VBg6nQ3gc-q53DUu1dE6sSWMz71miCQZX1u0W7M-YoSTICiWD4HEkJvAEcdPq37uv-XwmdrZQz059IYZgPocbyyWRz_JEDLe_qHI9_WcB2M6HDAAZXsOot7S1trnAuWdche5gN_C9DNs5n?width=660&height=425&cropmode=none"><br>最後是要發布在github pages 上，這等下一篇在來說明吧!  </p>
<h2 id="遇到技術排解ing"><a href="#遇到技術排解ing" class="headerlink" title="遇到技術排解ing"></a>遇到技術排解ing</h2><p>中途還是有遇到一些問題，雖然在 git 的cmd裡沒問題<br>但在Visual Studio 中的 powershell 輸入指令卻不能用😵<br>明明安裝hexo成功了卻不能在VS編輯使用指令….  </p>
<p><img data-src="https://chi01pap001files.storage.live.com/y4mtLrJFmWIviARn_idGlEGScnJlDZW4X9uIenTO3iDKoj9MRUcB73XwcF8mDojM8sQ6Pa-FltKSD9VC7mQM__GWt1acgomR4armP7ink0UX67mCelMg4t79T8z2KRrcyjEneSwGENJ6w87c7CuV5wOkip17Ou_4MLn7XElvmHtpdva7bN1_08VbsMA0WOTrzBV?width=660&height=115&cropmode=none"></p>
<p>原因是Window 因安全性的問題，而開啟的一個機制<br>又稱「限制原則」，要打開的話就需要開啟權限來設定  </p>
<p>這邊的解決方法 : <code>Set-ExecutionPolicy</code> 更細節的設定資訊可以看參考資料  </p>
<p><img data-src="https://chi01pap001files.storage.live.com/y4m0d30xMqYQ4AGiWx9HRjiCsP3xrKm11lqIZVUC5RgItMt77XCL6eldhygSUot7xrbCC0vLc6cMvQU2qtW2FKUHQ8eFajj_Hg3goYS5BUVrJE1R1v9d-UDbCRV-OZobhz5LNUdA83Yz918yvHotQf4gJgOnZalgXgxfxUEaoigtBMoUOErj92GWozOti0UpPS7?width=1024&height=439&cropmode=none">  </p>
<p>啊…結果權限不夠QQ，因此要用<strong>「系統管理員」</strong>執行哦!<br>不過紅字第三行有提到，請執行<code>Set-ExecutionPolicy -Scope CurrentUser</code>  </p>
<blockquote>
<p>我的理解是<br>如果妳現在登入的使用者是系統管理員的話可以直接使用<br>基本上我的電腦就是了，不需要再特定開  </p>
</blockquote>
<p><img data-src="https://chi01pap001files.storage.live.com/y4mmJ2BZ3aT_LKsge3e5oES5mrHnK_IBEo2o6a7w7lfGGBwmgHWev35sXk7fMuSqvgnQO5F72YihlbeMVTIAuCEX6z6IjCMSO44FW1OGofu2i5wvRPKzNW6eDnVdAYolnEzxtX6I0o-ikpECKfS2LthdXvFg_R5DU6AnzP1GRztpausnBPEegbI6BGqWDhrdc4I?width=660&height=93&cropmode=none"></p>
<p>如果再不行就到 <code>開始 &gt; 搜尋 &gt; powershell</code><br>對著應用程式按右鍵使用系統管理員執行    </p>
<p><img data-src="https://chi01pap001files.storage.live.com/y4m-q_Dw7jek9H56ojCPVFlInrzSXG4PNNYgYeHS67nnvUAXn7ehSdBeI0eJmY-ZqlxtVTKkKqWKbGbfyTHJ4yvs-D8r5MJzLeEVsqbIkjYIJXh4AcS6inKRaJR5KOWa1ujEtUOMkLXN2MiQ4CTjVUgE3M3Y3pMMny-qgKkLWm62_Fu3YG_ju2QGOGSOdE9gbJO?width=256&height=103&cropmode=none"></p>
<p>它會請求輸入值，輸入 <strong><code>RemoteSigned</code></strong><br>意思是  </p>
<blockquote>
<p>同意本機撰寫的腳本檔案，不需要簽署就可以執行<br>npm install 遠端下載的其它東西經過可信任的發行者簽署後才可以執行。  </p>
</blockquote>
<ul>
<li> <a href="https://hsiangfeng.github.io/other/20200510/1067127387/">Window安全性 解決的辦法參考資料</a></li>
</ul>
<p>燈愣!<br>沒想到成功了，可以在VS裡盡情的打了<br>我想我開啟的方式可能有些錯誤啦…<br>繞了不少路，這次就當教訓吧  </p>
<p>明天就架完成吧!<br>這篇寫得有點急有點亂，會在進行統整在新的部落格中哦!</p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>部落格</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 筆記 ⟭ CSS 預處理器 Sass 介紹&amp;安裝</title>
    <url>/Frontend/CSS/CSS-Sass-01/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CSS 寫到一個程度後<br>有點難以去維修<br>大量的大括號以及分號<br>使得架構越來越龐大<br>在我苦惱 CSS 跟我一樣肥的時候<br>剛好認識了 <strong>CSS 預處理器</strong>  </p>
<span id="more"></span>
<p>簡單來說的話就是可以 <strong>用程式的方式</strong> 來寫 CSS<br>於是來紀錄關於學習 Sass 的事<br>根據 <a href="https://lidemy.com/p/fe201">[FE201] 前端中階：那些前端會用到的工具們</a> 學習的雜記   </p>
<hr>
<h2 id="CSS-預處理器"><a href="#CSS-預處理器" class="headerlink" title="CSS 預處理器"></a>CSS 預處理器</h2><p>學習新工具時了解工具的誕生<br>更能知道使用時機   </p>
<h3 id="預處理器的誕生"><a href="#預處理器的誕生" class="headerlink" title="預處理器的誕生"></a>預處理器的誕生</h3><p>現在網站的樣式越來越華麗<br>CSS 越寫越龐大<br>甚至會有重複寫的情形<br>導致在 debug 上變得不易<br>於是出現各種 CSS 預處理器<br>像是 <code>Sass</code> 、 <code>LESS</code> 、 <code>Stylus</code>  </p>
<p>是使用程式的邏輯在寫樣式<br>簡單來說更快速<br>畢竟沒人想要重複罰寫吧 QQ<br>當然不同的預處理器各有自己的優點<br>但如果學會一套<br>基本上都可以無痛跳轉別的<br>只差在一些符號上的差異  </p>
<h3 id="預處理器的處理方式"><a href="#預處理器的處理方式" class="headerlink" title="預處理器的處理方式"></a>預處理器的處理方式</h3><p>我們知道瀏覽器只看得懂三個東西</p>
<ol>
<li>HTML</li>
<li>CSS</li>
<li>Javascript  </li>
</ol>
<p>蛤！你說這樣我寫 Sass 有什麼用嗎？</p>
<p>NO NO , 所以寫完 <code>Sass</code> 後<br>還要經過 Compiler ( 編譯器 ) 成 CSS 檔<br>瀏覽器才知道這個樣式長圓的還扁的<br>大概是這樣子<br><img data-src="https://i.imgur.com/E9vfSTE.png" alt="CSS 變身過程"></p>
<h3 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h3><blockquote>
<p>預處理器提供程式化的方法來寫 CSS<br>使 CSS 更有結構的來管理 </p>
</blockquote>
<h2 id="Sass-、-Scss-傻傻搞不清楚"><a href="#Sass-、-Scss-傻傻搞不清楚" class="headerlink" title="Sass 、 Scss 傻傻搞不清楚"></a>Sass 、 Scss 傻傻搞不清楚</h2><p><a href="https://sass-lang.com/">Sass</a> 是蠻多人在用的一款 CSS 預處理器<br>但在講 Sass 之前<br>可能還聽過 Scss<br>而且通常會一起講<br>所以 Scss 跟 Sass 是什麼關係？</p>
<h3 id="Sass-v-s-Scss"><a href="#Sass-v-s-Scss" class="headerlink" title="Sass v.s Scss"></a>Sass v.s Scss</h3><p>在 <a href="https://sass-lang.com/guide">官方的文件</a> 中<br>可以看到 Sass 跟 Scss 是差不多的<br><code>Sass</code> 比 <code>Scss</code> 少了 <strong>大括號</strong> 跟 <strong>分號</strong><br>相容性上 Scss 可以無痛跨 CSS<br>檔名 <code>.scss</code> 改成 <code>.css</code> 沒什麼太大問題<br>因為結構相同<br>Sass 直接轉換成 css 就打妹了  </p>
<p>讓我想起大學時期學網頁為什麼不先學 Sass<br>而是用 Scss 的原因了<br>不然初學者的成就感就會被磨光光 XD  </p>
<h2 id="Sass-基本指令"><a href="#Sass-基本指令" class="headerlink" title="Sass 基本指令"></a>Sass 基本指令</h2><h3 id="安裝-Sass"><a href="#安裝-Sass" class="headerlink" title="安裝 Sass"></a>安裝 Sass</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">npm install <span class="token operator">-</span>g sass 
sass <span class="token operator">--</span>version <span class="token operator">/</span><span class="token operator">/</span> 查看版本是否有安裝成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>看到版本之後就對了！<br>在使用 Sass 的 cli 就好  </p>
<h3 id="把-Sass-檔轉換成-CSS-檔"><a href="#把-Sass-檔轉換成-CSS-檔" class="headerlink" title="把 Sass 檔轉換成 CSS 檔"></a>把 Sass 檔轉換成 CSS 檔</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">sass <span class="token namespace">[input]</span><span class="token punctuation">.</span>sass <span class="token namespace">[output]</span><span class="token punctuation">.</span>css<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li><code>input.sass</code> 是指要轉換的 sass 檔</li>
<li><code>output.css</code> 是轉換出來的 css 檔</li>
</ul>
<blockquote>
<p>也可以加上 <code>--watch</code> 隨時監聽檔案變化  </p>
</blockquote>
<p>Like this ！</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">sass <span class="token operator">--</span>watch <span class="token namespace">[input]</span><span class="token punctuation">.</span>sass <span class="token namespace">[output]</span><span class="token punctuation">.</span>css<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>按下 save 後 ，檔案會自動轉換<br><img data-src="https://i.imgur.com/Yc6zMa4.png" alt="有點像自動儲存再轉換"></p>
<h3 id="最小化-minify-檔案"><a href="#最小化-minify-檔案" class="headerlink" title="最小化 (minify) 檔案"></a>最小化 (minify) 檔案</h3><p>最小化是讓檔案的體積更小<br>會將不必要的空白刪除<br>只留下精華 :D  </p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">sass <span class="token operator">--</span>style compressed <span class="token namespace">[input]</span><span class="token punctuation">.</span>sass <span class="token namespace">[output]</span><span class="token punctuation">.</span>css<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>會發現檔案都被壓縮成一排  </p>
<h3 id="小結-1"><a href="#小結-1" class="headerlink" title="小結"></a>小結</h3><p>指令複習一遍</p>
<ol>
<li><code>npm install -g sass</code> : 安裝</li>
<li><code>sass --watch [input].sass [output].css</code> : 轉換</li>
<li><code>sass --style compressed [input].sass [output].css</code> : 壓縮</li>
</ol>
<p>sass 跟 scss 一樣<br>所以以此類推把 sass 的部分換成 scss 就可以了  </p>
<h2 id="Sass-做了什麼"><a href="#Sass-做了什麼" class="headerlink" title="Sass 做了什麼 ?"></a>Sass 做了什麼 ?</h2><p>我們知道預處理器的作用<br>會發現把 <code>.sass</code> 轉換成 <code>.css</code> 時<br>還會出現一個叫 <code>.map</code> 的檔案<br>就是 source map </p>
<h3 id="什麼是-source-map-？"><a href="#什麼是-source-map-？" class="headerlink" title="什麼是 source map ？"></a>什麼是 source map ？</h3><p><code>source map</code> 就是儲存了原始碼與編譯後程式碼 <strong>對應關係之檔案</strong><br>一般 devtool 會用來除錯用  </p>
<blockquote>
<p>Wait！ Wait！ What？</p>
</blockquote>
<p>阿不是說瀏覽器只能看得懂一般的 CSS？<br>那你有想過萬一你是 <code>sass</code> 樣式想改<br>不會是要一行行回推到 CSS 吧！  </p>
<p>所以這時候就得靠 <code>source map</code><br>簡單來說需要透過 map 去引導檔案 sass 的行數<br>在 devtool 上就可以除錯<br>哇嗚這我還真不知道…<br>那我想如果其他 library 也是出現map<br>也是為了導向原始的編輯檔去<br>蠻聰明的    </p>
<p>另一個小知識就是 : </p>
<blockquote>
<p>source map 不會影響網站載入速度與一般使用者的體驗</p>
</blockquote>
<p>不過這部分因為暫時不會涉及到很深<br>所以我沒有研究<br>有興趣的人可以到下面這篇文章  </p>
<ul>
<li>關於 <code>sourceMap</code> 的文章 :<br><a href="https://blog.techbridge.cc/2021/03/28/how-source-map-works/#post-comment-wrapper">Source map 運作原理 (techbridge.cc)</a></li>
</ul>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>sass 的優點還有實戰使用還沒提及<br>將在下一篇文章說明<br>目前正在嘗試每個小作品都使用 sass<br>讓自己的熟練度更加提升<br>GOGO！  </p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>Sass</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 紀錄 ⟭ HEXO 一起來做部落格(III)</title>
    <url>/Blog/Hexo-BuildBloger-III/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>呼!建置的差不多了<br>原本要總結研究 Hexo 三天的成果<br>寫成比較順暢的建構過程<br>結果一弄又更新好多東西…<br>一樣先來補齊概念吧!<br>月底再來一個大總結&gt;&lt;    </p>
<hr>
<h2 id="資料結構"><a href="#資料結構" class="headerlink" title="資料結構"></a>資料結構</h2><pre><code>+Blogger 
|- .github
|- .vscode
|- .node_modules  
|- .scaffolds
    |- draft.md
    |- page.md
    |- post.md
|- .source
    |- _drafts
    |- _posts
    |- 其他頁面(略)
|- .themes
    |- next
        |- (略)
        |- languages
        |- layout
        |- (略)
|- _config.next.yml
|- _config.yml
|- package.json
+  
</code></pre>
<p>這邊我僅有挑我有用到的幾個  </p>
<blockquote>
<p> 最外層  </p>
</blockquote>
<table>
<thead>
<tr>
<th><strong>資料夾名稱</strong></th>
<th><strong>用途</strong></th>
</tr>
</thead>
<tbody><tr>
<td>.node_modules</td>
<td>npm原始設定(不常用)</td>
</tr>
<tr>
<td>.scaffolds</td>
<td>文章狀態模板 (可以修訂統一模板)</td>
</tr>
<tr>
<td>.public</td>
<td>發布自動後生成的資料夾 (不用動)</td>
</tr>
<tr>
<td>.source</td>
<td>部落格編輯(文字都在這編輯)</td>
</tr>
<tr>
<td>.themes</td>
<td>編輯主題樣式(相關 css )</td>
</tr>
<tr>
<td>._config.next.yml</td>
<td>next 安裝設定檔，多是插件</td>
</tr>
<tr>
<td>._config.yml</td>
<td>hexo 安裝設定檔</td>
</tr>
<tr>
<td>.package.json</td>
<td>專案的設定檔，會寫安裝什麼東西(基本上不用動)</td>
</tr>
</tbody></table>
<blockquote>
<blockquote>
<p>. scaffolds</p>
</blockquote>
</blockquote>
<table>
<thead>
<tr>
<th><strong>資料夾名稱</strong></th>
<th><strong>用途</strong></th>
</tr>
</thead>
<tbody><tr>
<td>_drafts</td>
<td>草稿模板</td>
</tr>
<tr>
<td>page .md</td>
<td>頁面模板</td>
</tr>
<tr>
<td>post .md</td>
<td>文章模板</td>
</tr>
</tbody></table>
<ul>
<li>指令快速記!   <pre><code class="cmd">hexo new draft 文章名稱  //建立一篇草稿  
hexo new post 文章名稱  //建立一篇新文章  
hexo new page 頁面名稱 //建立一篇新頁面，同時source 會建立新的資料夾  
hexo publish 版面 檔案名稱 // 發布(草稿)  
</code></pre>
</li>
</ul>
<blockquote>
<blockquote>
<p>. source</p>
</blockquote>
</blockquote>
<table>
<thead>
<tr>
<th><strong>資料夾名稱</strong></th>
<th><strong>用途</strong></th>
</tr>
</thead>
<tbody><tr>
<td>_drafts</td>
<td>草稿會在這</td>
</tr>
<tr>
<td>_posts</td>
<td>發布的貼文都會在這</td>
</tr>
<tr>
<td>其他頁面資料夾</td>
<td>像是About、tags、categroies..</td>
</tr>
</tbody></table>
<p>因為一開始沒有About等等的基礎頁面，自己要新增  </p>
<pre><code class="cmd">  hexo new page About  
  hexo new page tags 
  hexo new page categroies 
</code></pre>
<p>然後新頁面新增 <code>type</code> 來做頁面記號<br><img data-src="https://chi01pap001files.storage.live.com/y4mUs5S3stfFRMyDXC2wenjxmYnUyrrWZLN195KoJDuBNbjDIUXcIHbvzGlPGiUiyTgjwNaoLwYAM6i881mLxbBrFsfqBSUm0CSwtIWpIcZ8psQgmom42pugcn98p5OsSHq8t7JU1GKO7NotQ-nqR1teCP-h9lS_J3AZkoZWgJ-o7187LBZXhCtg7x2BWH8ou9t?width=865&height=303&cropmode=none" alt="categroies_type"><br>這頁是分類，跟設定檔的地方對應哦! 頁面 - 路徑<br><img data-src="https://chi01pap001files.storage.live.com/y4mSHJlXGuxGrOywWFqkyu391Exl7Z_yJrwNUwZTN56tV5LPXobIEudNoPFKamiALfWJe9NbCEJmdI2PLekXQ5b67LgUGmQurJ8LEta7IHg3crrFvX8YfLeVZ-zTllPrB9b88o6RngYO2tbAoyjmtBFF1Fq5YxN-BnGO1Q-4DaX4Lt8H4X_apXvACFiKuR515oO?width=715&height=1510&cropmode=none" alt="路徑">  </p>
<blockquote>
<blockquote>
<p>. themes - .next (依照主題去分資料夾)  </p>
</blockquote>
</blockquote>
<p>如果 theme 沒有跑出 next 的資料夾，可以用git 的方式 clone 一下<br><u><a href="https://github.com/theme-next/hexo-theme-next">官方教學 底加</a></u>  </p>
<pre><code class="cmd">    git clone https://github.com/theme-next/hexo-theme-next themes/next  
</code></pre>
<p>之後我就GG了，因為 NEXT 主題更新蠻快的，導致一些語法或函式沒統一更新到，最近的是8.0版<br>網路上layout檔是 <code>.swig</code> ，我的是<code>.njk</code><br>我問號了起來，不過還好語法上差不了多少<br>但在 <code>hexo g</code> 會報錯，主要是<code>load</code>的函式要更新用法 </p>
<p>會顯示 <code>yml.safeload</code> 用法過時，必須改成 <code>yml.load</code><br>最快速的方法就是  </p>
<pre><code class="js">1. 專案的搜尋欄打 safeload  
2. 找到 `vendors.js` 
3. 尋找 `yml.safeload`
4. const dependencies = yaml.safeLoad(vendorsFile); //這行改成下面這個
5. const dependencies = yaml.load(vendorsFile);
</code></pre>
<p>這樣就能重構，在 <code>hexo s</code> 一下看看是不是有跑出頁面<br>當然嫌麻煩還可以裝指定版本<br><a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/INSTALLATION.md">官方教學</a>    </p>
<table>
<thead>
<tr>
<th><strong>資料夾名稱</strong></th>
<th><strong>用途</strong></th>
</tr>
</thead>
<tbody><tr>
<td>languages</td>
<td>語言對應字</td>
</tr>
<tr>
<td>layout</td>
<td>調整看到的版面 基底</td>
</tr>
<tr>
<td>source</td>
<td>一些css js image 設定在這(跟外層的source不一樣)</td>
</tr>
</tbody></table>
<ul>
<li>theme 中的 source 主要掌管 next 主題的樣式而已 </li>
<li>外層的 source 是 hexo 架構的編輯地方<br>兩者有差哦!  </li>
</ul>
<h3 id="語言設定"><a href="#語言設定" class="headerlink" title="語言設定"></a>語言設定</h3><p>languages 預設原本是 <code>en</code>，從 <code>_config_yml</code> 就可以更改語系<br><img data-src="https://chi01pap001files.storage.live.com/y4mGt3P_ahV1z8j1pRbpVUp8wSl6nBkqs_kpfNhZB32cMMkamaJhe70pZkqoosmLUiVaElphRPcWkvde5dQfOYASoAYIJbirgBTXzcpY8xkx7ARrrtFFRjvMQarZpJv2ANNm-XSosQEGoq0d6s9n9kv55XqPeEOrHtWGChQkJAL-o4AMO-xc_Z-p5a2MWic6Gow?width=1223&height=410&cropmode=none" alt="lang-setting">  </p>
<p>當然網頁可以寫成多國語，待研究XDD，可以的話想寫成英文<br>有些翻譯過來的文字可能不太喜歡，或是想 自訂義<br>就可以到 theme 字料夾中的 languages 找 zh-TW<br>把想要的文字替代上去哦!<br><img data-src="https://chi01pap001files.storage.live.com/y4ma1tCvNxVMoUCdcaPYcIjlNvLRelGj3E1tbBnrI3EAXwnLvIoNp4JrjYMC7GYuWjeVhYRVFf6f0sNhPWNlDqWsTsGS8HvaqjBDyLj49cWpdfBJ9Bl0GiCJOfmCwBAxlbVdIawagjcA9XlFdu2B43oKb_6ZveVwqdQsVsKjjtjd9zUQRkYqJIBu7AIpFGaQKnd?width=1004&height=1512&cropmode=none" alt="lang-word">  </p>
<h3 id="版面設定"><a href="#版面設定" class="headerlink" title="版面設定"></a>版面設定</h3><p>layout 有很多頁面設定，包含第三方外掛都可以設定外觀等等的<br>當然也有 css或js 可以設定，在 source 資料夾裡，基本的換色、背景圖片都可以自訂。  </p>
<hr>
<h2 id="調整樣式-amp-外觀"><a href="#調整樣式-amp-外觀" class="headerlink" title="調整樣式&amp;外觀"></a>調整樣式&amp;外觀</h2><p>next 的 <code>config.yml</code> 可以開啟 comment 的功能<br>因為我裝了disqus留言版，結果發現 next 主題在tags、categroies等等頁面都是套 post 的板<br>也就是 post 每一則下方有留言區是正常的<br>但誰會在<code>標籤</code>跟<code>分類</code>或是<code>關於我</code> 底下讓人留言啦!  </p>
<p>就要修改 <code>theme &gt; next &gt; layout &gt; _layout.njk</code><br>其實可以發現 page 的版面 都用同一個 layout<br>所以在 <code>new page</code> 或<code>new post</code> 下方都會有comment(如果妳有打開的話)  </p>
<p>打開 <code>_layout.njk</code>，找到下面這行 </p>
<pre><code>  &#123;% include '_partials/comments.njk' %&#125;
</code></pre>
<p>來把它加上if-else條件，判斷哪一頁加入comment<br>改成 : </p>
<pre><code class="js">&#123;% set page_type = page.type === 'tags' or page.type === 'categories' %&#125;
&lt;div style=&quot;&#123;%if page_type %&#125; visibility:hidden; height:0px;&#123;% endif %&#125;&quot;&gt;
&#123;% include '_partials/comments.njk' %&#125;  
</code></pre>
<p>原本我是看這篇<a href="https://hsiangfeng.github.io/hexo/20190516/2710757554/">文章教學</a><br>結果不行，因為版本問題，layout檔再也不是<code>.swig</code><br>還好語法上還能通，只有平常在寫得 <code>||</code> 要改成 <code>or</code>   </p>
<hr>
<h2 id="好用的寫文插件"><a href="#好用的寫文插件" class="headerlink" title="好用的寫文插件"></a>好用的寫文插件</h2><p>上一篇有提到 hexo 有的後台頁面<br>哦~我的天，markdown 雖然能馬上看見效果<br>但實際版面跟輸出後的差異蠻多的<br>後來我還是在 VS 上做編輯了<br>當然是來安裝個插件XD  </p>
<ol>
<li>VS 的插件商店搜尋 <code>Markdown Preview Enhanced</code></li>
<li>安裝</li>
<li>新增一個 post 看看 <code>hexo new post a123</code></li>
<li>開啟檔案對著它按右鍵，選 <code>Reopen Editor with ...</code><br><img data-src="https://chi01pap001files.storage.live.com/y4m5e44Li2JyNG7g5TuAltJILiqeBueOK15DFGll5OZ4uHTS58Bu68ngUQGhBM_987DVWt6su774wdyt-a-BiUKqHX0W9AC1ohAq2SoRQRPnZBSqs-T4-xq8aQCr4Zc48fQWmdmhOYZJ_t9SIJbtk8GUHPxwB5cqSpBiWpbVmYtnbZp2Epk5FhS_pFPi9yikSaA?width=2736&height=1824&cropmode=none" alt="圖示"> </li>
<li>上面會跳出選擇器，選<code>markdown preview</code>  </li>
<li>在點這個開啟內分頁<br><img data-src="https://chi01pap001files.storage.live.com/y4mD3vUlN6kw2OxydnmAU1ZhFwb8pUd-ya_RTwIDBiggyqM-HXup_763uqZsG3yDfqWMcjYw2GStohPK4f88s0gSmDTD8yK5vvJVV2gO2cat_AzjyjpL_m4XutuM6hXy4AmQq1cjGdYQZkGEDo161pc8Ir8UZhMMlx4ZSdMyNLyRmRp98rCHT1QNNQIXq9-Y2S1?width=1423&height=401&cropmode=none" alt="內分頁">    </li>
<li>在開一次原檔案在分頁中，就可以準備來編輯囉!</li>
</ol>
<p>燈愣! 就變這樣，邊寫可以邊看到效果 :happy:<br><img data-src="https://chi01pap001files.storage.live.com/y4mRvRQYFuUfq-zmPn2p99ZdGCFN6dBqQaGcm4gMBtYN-O6M9Oz01zGE_OL_KFQ3aG14pD7aiNcIAFH4JOi61XP8uoGLyxx5Jo0Ux7VLu8umfff5TIp1v-P7lriTZcDEOGO39yKM195CeZwH6ApqOLjfWRZ2zskQSp8ZOUZRT6qM5k6DS_UOMGa8hze41xI1iKh?width=2600&height=1615&cropmode=none" alt="寫文好幫手">  </p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>網站建置的差不多了<br>短時間應該沒有要再美化<br>要多努力寫文章<br>markdown 還在學習中…</p>
<p>經過三日連發<br>這類實作文章應該就沒有每天產了<br>改成2-3天發布一篇<br>不然感覺每天都再搭特快車<br>再抓一下什麼樣的寫法才好吸收  </p>
<p>最近有看到一種寫文章的方式<br>是時候來增強寫作技巧  XD  </p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>部落格</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 筆記 ⟭ 初級入門必學的CommandLine</title>
    <url>/program/LearnAboutCommandLine/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>人跟人會用語言符碼來溝通<br>而人要跟電腦溝通，我們會想到</p>
<blockquote>
<p>阿不就用滑鼠?</p>
</blockquote>
<span id="more"></span>  
<p>是阿，現在我們能用滑鼠按左、右鍵<br>在畫面上操作電腦的動作<br>都多虧了<code>GUI</code>（圖形操作介面）<br>降低電腦的使用門檻<br>讓我們享受電腦帶來得便利  </p>
<h2 id="還沒有GUI的時候"><a href="#還沒有GUI的時候" class="headerlink" title="還沒有GUI的時候"></a><strong>還沒有GUI的時候</strong></h2><p>早期沒有GUI的時代，都是使用鍵盤輸入指令來控制<br>也就是使用「文字指令介面」 <code>Commamd Line Interface</code>簡稱 <code>CLI</code>。<br>當然這大大提高了使用電腦的門檻<br>光是指令種類就讓人頭昏眼花<br>更別提如果像爸媽有點年紀的人想查個資料<br>還要向查字典一樣<br>之後每一次執行還要同樣的查字典動作<br>論誰都會覺得麻煩<br>接著爸媽不會想弄，只會叫你出來處理<br><del>於是你就立志成為工程師了</del>       </p>
<h2 id="為什麼Command-Line-Interface-依然存在"><a href="#為什麼Command-Line-Interface-依然存在" class="headerlink" title="為什麼Command Line Interface 依然存在?"></a><strong>為什麼Command Line Interface 依然存在?</strong></h2><p>常常在想工程師一定要會CLI嗎? 或許這是個蠢問題。<br>但我喜歡探究這些問題，對於菜鳥來說理解根源才能信服XD  </p>
<h3 id="GUI與CLI差在哪"><a href="#GUI與CLI差在哪" class="headerlink" title="GUI與CLI差在哪?"></a>GUI與CLI差在哪?</h3><blockquote>
<p>嚐過GUI難道不香嗎?</p>
</blockquote>
<p>香阿，但是GUI操作你想想看有多少個動作?  </p>
<ul>
<li><p>以<code>複製</code>A東西到同目錄為例  </p>
<ol>
<li>滑鼠移動到指定複製物件</li>
<li>按下右鍵</li>
<li>點選拷貝(copy)</li>
<li>滑鼠移到空白處按下右鍵</li>
<li>點選貼上(paste)  </li>
<li>幫複製物件取新名稱  </li>
</ol>
</li>
<li><p>那CLI操作呢?</p>
<ol>
<li>開啟命令提示字元</li>
<li>鍵盤輸入<code>cp A物件 命名複製物件新名稱</code></li>
<li>done.</li>
</ol>
</li>
</ul>
<p>可能中間安插個去到目錄 cd 一下。</p>
<blockquote>
<p>幾行字，就是這麼簡單  </p>
</blockquote>
<p><img data-src="https://truth.bahamut.com.tw/s01/202106/80efcf5f0815fc0b7a2efdacac66b7c1.JPG">  </p>
<p>這邊不討論ctrl C ctrl V 大法  </p>
<p>除此之外，光是G<code>(Graphic)</code><br>圖片帶來的效能消耗讓早期的電腦吃了不少虧<br>好在現在電腦的效能水平都遠遠足夠<br>才能讓我們看見把<strong>指令步驟具象化的過程</strong>  </p>
<p>當然我想GUI與CLI是相輔相成的狀態<br>誰不想複雜的東西簡單化呢?尤其變成圖片  </p>
<h3 id="回到CLI為何還是存在"><a href="#回到CLI為何還是存在" class="headerlink" title="回到CLI為何還是存在"></a><strong>回到CLI為何還是存在</strong></h3><p>套用老師們最喜歡的一句話 <code>快、狠、準</code><br><del>刪除到檔案也<code>快狠準</code>QQ</del><br>從剛剛的複製例子可以得知<br>對於效能與呈現，無疑是比較快的<br>甚至是有些指令只能透過CLI來執行<br>現在的CLI也是越來越進步<br>東西好用，當然還存在阿!</p>
<h3 id="對於我來說"><a href="#對於我來說" class="headerlink" title="對於我來說"></a><strong>對於我來說</strong></h3><p>對我來說，GUI與CLI可以說是像到外國與在地的感覺  </p>
<ul>
<li><p><strong>GUI</strong><br>  人生地不熟，靠Body language筆劃，或是拿圖片問是最友善的(這邊以你不會當地語言為主)。</p>
</li>
<li><p><strong>CLI</strong><br>  你懂我懂的語言，直接講最快。</p>
</li>
</ul>
<p>這也不難解釋，為什麼程式基礎必修要會CLI<br>溝通，最講求效率:D…  </p>
<h2 id="常用的CLI指令"><a href="#常用的CLI指令" class="headerlink" title="常用的CLI指令"></a><strong>常用的CLI指令</strong></h2><p>阿這好像才是這篇最主要的XD<br>以前上過Linux的課堂<br>順便複習與搞懂其他不懂的詞    </p>
<h3 id="基礎四招"><a href="#基礎四招" class="headerlink" title="基礎四招"></a>基礎四招</h3><table>
<thead>
<tr>
<th>常用指令</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>pwd</td>
<td>告訴你現在在哪裡?</td>
</tr>
<tr>
<td>ls</td>
<td>印出現在所在地的所有檔案</td>
</tr>
<tr>
<td>cd</td>
<td>移動到指定的地方</td>
</tr>
<tr>
<td><a href="#mv">mv</a></td>
<td>移動到指定地或是修改指定的檔案名稱</td>
</tr>
</tbody></table>
<ul>
<li>註: pwd 在window cmd沒有，用cd 有同效果。 </li>
</ul>
<h3 id="快速招式"><a href="#快速招式" class="headerlink" title="快速招式"></a>快速招式</h3><blockquote>
<p>個人記到<code>資料夾新增、刪除與複製</code>，感覺就蠻夠用的。  </p>
</blockquote>
<table>
<thead>
<tr>
<th>好用指令</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td><a href="#touch">touch</a></td>
<td>修改檔案時間或是<code>建立新檔案</code></td>
</tr>
<tr>
<td><a href="#rm">rm</a></td>
<td>刪除檔案</td>
</tr>
<tr>
<td>rmdir</td>
<td>刪除指定資料夾</td>
</tr>
<tr>
<td>mkdir</td>
<td>建立資料夾</td>
</tr>
<tr>
<td>cp</td>
<td>複製檔案</td>
</tr>
<tr>
<td>cat</td>
<td>直接讀取檔案內容</td>
</tr>
<tr>
<td><a href="#grep">grep</a></td>
<td>抓取檔案內容中的關鍵字</td>
</tr>
<tr>
<td><a href="#wget">wget</a></td>
<td>下載檔案，後面接檔案的url</td>
</tr>
<tr>
<td>clean</td>
<td>清空目前的指令畫面</td>
</tr>
<tr>
<td>curl</td>
<td>送出 request (ex:api)</td>
</tr>
</tbody></table>
<ul>
<li>註: grep、cat、curl 在window cmd沒有效果。 </li>
<li>weget、touch 在cmd 與 powershell都沒有效果。  </li>
</ul>
<h3 id="參數"><a href="#參數" class="headerlink" title="參數"></a>參數</h3><blockquote>
<p>前面都會加一個小槓槓「-」，兩個的話就和在一起寫<br>例如 -al -rf    </p>
</blockquote>
<table>
<thead>
<tr>
<th>常見指令參數</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>-a</td>
<td><code>all</code>的意思，包含開頭為<code>.</code>的檔案</td>
</tr>
<tr>
<td>-l</td>
<td><code>list</code>。詳列所有東西，包含權限、屬性、時間</td>
</tr>
<tr>
<td>-f</td>
<td><code>force</code>。 強制執行 <del>(不要亂使用這個參數)</del></td>
</tr>
<tr>
<td>-r</td>
<td>這個資料夾以下的檔案一起包</td>
</tr>
</tbody></table>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>因為不知道叫什麼… </p>
<table>
<thead>
<tr>
<th>其他</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td><a href="#pipe%E7%B5%84%E5%90%88%E6%8A%80">| (pipe)</a></td>
<td>組合技(將輸出給後面的輸入)</td>
</tr>
<tr>
<td><a href="#redirection%E9%87%8D%E6%96%B0%E5%B0%8E%E5%90%91">&gt; (redirection)</a></td>
<td>重新導向，會將檔案內容覆蓋過去</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>跟 “ &gt; “概念依樣，但不覆寫，而是加入</td>
</tr>
<tr>
<td>..</td>
<td>代表上一層的位置</td>
</tr>
<tr>
<td>~</td>
<td>使用者的根目錄</td>
</tr>
</tbody></table>
<h3 id="快速舉例"><a href="#快速舉例" class="headerlink" title="快速舉例"></a>快速舉例</h3><h4 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h4><ol>
<li><p>移動 mv [<strong>檔案</strong>] [<strong>新名稱</strong>]   </p>
   <pre class="line-numbers language-none"><code class="language-none">mv &#96;123.txt&#96; &#96;456.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>檔案名稱變 <code>456.txt</code>    </p>
</blockquote>
</li>
<li><p>更名 mv [<strong>檔案</strong>] [<strong>目的地</strong>]</p>
   <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">mv</span> <span class="token variable"><span class="token variable">`</span><span class="token number">123</span>.txt<span class="token variable">`</span></span> <span class="token variable"><span class="token variable">`</span>.<span class="token punctuation">\</span>Myblog<span class="token variable">`</span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>123.txt 就會在 <code>Myblog</code> 資料夾底下<br>   目的有分成 <strong>絕對路徑</strong> 與 <strong>相對路徑</strong></p>
</blockquote>
</li>
</ol>
<h4 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h4><ol>
<li><p>修改時間<br>   EX : folder1 \ 123.txt<br>   上次檔案編輯時間 :  07/27/21 13:00<br>   現在時間 : 14:03  </p>
   <pre class="line-numbers language-none"><code class="language-none">touch 123.txt  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>檔案寫入的編輯時間會變成 <code>07/27/21 14:03</code>  </p>
</blockquote>
</li>
<li><p>建立新檔案<br>   EX: folder1\123.txt  </p>
   <pre class="line-numbers language-none"><code class="language-none">touch 456.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>當找不到該層符合的檔案名，就會建立新檔案<br>因此在 folder1 輸入<code>ls</code>底下會有<br><code>123.txt 與 456.txt</code> 兩個檔案</p>
</blockquote>
</li>
</ol>
<h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h4><ol>
<li>刪除檔案<br>   EX: 我想刪除 123.txt。     <pre class="line-numbers language-none"><code class="language-none">rm 123.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>刪除資料夾<br>   EX: 我想刪除 blog 資料夾，裡面還有很多檔案<br>   結果<code>rmdir blog</code> 發現行不通，因為<code>資料夾裡面不是空的</code>     <pre class="line-numbers language-none"><code class="language-none">rm -r blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>利用<code>-r</code>來選取包含blog資料夾以下的所有子目錄<br>   進行刪除  </p>
</blockquote>
</li>
</ol>
<h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><ul>
<li>尋找關鍵字 grep [<strong>關鍵字</strong>] [<strong>檔案</strong>]<br>EX: 檔案 <code>123.txt</code> 裡面有 hello world 這行字<pre class="line-numbers language-none"><code class="language-none">grep o 123.txt  &#x2F;&#x2F; 我想尋找o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>執行後印出 : hell<code>o</code> w<code>o</code>rld  ，這兩個o被highlight起來  </p>
</blockquote>
</li>
</ul>
<h4 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h4><ul>
<li>wget [<strong>url</strong>]<br>EX: 我想下載東西 <pre class="line-numbers language-none"><code class="language-none">wget http:&#x2F;&#x2F;www.google.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>圖片或是原始碼都可以取得</p>
</blockquote>
</li>
</ul>
<h4 id="pipe組合技"><a href="#pipe組合技" class="headerlink" title="pipe組合技"></a>pipe組合技</h4><ul>
<li>組合技應用<br>EX: 把blog資料夾裡檔名含有<code>o</code>的檔案印出來<br>資料夾 blog 含有 hello.txt、hi.txt、row.txt<br>透過 | 可以將兩者合併成一行  <pre class="line-numbers language-none"><code class="language-none">ls &#x2F;blog&#x2F; | grep o  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>印出 兩個檔案 ，<code>hello.txt row.txt</code><br>組合技可以玩串燒，愛串多少串多少<del>(?)</del>  </p>
</blockquote>
</li>
</ul>
<h4 id="redirection重新導向"><a href="#redirection重新導向" class="headerlink" title="redirection重新導向"></a>redirection重新導向</h4><ol>
<li>覆蓋寫入<br>EX : 123.txt 檔案裡有 <code>hello</code>文字，改成bye  <pre class="line-numbers language-none"><code class="language-none">echo byebye &gt; 123.txt
cat 123.txt &#x2F;&#x2F; 查看一下印出 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>123.txt 裡面的文字是 <code>byebye</code></p>
</blockquote>
</li>
<li>增加寫入<br>EX : 123.txt 檔案裡有 <code>hello</code>文字，加入bye   <pre class="line-numbers language-none"><code class="language-none">echo byebye &gt;&gt; 123.txt
cat 123.txt &#x2F;&#x2F; 查看一下印出 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>123.txt 裡面的文字是 <code>hello byebye</code></p>
</blockquote>
</li>
</ol>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>Linux 跟 Window 內建的指令有點不太一樣<br>先知道指令的用法我覺得是件好事<br>前期底子打的越深，銜接上較無痛。<br>GOGO ! 往更深的坑前進  </p>
<p>如果我有寫錯的地方歡迎在下面留言指教<br>新手多多包涵  </p>
]]></content>
      <categories>
        <category>program</category>
      </categories>
      <tags>
        <tag>CommandLine</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 紀錄 ⟭ HEXO 一起來做部落格(II)</title>
    <url>/Blog/Hexo-BuildBloger-II/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨日已經將網站安裝起來了<br>今天要基礎設定，以及發佈至github上<br>使用很多人用的 NEXT 主題，NEXT 也有很多好用的插件<br>像是留言區、人流計數、打賞之類的都有<br>客製化自己的部落格更方便了<br>讓我想起小時候玩無名小站的快樂…  </p>
<h2 id="複習"><a href="#複習" class="headerlink" title="複習"></a>複習</h2><p>昨天最常使用的2個指令，今天再加一個  </p>
<pre class="line-numbers language-none"><code class="language-none">hexo clean &#x3D;&gt; 簡寫 hexo cl &#x2F;&#x2F;清除建構檔  
hexo g  &#x2F;&#x2F;重新建構  
hexo s  &#x2F;&#x2F;發布伺服器(本端)  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>有時候會有囤積的檔案，clean一下之後再重新建構<br>明天再來細補資料夾的結構與檔案設定的部份<br>來做一個統整復習</p>
<h2 id="換上NEXT主題"><a href="#換上NEXT主題" class="headerlink" title="換上NEXT主題"></a>換上NEXT主題</h2><blockquote>
<p><a href="https://github.com/theme-next/hexo-theme-next">官方指引</a>  </p>
</blockquote>
<p>不過我一樣是看那位<a href="https://home.gamer.com.tw/artwork.php?sn=5138471">巴哈L大大的文章</a>，真的幫助我很多☺️  </p>
<pre class="line-numbers language-none"><code class="language-none">npm install hexo-theme-next  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>直接在終端機輸入安裝指令<br>之後在左側的資料夾找到<br><img data-src="https://chi01pap001files.storage.live.com/y4mZoV2zYTezJ7XnQzQftdPHv7G283xYtZn29Jm7MZ5BcCvcgEz5ET80-IILT_wrv5cE-TDME573cM8j3IQndYptgcFKJboIPsDViORzMo-554RRyfmKuwmWNFLSCifx1yqRbRS_1vGsOCjc52mDfyHSBXfKC2qOJOSP-_382CTz8EjWdyen19M2UAwGLqGcNis?width=290&height=602&cropmode=none"><br><code>_config.yml</code>  ⇒ 網頁設定檔，設定一些插件開關阿，網頁名稱、網址等等的<br>NEXT安裝完後會生出 <code>_config.next.yml</code> ⇒ 是 NEXT主題中的設定，這個先不設定了。<br>首先要把網頁設定檔的一些東西設定好，善用 <code>ctrl + F</code> 直接尋找  </p>
<p><img data-src="https://chi01pap001files.storage.live.com/y4mg5VYrXhn9SKuFB7O410M0VrdE80dSyg12iiXxEjvdvFV36VXtMsNIyS90lEwOEjoEwGU8AvLctdsyh42QKc7m_VT5DBKUkjUwZAVZzXPWkqjbUjvOIrtXtZmk8w-NQb--hMM-_jkdmrzXBFZ8f8xG2ofs35BdVqZQ36OjvduhjK3UXSuWqfopS2MDFKov9NB?width=660&height=418&cropmode=none">  </p>
<table>
<thead>
<tr>
<th>名稱</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>url</td>
<td>網頁的網址。先去 github 建立好一個空的網頁，複製網址貼上</td>
</tr>
<tr>
<td>root</td>
<td>網頁的根目錄，這邊寫專案名就好， /***/ 是相對路徑的寫法哦</td>
</tr>
<tr>
<td>theme</td>
<td>網站套用的主題。這邊安裝的是NEXT填寫上 next</td>
</tr>
<tr>
<td>deloy</td>
<td>發布設定。這邊先填寫 <code>type: git</code> 。 repo 等等到github 上複製即可</td>
</tr>
</tbody></table>
<p><img data-src="https://chi01pap001files.storage.live.com/y4m31ODFxu3XGBixiLchDX0zi4lqY1toUWP2_3Bvbe2iqrsvUY5k035-7vUuTxYOsecl-msD3YU6BjrtEXYrR4vfzVsO0GR7w5HPZuS816bAUuUJ3b8LOyZro_eBsQX7EzvEvwyCle5dAdlWgxV2Ynrlk2WOPIyQan6qaNM5hF8XhMsowebpXBVIsiPg6QkwICt?width=256&height=68&cropmode=none">  </p>
<blockquote>
<p>記得 冒號 : 後面要空一格(space)，設定值才算有哦  </p>
</blockquote>
<p>裝完 Next 也改完設定了，再一次執行指令   </p>
<pre class="line-numbers language-none"><code class="language-none">hexo cl
hexo g
hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>


<p>會在終端機上看到大大的NEXT<br>開啟本機伺服器後，看到主頁面沒問題就OK囉<br>發現tags categroies 等等頁面都not found是正常的<br>因為還沒新增頁面  </p>
<h2 id="發布至github-pages"><a href="#發布至github-pages" class="headerlink" title="發布至github pages"></a>發布至github pages</h2><p>關於上傳有兩個方式<br>分別用 https 或 SSH 形式，兩者都可以<br>都是git的上傳方式<br>根據<a href="https://wcc723.github.io/git/2018/02/12/github-ssh-https/"><strong>卡斯柏大大</strong></a>寫的，github 官方推薦https方式但也有提供SSH  </p>
<blockquote>
<p><strong>https</strong> ⇒ 是不用金鑰，上傳時第一次會要求登入<br><strong>SSH</strong> ⇒ 需要金鑰，不用再登入帳號認證  </p>
</blockquote>
<p>懶人如我，當然選SSH XDD<br>以下這邊會以 SSH 部署方式進行<br>先安裝 hexo - git 的發布工具<br>如果有慣用的可以到hexo Plugin 找一下  </p>
<pre class="line-numbers language-none"><code class="language-none">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<p>恩…   <code>- -save</code>  是什麼碗糕呢<br>查了一下大概是 發佈&amp;開發狀態的區別<br>不過就先照官方的做吧! 之後在總結補上概念<br><code>deploy</code> 中文是部署，就是發布的意思啦!<br>接著回到上面 <code>_config.yml</code> 檔進行設定  </p>
<p><img data-src="https://chi01pap001files.storage.live.com/y4mAgiLoI6WV74o0adjBGFlRZU-8LOLmfwTqA6WE10zJOcOQWQcjFuUUTtl_jsAoAXrQUu08ZmDPU8g7l7hgaAT1DOVYYDjxiWeS2hftDZXLinaOqNrU4zsLPPdPZn3nBsD5Crg07WHCYbskme0mhi0CQD_sWE-ZjVSFhPULnsB8ZurJzRRoMCsXMHt_GFO52eL?width=256&height=68&cropmode=none">  </p>
<p>剛剛我們在 <code>deploy</code> 這邊寫打好type了<br>為了接上自己的 github repository<br>我們到要成為blog的專案底下找到 code 這個綠綠的，按一下<br>裡面會有 https 跟 SSH 的git 上傳地址 ， 複製SSH 的那串到 repo 貼上  </p>
<p><img data-src="https://chi01pap001files.storage.live.com/y4mtrlRgLYfAcRsAhseYDa7VThDuZI0wLDMnhFqvZ7xSbTkFjpstkcIn1SQWWs-ZgIQXy9_w2VNi0KMgNLoJdt9Uvcsq2JAyt-klGyB5qA_HHhyUCu1RJqsELKcVABJd1Rh-QcOSMEcfBXzOdw1pN1zkgWoeBD68rwLUwpTZoiXDjH5eFa_V-Rx4InL5hdAIyA2?width=660&height=487&cropmode=none">  </p>
<p>再來我們要透過 終端機用git連接上去囉!<br>設定好登入口  </p>
<pre class="line-numbers language-none"><code class="language-none">git config --global user.name &quot;你的帳號名&quot;  &#x2F;&#x2F;像我的就是 meitung473  
git config --global user.email &quot;你註冊的信箱(你的帳號)&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>因為透過SSH的方式，需要金鑰，所以來建立一個新的金鑰  </p>
<pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa -C &quot;你註冊的信箱(你的帳號)&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>…你說這又是啥碗糕，SSH 之前略懂略懂而已，所以我又查了一下<br><code>ssh-keygen</code> ⇒ 產生金鑰， 後面的 rsa 是加密金鑰的演算，至於這些不是我的拿手就不多說了<br>好奇的話可以看 <a href="https://docs.microsoft.com/zh-tw/azure/virtual-machines/linux/create-ssh-keys-detailed">MS 官方說明</a> ，像是 為什麼有 -t 與 -C 的用途是為何  </p>
<p>總之非對稱加密會有兩把鑰匙，一把公鑰一把私鑰<br>接著把公鑰的部分提出來，塞給自己的github，上傳的時候透過  「鑰&lt;-&gt;鑰」溝通(you know~)  </p>
<pre class="line-numbers language-none"><code class="language-none">cat ~&#x2F;.ssh&#x2F;id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>cat</code> ⇒ 是印出檔案內容指令，我們要提取剛剛產生的SSH 公鑰的部分<br><code>~./ssh/id....</code>這邊是公鑰的檔案路徑<br>你會發現輸入指令後有一大串的東西出現<br>開頭 <code>ssh-rsa AAAAB.... 你的電子信箱</code> 結尾，把它複製起來<br>接著到 github &gt; Setting，找到 <code>SSH keys and GPG keys</code> 的設定頁面，建立新的SSH key<br>複製的文字貼到key上，title取自己方便的就好</p>
<center> 

<p><img data-src="https://chi01pap001files.storage.live.com/y4mtrlRgLYfAcRsAhseYDa7VThDuZI0wLDMnhFqvZ7xSbTkFjpstkcIn1SQWWs-ZgIQXy9_w2VNi0KMgNLoJdt9Uvcsq2JAyt-klGyB5qA_HHhyUCu1RJqsELKcVABJd1Rh-QcOSMEcfBXzOdw1pN1zkgWoeBD68rwLUwpTZoiXDjH5eFa_V-Rx4InL5hdAIyA2?width=256&height=189&cropmode=none" alt="step01"></p>
<p><img data-src="https://chi01pap001files.storage.live.com/y4m8_6cDZHW1v4JSUJsrUu1p9bMSzDmISLkPucVi6NDP88dCk5LwTSNVligcXEMl81_wAl0zvVnA_WXHJdKvEIccFUNyticly15iG3l2HSc4Wob7_MFbIQaPdxt1KrDyLUosjUouzN0940St1O3nLFi2qH_LUIFad_H5L0VmBpQQJZegkAIR9m0Z8NpnoCC4dbg?width=256&height=140&cropmode=none" alt="step02">  </p>
</center>

<p>恩?你說這樣就好了嗎，NONO雖然都打好了<br>但我們還沒用「(公)鑰(私)鑰」連結<br>接著輸入指令，連結到 github 做認證，當在終端機部署上去就會上傳到你的github了  </p>
<pre class="line-numbers language-none"><code class="language-none">ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<p>出現 <code>Hi,你剛剛帳號名! …</code> 就代表成功囉!<br>最後一步了!再次打上指令  </p>
<pre class="line-numbers language-none"><code class="language-none">hexo g  
hexo d  &#x2F;&#x2F;部署 deploy 的縮寫<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>燈愣!等一會兒就會發現發布的網頁出現新的主題哦!<br>長得不太一樣是因為NEXT 有4種不同版型  </p>
<p>如果發現好像沒有動靜，檢查一下 <code>branch</code> 是不是設定正確哦<br><img data-src="https://chi01pap001files.storage.live.com/y4mUwaX8yxoT5torp_6oiPYLOI5bjcEE0IJ89NRpRpuhwB6uUaD7dWVgENZka-pJtH4jWV_QrTpJhDe5styDA24xN6fvf0_nWbzeWRzgFWsz9U--NP80ITmFjg4HyStxEjbMOPPco1sLRZPDNmy9Z4TLRgNYcRlBSgGYnzNgDACmLTzLz2Kq859eMQbkhbKT1mq?width=256&height=76&cropmode=none"><br><img data-src="https://chi01pap001files.storage.live.com/y4mK9VlB_cWLjYZ-RMixf0tnkWDOEsySIboe-UtyXoGkSN38L2iUgW4cfm4ru33sO850_G6xbqnE1fQ1VmFeIuJWc4NZKcOWcI0x6NW6by4-rCVi8btKN5Hqt54R23dSlNk5hhOVUEIsc6nYJF2ihz-1AMnxct_WzyxqXEAopufB_acOFW8a5OIrzMyH9MmjSKO?width=256&height=120&cropmode=none"></p>
<h2 id="追加-利用Hexo後臺來快速新增頁面或文章"><a href="#追加-利用Hexo後臺來快速新增頁面或文章" class="headerlink" title="[追加]利用Hexo後臺來快速新增頁面或文章"></a>[追加]利用Hexo後臺來快速新增頁面或文章</h2><p>今天查一查發現有後台可以安裝<br>挖屋~~~~簡直是一大福音<br>輸入指令安裝  </p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">npm install hexo<span class="token operator">-</span>admin <span class="token operator">--</span>save  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>重新重構與開啟伺服器 <code>hexo g</code> ⇒ <code>hexo s</code><br>打開<code>localhost:4000</code> 後面輸入 admin 進入管理後台，就會看到這樣的頁面  </p>
<p><img data-src="https://chi01pap001files.storage.live.com/y4m6t5lwQPLeYwvheAsHrOEHdnJDvfl0c0F_h5yuFzqA519FHGGLzP7wzctJ4tWl-gKQVjsmRL_fTPQZfF-lkmpGSk1ElGcFRl91NAVboiaUtF8aJ_5SBTB7FcXnFt0aLhgJsASoM9qihet4CBavi-X-4oSRL7ygPu1IBOAk1-G-b0e78pNOTA5C_avI3hXqGtM?width=660&height=406&cropmode=none"></p>
<p>哦耶，這邊就可以更整潔的去組織文章與頁面囉!<br>也會同步更新到 VS 編輯器裡的檔案<br>是不是很讚呢!<br>明天慢慢把東西搬過去吧!  </p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>到部署步驟的總結，要會的指令大概四招吧  </p>
<pre><code class="powershell">hexo cl     //建構檔案清理
hexo g      //檔案重構
hexo s      //本機在進行修改的時候開的伺服器，如果要發布就不用打了
hexo d      //發布到指定地方，要先建置好部署步驟哦
</code></pre>
<p>安裝下來，發現自己要去學習的東西更多了  </p>
<ul>
<li>npm的基礎指令  </li>
<li>git 指令   </li>
<li>markdown 語法   </li>
</ul>
<p>雖然還有很多想要的插件還沒安上…<br>就一步步來吧:D… </p>
<hr>
<blockquote>
<p>參考資料 :  </p>
<ol>
<li><a href="https://home.gamer.com.tw/artwork.php?sn=5138471">Hexo 簡易調教指南（一）：軟體安裝及網站建構 - lewopa47894的創作 - 巴哈姆特</a>  </li>
<li><a href="https://wcc723.github.io/git/2018/02/12/github-ssh-https/">[Github 中的 ssh、https 路徑有什麼差異？ - 如何設定 Github SSH 金鑰]</a>  </li>
<li><a href="https://ithelp.ithome.com.tw/articles/10227181">[SSH 金鑰：免密碼登入遠端主機、傳遞檔案]</a>  </li>
<li><a href="https://ed521.github.io/2019/08/hexo-admin/">[教學]我的第一篇 Hexo 文章：使用 hexo-admin 後台管理工具</a></li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>部落格</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - 宣告提升(I) - 我以為的以為</title>
    <url>/Frontend/JavaScript/JavaScript-Hoisting/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>宣告提升 (Hoisting) 在 JavaScript 中不得不知<br>究竟 JavaScript 搞了什麼鬼<br>導致你認為的值不是那個值捏 !<br>其實這跟 JavaScript 如何運作也有關係<br>不過先從最簡單的概念開始吧 ! :O</p>
<h2 id="何謂宣告提升？"><a href="#何謂宣告提升？" class="headerlink" title="何謂宣告提升？"></a>何謂宣告提升？</h2><p>其實我覺得很抽象<br>如果單看程式碼會不知道哪裡被提升<br>以及怎麼被提升？  </p>
<p>所謂的提升<br>其實是 JavaScript 底層運作的機制<br>必須了解執行環境 (Execution contexts) 跟 作用域 (Scope)<br>再根據作用域鏈 (Scope Chain) 來看的<br>不過關於這些東西慢慢地來說<br>可以先透過幾個例子來了解宣告提升    </p>
<h3 id="變數的宣告提升"><a href="#變數的宣告提升" class="headerlink" title="變數的宣告提升"></a>變數的宣告提升</h3><p>這邊暫不討論 ES6 中的 <code>let</code> 與 <code>const</code><br>以 ES5 的宣告變數 <code>var</code> 為例</p>
<p>基礎題</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span>
<span class="token operator">--</span><span class="token operator">-</span>
result <span class="token operator">:</span> <span class="token keyword">undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看成 : </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
a <span class="token operator">=</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>JavaScript 幫我們在最上層補上了一個定義變數 a<br>又因為 JavaScript 是一行行往下讀<br>所以當執行到 console.log(a)<br>a 是定義了但沒有值<br>所以是 <code>undefined</code>  </p>
<p>那有宣告跟沒宣告的差別？  </p>
<p>這樣什麼都沒有就會出錯</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token operator">--</span><span class="token operator">-</span>
result <span class="token operator">:</span> a is not defined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>所以通常變數的宣告會在最上面<br>除了版面不會太凌亂以外<br>也是避免說忘記宣告<br>尤其是在 function 裡頭  </p>
<h3 id="常見問題"><a href="#常見問題" class="headerlink" title="常見問題"></a>常見問題</h3><p>function 裡的變數如果未宣告會如何？<br>可以看下面的例子  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	a <span class="token operator">=</span> <span class="token number">30</span>
<span class="token punctuation">&#125;</span>
<span class="token operator">--</span><span class="token operator">-</span>
result <span class="token operator">:</span> <span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>起初我以為 a 會是 <code>is not defined</code><br>或是 <code>undefined</code><br>但是 test 執行時先把變數 a 給提升<br>並在函式內把 a 賦值 30<br>也就是這個 a 提升已經到 global 了   </p>
<blockquote>
<p>在 function 裡都沒有宣告<br>但有賦值，就會在 global 的地方宣告該變數<br>並且 <code>根據 Scope Chain</code> 往上找<br>不過一般來說不會建議沒有宣告就賦值。</p>
</blockquote>
<h3 id="function-的宣告提升"><a href="#function-的宣告提升" class="headerlink" title="function 的宣告提升"></a><code>function</code> 的宣告提升</h3><p>除了變數的提升<br>其實還有 function 也會提升  </p>
<p>函式陳述式</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>		
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token operator">--</span><span class="token operator">-</span>
result <span class="token operator">:</span> <span class="token number">123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>一般來說要 <strong>使用之前要先宣告</strong><br>但 function 可以先使用再宣告<br>因為會宣告提升    </p>
<p>可以看成把 <code>function</code> 放到呼叫之前<br>其他程式語言是沒這樣的<br>在 JavaScript 想呼叫隨時都可以呼叫 👌<br>我是覺得很奇妙<br>但一方面覺得這樣的設計在版面上可以更易讀   </p>
<p>函式表達式  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">--</span><span class="token operator">-</span>
result <span class="token operator">:</span> <span class="token number">123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>透過表達式宣告一個變數將 function 存起來<br>這邊的 function 是一個沒有名字的匿名函式<br>一般來說會這樣執行  </p>
<p>如果是宣告變數把函式存起來<br>提早先呼叫函式</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token operator">--</span><span class="token operator">-</span>
result <span class="token operator">:</span> test is not a <span class="token keyword">function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>咦！不是 function 隨 call 隨用嗎？<br>如果是函式表達式可以把整個分為兩塊  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> test<span class="token punctuation">;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也就是先宣告 test 再賦值<br>由此可知宣告提升並不會連賦值都一起提升  </p>
<p>再來看看有參數的函式呢？</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">&#125;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我知道！是 <code>undefined</code><br>因為 a 會做宣告提升<br>可以看成這樣 </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> a<span class="token punctuation">;</span> <span class="token comment">//undefined</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">&#125;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>結果不對，其實是 <code>1</code><br>這個 1 並不是來自函式的 <code>a=1</code><br>而是參數的 <code>1</code><br>由此可以知道函式裡有參數的話<br>其實參數也會做宣告提升    </p>
<p>至於提升的順序為何？<br>如何提升？<br>後面會再提到 :D</p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><ol>
<li><code>var</code> 會做宣告提升  </li>
<li><code>函式陳述式</code> 會做宣告提升  </li>
<li><code>函式表達式</code> 是屬於賦值 (等號右邊)，不會做宣告提升  </li>
<li>函式的 <code>參數</code> 也會做宣告提升</li>
</ol>
<p>這篇了解哪些會做宣告提升<br>並且知道賦值的值並不會一起提升  </p>
<hr>
<p>參考:</p>
<ul>
<li><a href="https://blog.techbridge.cc/2018/11/10/javascript-hoisting">我知道你懂 hoisting，可是你了解到多深？</a></li>
</ul>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>hoisting</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - 宣告提升(III) - let &amp; const 以及 TDZ</title>
    <url>/Frontend/JavaScript/JavaScript-Hoisting-III/</url>
    <content><![CDATA[<h2 id="let-amp-const-有宣告提升嗎"><a href="#let-amp-const-有宣告提升嗎" class="headerlink" title="let &amp; const 有宣告提升嗎?"></a>let &amp; const 有宣告提升嗎?</h2><ul>
<li><p>看起來沒有 hoisting</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span>
<span class="token operator">--</span><span class="token operator">-</span>
result <span class="token operator">:</span> Cannot access <span class="token string">'a'</span> before initialization<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>意思是 a 還未經初始化。<br>照 <code>var</code> 的宣告提升<br>下意識會覺得是 <code>undefined</code> 才對<br>但怎麼也不是 <code>undefined</code> ?  </p>
</li>
<li><p>實際上是有提升</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
	<span class="token keyword">let</span> a <span class="token operator">=</span><span class="token number">5</span>
<span class="token punctuation">&#125;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">--</span><span class="token operator">-</span>
result <span class="token operator">:</span> Cannot access <span class="token string">'a'</span> before initialization<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>照理來說在 <code>test</code> 沒找到 a<br>會往 global (Scope Chain) 去找<br>應該是 <code>10</code><br>但是這邊卻是沒有結果<br>代表 <code>let</code> 確實是有提升而且卡住了  </p>
</li>
</ul>
<p>換成 const 也一樣  </p>
<h2 id="TDZ-暫時性死區"><a href="#TDZ-暫時性死區" class="headerlink" title="TDZ - 暫時性死區"></a>TDZ - 暫時性死區</h2><p>TDZ = Temporal Dead Zone</p>
<p>在 <strong>「提升之後」</strong> 以及 <strong>「賦值之前」</strong> 這段「期間」，如果你存取它就會拋出錯誤，而這段期間就稱做是 <code>TDZ</code></p>
<blockquote>
<p>所以使用 let 或是 const 一開始就要賦值好，以免拋出錯誤  </p>
</blockquote>
<p>TDZ 的開始時間<br>進到 function 的那一刻即是 TDZ<br>的開始，直到賦值，才是 TDZ 結束。  </p>
<hr>
<p>實例解釋  </p>
<ul>
<li><p>TDZ 的起訖點  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment">//TDZ 🚩</span>
	<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">5</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment">// TDZ🪦</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>順序上的問題 : 非空間而是時間的順序  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">fucntion <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// TDZ 🚩</span>
	<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment">// TDZ 🪦</span>
	<span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">--</span><span class="token operator">-</span>
result <span class="token operator">:</span> Cannot access <span class="token string">'a'</span> before initialization<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<p>在執行 hello 的時候雖然有提升，但是仍在 a 的 <code>TDZ</code> 裡。</p>
<p>雖然印出值在宣告的下面<br>以執行(時間)的順序仍在 TDZ 之內。  </p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>let 和 const 提升後並不會初始化成 <code>undefined</code>，必須直到賦值之後才跳脫 TDZ 的範圍，在那之前試圖取值都會跳出錯誤。  </p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>hoisting</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 紀錄 ⟭ Unity UI Navigation ─ [尋找不見的按鈕]</title>
    <url>/Unity/Navgation/</url>
    <content><![CDATA[<p><img data-src="https://i.imgur.com/Vz6RmrN.png">  </p>
<span id="more"></span>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在做Unity + Fungus 小遊戲<br>發現 Fungus 裡的 Menu 選項不斷的亂跳<br>一直找不到問題，還找去原始碼…<br>想說是不是 Fungus 腳本有衝突<br>才知道自己連 Unity 的介面功能沒有到很熟<br>紀錄一下:D    </p>
<h2 id="控制-Fungus-Menu-選項"><a href="#控制-Fungus-Menu-選項" class="headerlink" title="控制 Fungus Menu 選項"></a>控制 Fungus Menu 選項</h2><p>Fungus 內建的Menu 可以新增很多個選項<br>並且有不同的分支可以讓對話更加多元<br>在控制時可以使用滑鼠與鍵盤上下左右鍵操作<br>能使用鍵盤控制是來自UI物件上的Navigation(導航)<br><img data-src="https://chi01pap001files.storage.live.com/y4mYWPYxomKMTvK8NkXSc7wGnefboAs8DPi3XzwVpZlIO3b-Rndt8PKkmqQuDSmVqQnyv6XgAlkRyy2Tiasz_D_rZlIFtDQtyjAwOr31k2Ye_2_2tN8zBbZcSpagvbipBpnPJqTEe_lUHlsti2r_hIdylS477eT9LurYr1TNFzZi2KUjf0JaPHb7Kx0Tfap5j1z?width=660&height=477&cropmode=none"></p>
<p>更往前想一點<br>那腳本是如何跟物件來互動的呢?<br>UI 能進行互動是來自 Unity 的 Event System<br>很常時候會看到腳本最上層掛這一個  </p>
<ul>
<li><code>using UnityEngine.EventSystem</code>   </li>
</ul>
<p>使我們可以在腳本中控制UI物件的事件<br>可以偵測<code>誰被按了?</code>、<code>誰被選擇了?</code> 等等的。</p>
<h2 id="Event-System"><a href="#Event-System" class="headerlink" title="Event System"></a>Event System</h2><p>一開始新增Canvas 或 UI 物件時<br>Unity 會幫我們自動生成 Event System 這個物件<br><img data-src="https://chi01pap001files.storage.live.com/y4mKFqurQ2X7h0jJ3Frd1kPO8ipgXgBIIrqYrRtGiNY4C1piCm1NuKKjM9AO3Nqagj6DyNOs6GXStvOutfie-uffMZUMLR4sDoJwm6q3zlfz6vEnl3N1xhZKZe8dvH-Fib6_OG9Qi1OBKnIYbGVpmIIZV5P8YyjuQRw0gVeTucDuK2rV5AV6EOYeUHRjTagVWbr?width=256&height=166&cropmode=none">  </p>
<p>仔細看一下有兩個腳本附在上面<br><img data-src="https://chi01pap001files.storage.live.com/y4mST6rqopQUEi6t6yz5eNJ6zUrND4Ljt8vOQMFh1c984h-H30bdnD4CLygkpxsGyfEOF1XORmpkFiplC5dVAk41QD3LsU7qGOsXDTdEDu65Ao_zDfCBb2QBIZoWzLProM1iVsYgR6ber8xbKpLo4wXY9oZg6JRTbUGa9J5cW3tJajUOJi7Bef-3ZGLu7IVozQa?width=468&height=660&cropmode=none"><br>分別是 <code>Event system</code> 與 <code>Standalone Input Moudle</code>  </p>
<table>
<thead>
<tr>
<th>腳本名稱</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>Event system</td>
<td>處理UI物件狀態，像是button 中的滑入、滑出、點擊、拖曳等等</td>
</tr>
<tr>
<td>Standalone Input Moudle</td>
<td>像是鍵盤或搖桿的輸入控制</td>
</tr>
</tbody></table>
<p>這次先專注於 Event system 腳本上<br>以下的三個設定 </p>
<table>
<thead>
<tr>
<th>功能</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>First Selected</td>
<td>預設被選定的UI物件</td>
</tr>
<tr>
<td>Send Navigation Event</td>
<td>是否開啟UI導航功能</td>
</tr>
<tr>
<td>Drag Threshold</td>
<td>拖曳事件靈敏度</td>
</tr>
</tbody></table>
<p>在我的專案中，遊戲操作皆來自鍵盤<br>因此需要使用到UI導航功能  </p>
<h2 id="遇到的問題"><a href="#遇到的問題" class="headerlink" title="遇到的問題"></a>遇到的問題</h2><p>只有三個選項，卻會超出選項格外<br><img data-src="https://i.imgur.com/v0hC0wV.gif"><br>甚至按不回來，由動圖可知選項超出後<br>不知道選到了誰    </p>
<h3 id="問題解決"><a href="#問題解決" class="headerlink" title="問題解決"></a>問題解決</h3><p>提到 Navigation，一般設定為 <code>auto</code><br>也就是按上下左右鍵會分別對應按鈕的位置<br>如果有多個按鈕都是設<code>auto</code>就會發生我這樣的事情<br>除了auto外，也有其他的方式</p>
<ul>
<li>none 不被導航影響</li>
<li>Horizontal</li>
<li>Vertical</li>
<li>Explicit 則是可以指定選擇跳選的對象  </li>
</ul>
<p><img data-src="https://i.imgur.com/Lubtgid.png"></p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h4><p>當然如果其他的Button是Deactivate狀態下，是不被影響的<br>物件停用狀態腳本自然也不會被執行<br>不過物件<code>Set Active</code>開開關關會使效能產生一個臨時高峰<br>會突然LAG一下，因此我是使用<code>Canvas Group</code>的alpha值控制按鈕的出現，但實際上功能還是運行的狀態<br>所以還是吃的到Navigation事件  </p>
<h4 id="我選到了誰"><a href="#我選到了誰" class="headerlink" title="我選到了誰?"></a><strong>我選到了誰?</strong></h4><p>這時候可以打開<code>Visualize</code>來看這些UI物件是怎麼連結的<br><img data-src="https://chi01pap001files.storage.live.com/y4mOdcNws2PW6q_sxLe5GYT3fa1Ty342iMadi9U1sHLMtA2Z1VHwPBP_iIFDhBznNzBEHBVHgsVFQSC2ut_euANWxu-otOVWFt1wlbQN1KoBFtmd2ORx930-8vW8JeH_81zE-5WLmpi2Jg8LVIFxOoDeL33Yp0UXJNk5tEW5UgX6dLcIlBbK8tMQCPUI9MYwe2U?width=660&height=421&cropmode=none"><br>我先把alpha值打開，看一下按鈕位置<br>搭啦!凌亂的連連看 (注意黃色線)<br><img data-src="https://chi01pap001files.storage.live.com/y4mxQaNp1uNlJFSzfiusdX7iG1ZaWaLCiKJ2l6WiLBBRVB_NEzB9pVX1nOvW-XeEqGIgScY1Dn54xIeBJTO84UeBaIfXDErzZ-QzjS22pFpLWwEfQQaHj-bhxCGpsDBH4obPA87l31JCD7-V4QR3A0GnuchQQBIvy3XwN5QOXSQxjYy8eTeTA8O5OwBHQVLBHAu?width=660&height=372&cropmode=none"><br>知道原因後，斷開連結就行了，把其他無關緊要的按鈕都選擇<code>none</code>就好了。  </p>
<blockquote>
<p>如果不選擇none的效果就可以知道navigation怎麼運作  </p>
</blockquote>
<p><img data-src="https://i.imgur.com/8IRNaIr.gif">  </p>
<blockquote>
<p>選擇none的效果後  </p>
</blockquote>
<p><img data-src="https://i.imgur.com/D5mGljJ.gif">  </p>
<p>看看這連連看都鎖在中間了(很糊!沒辦法Unity就這麼糊)<br><img data-src="https://i.imgur.com/CQwmNFb.png"></p>
<h2 id="延伸思考"><a href="#延伸思考" class="headerlink" title="延伸思考"></a>延伸思考</h2><p>當然不只Fungus的Menu可以使用<br>可以搭配出更多的UI複合式選單<br>尤其是使用搖桿的玩家<br>在操作上可以更加靈活  </p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>總之這種情形還真得要多多注意<br>當時找這個問題找了一個小時多<br>沒想到就這麼小問題QQ</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>UI</tag>
        <tag>Event System</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - 資料型態 (II) typeof</title>
    <url>/Frontend/JavaScript/JavaScript_typeof/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>typeof 是檢查類別的好幫手<br>一學才知道 typeof 只是小小咖<br>甚至在 stackoverflow 上有這麼一道題目  </p>
<p><a href="https://stackoverflow.com/questions/48270127/can-a-1-a-2-a-3-ever-evaluate-to-true">Can (a== 1 &amp;&amp; a ==2 &amp;&amp; a==3) ever evaluate to true?</a>  </p>
<p>這怎麼可能，<code>1==2==3</code> !?<br>先了解資料型態，再來了解這怎麼實現! </p>
<h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><p>typeof 可以知道值的型態</p>
<p>在 <code>Object</code>、<code>Array</code>、<code>Date</code> 以及  <strong><code>null</code></strong><br>都是 <code>Object</code><br><code>null</code> 是唯一的特例，下面會再提到  </p>
<p><img data-src="https://dsm01pap006files.storage.live.com/y4mGp4At_MjbSIvnrU9AEgFCzvUmROBsIV5v1tGQaDaJY9tAVO1bZcprgUpUOG9btna_AAvZABPjZsB6FFu0hfNETi8bKXOole-CacnFbpoEsUE68p4L8pBfY_r0ptOJloSxkvkTjf6OAJsQ-O7HsfCfLUyxel4VPf35BpS5ZgsEhmrvZo3-fw9IwrOHeoFaey9?width=625&height=390&cropmode=none" alt="typeof各類型"></p>
<ul>
<li>如何真的判斷是 <strong>真</strong> 陣列 ?<br>Array 會被算在 Object 範疇裡<br>想要知道真的陣列物件可以使用<br><strong><code>Array.isArray(value)</code></strong>  </li>
</ul>
<p>或者更精確的判別類型<br><code>Object.prototype.toString.call(value)</code><br>prototype 是 JavaScript 很重要的屬性<br>是實作的一種基底<br><code>toString</code> 會把印出物件的屬性轉為字串</p>
<h3 id="null-眾人皆知的漏洞"><a href="#null-眾人皆知的漏洞" class="headerlink" title="null 眾人皆知的漏洞"></a>null 眾人皆知的漏洞</h3><ul>
<li><strong>null</strong> 為什麼是 object ?<br>  是 javascript 程式設計上的錯誤<br>  底層實作的 <code>type tag</code> object 是 00<br>  但是 <code>null</code> 也是指向 0<br>  所以 <code>null</code> 也會被判別為 object<br>  是廣為人知的 bug  </li>
</ul>
<p>ECMAScript 原本要改規則<br><code>typeof null===null</code><br>但是被拒絕掉了 OAO  </p>
<h3 id="更確切一點的型態"><a href="#更確切一點的型態" class="headerlink" title="更確切一點的型態"></a>更確切一點的型態</h3><p><code>Object.prototype.toString.call(value)</code><br>不管是哪種型態，都可以更正確的被判斷<br><img data-src="https://dsm01pap006files.storage.live.com/y4mmkfwiKEgP7WgOuN5z81LDBLH4oukWL2ubilP96ARJyClsALcHwh_PvT7MPCtpr0_7dJdQqrI828TQkxB_PfjkIpYpPT3vtTXQ1wUyiGkYK0-cc3NO7nMuB8BTVjtV-kVkboovg7L3y0yIwoTaC95RrR_Bx9LgK-8N1bcq-fciqoSNozQVeSaJ7z3xgt67CIC?width=772&height=395&cropmode=none" alt="toString各類型"></p>
<h3 id="避免出錯的-undefined"><a href="#避免出錯的-undefined" class="headerlink" title="避免出錯的 undefined"></a>避免出錯的 undefined</h3><p>JavaScript 是單線程(非同步)的語言<br>也就是程式會一行行往下執行<br>但如果要印出沒有定義的變數<br>必定會錯誤</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token operator">--</span><span class="token operator">-</span>
result <span class="token operator">:</span> error <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>但如果 typeof 某個定義的變數<br>會是 undefined</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span>
<span class="token operator">--</span><span class="token operator">-</span>
result <span class="token operator">:</span> <span class="token keyword">undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>離奇的是用 var 也是 <code>undefined</code></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">var</span> a
<span class="token operator">--</span><span class="token operator">-</span>
result <span class="token operator">:</span> <span class="token keyword">undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>因為 var 會做宣告提升</p>
<ul>
<li>宣告提升  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//var a;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span>
<span class="token operator">--</span><span class="token operator">-</span>
result<span class="token operator">:</span> <span class="token keyword">undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
  系統會幫你補上未定義的變數<br>  但還是不會賦值</li>
</ul>
<hr>
<p>避免變數沒有定義的情況下出現錯誤<br>可以用 <code>typeof</code> 檢測  </p>
<blockquote>
<p>記住 typeof 回傳的值類別是 <strong>字串</strong><br>所以後面要是對比字串</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">!==</span><span class="token string">'undefined'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
	<span class="token comment">//dosomething...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>錯誤寫法<br>會報錯，因為 a 沒有宣告  </p>
<pre><code class="javascript">    if(a !== undefined)&#123;
        console.log(a)
        //dosomething...
    &#125;
</code></pre>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><ol>
<li><code>typeof</code> 回傳的類型是字串</li>
<li><code>typeof null</code> 會回傳值會是 <code>object</code>  </li>
<li><code>Object.prototype.toString.call()</code> 可以取得較正確的資料型態，包含 <code>null</code> 也會傳 <code>null</code>  </li>
</ol>
<p>原來如此，typeof 並不是萬能的<br>在查找 <code>Object.prototype.toString</code> 過程中<br>也認識到不同類型進行比較時<br>會轉型同類別再比較<br>Object type 的轉型會經過兩種規則  </p>
<ol>
<li>valueOf</li>
<li>toString</li>
</ol>
<p>之後要再深入研究這兩種的差別<br>以及各類別的比較規則!  </p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 筆記 ⟭ Sass 小技巧</title>
    <url>/Frontend/CSS/CSS-Sass-03-tips/</url>
    <content><![CDATA[<p>根據鐵人賽<a href="https://ithelp.ithome.com.tw/users/20040221/ironman/562">《30天掌握Sass語法》</a> 各篇筆記總結<br>在最後也建立一個屬於自己的 Sass template<br>當然我的 Sass 旅途還沒結束 !   </p>
<span id="more"></span>

<h2 id="sass-可以幫你算數"><a href="#sass-可以幫你算數" class="headerlink" title="sass 可以幫你算數"></a>sass 可以幫你算數</h2><p>可以讓 sass 算數學，編譯後自動幫我們算好，可以包含 px、%、em<br>pure css 雖然也可以算數 (calc) 但是對效能不好。</p>
<blockquote>
<p>sass 的 px 跟 em 不能混算</p>
</blockquote>
<h2 id="檔案編譯規則"><a href="#檔案編譯規則" class="headerlink" title="檔案編譯規則"></a>檔案編譯規則</h2><p>加 <code>_</code> 底線是不轉換成 css 檔的引入檔，可以放<code>_variable</code> 等等檔案<br>引入的時候不用加底線。  </p>
<p>也可以把各頁獨立開來，或是各部件分開引入</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">@import reset
@import layout
@import index
@import page<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>最上方就是放 reset ，其餘樣式往後覆蓋  </p>
<h2 id="extend-v-s-mixin"><a href="#extend-v-s-mixin" class="headerlink" title="@extend v.s @mixin"></a>@extend v.s @mixin</h2><p>@extend 就是模板，不能帶參數，但可以把相同的樣式給群組起來，對檔案體積較小<br>@mixin 就像 copy paste ，把同樣的東西複製貼上</p>
<p>如果有個別客製化的參數可以使用 @mixin</p>
<h2 id="節省寫前綴-prefix"><a href="#節省寫前綴-prefix" class="headerlink" title="節省寫前綴 prefix"></a>節省寫前綴 prefix</h2><p>很多人是使用 plugin compass 產生，但是這套好像太久沒更新<br>後來直接搭上 PostCSS 的順風車，幫你內建好<br>不過也是可以自己寫</p>
<p>用 @mixin 與 @each 產生</p>
<ol>
<li>有 property name</li>
<li>value</li>
<li>prefix : 是一個 list，可以插入想要的 prefix</li>
</ol>
<p>前面兩者是 css 表達式，可以寫成 map 的形式，讓 prefix 可以一次寫多個  </p>
<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$property</span></span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token property">key</span><span class="token punctuation">:</span>value<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>MDN 列出常見的 prefix</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">-webkit-transition</span><span class="token punctuation">:</span> all 4s ease<span class="token punctuation">;</span>
<span class="token property">-moz-transition</span><span class="token punctuation">:</span> all 4s ease<span class="token punctuation">;</span>
<span class="token property">-ms-transition</span><span class="token punctuation">:</span> all 4s ease<span class="token punctuation">;</span>
<span class="token property">-o-transition</span><span class="token punctuation">:</span> all 4s ease<span class="token punctuation">;</span>
<span class="token property">transition</span><span class="token punctuation">:</span> all 4s ease<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>改成 @mixin ，單個 property</p>
<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@mixin</span> <span class="token function">vendor-prefix</span><span class="token punctuation">(</span><span class="token variable">$property</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">,</span><span class="token property"><span class="token variable">$prefixes</span></span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">@each</span> <span class="token variable">$prefix</span> in <span class="token variable">$prefixes</span>
		#<span class="token punctuation">&#123;</span><span class="token string">'-'</span>+<span class="token variable">$prefix</span>+<span class="token string">'-'</span>+<span class="token variable">$property</span><span class="token punctuation">&#125;</span> <span class="token punctuation">:</span> <span class="token variable">$value</span>

	<span class="token comment">// 補上原本的</span>
	<span class="token property"><span class="token variable">#&#123;$property&#125;</span></span> <span class="token punctuation">:</span> <span class="token variable">$value</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>一次寫多個 property，把前面的 property 跟 value 合併起來</p>
<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@mixin</span> <span class="token function">vendor-prefix</span><span class="token punctuation">(</span><span class="token variable">$declarations</span><span class="token punctuation">,</span><span class="token property"><span class="token variable">$prefixes</span></span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">@each</span> <span class="token variable">$property</span><span class="token punctuation">,</span><span class="token variable">$value</span> in <span class="token variable">$declarations</span>
		<span class="token keyword">@each</span> <span class="token variable">$prefix</span> in <span class="token variable">$prefixes</span>
			#<span class="token punctuation">&#123;</span><span class="token string">'-'</span>+<span class="token variable">$prefix</span>+<span class="token string">'-'</span>+<span class="token variable">$property</span><span class="token punctuation">&#125;</span> <span class="token punctuation">:</span> <span class="token variable">$value</span>
	
	<span class="token property"><span class="token variable">#&#123;$property&#125;</span></span> <span class="token punctuation">:</span> <span class="token variable">$value</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>參考 :<br><a href="https://css-tricks.com/snippets/sass/mixin-prefix-properties/">Mixin to Prefix Properties | CSS-Tricks - CSS-Tricks</a></p>
<h2 id="RWD-寫法"><a href="#RWD-寫法" class="headerlink" title="RWD 寫法"></a>RWD 寫法</h2><p>寫法有兩種</p>
<ol>
<li>傳統 : 寫在最上方分成不同的 breakpoint 檔案</li>
<li>@content : 用 @include 方式插在元件上繼續寫</li>
</ol>
<h3 id="寫一個-media-就好，元素屬性都另外再寫"><a href="#寫一個-media-就好，元素屬性都另外再寫" class="headerlink" title="寫一個 media 就好，元素屬性都另外再寫"></a>寫一個 media 就好，元素屬性都另外再寫</h3><p>@media query 只有一個，一次都寫在裡面</p>
<ul>
<li>pc.sass<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss">@media screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 1024px<span class="token punctuation">)</span>
	.box
		~~~~~~~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>pad.sass<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss">@media screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span>
	.box
		~~~~~~~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="統一生成斷點，插在元素裡面寫"><a href="#統一生成斷點，插在元素裡面寫" class="headerlink" title="統一生成斷點，插在元素裡面寫"></a>統一生成斷點，插在元素裡面寫</h3><p>mixin</p>
<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@mixin</span> <span class="token function">breakpoint</span><span class="token punctuation">(</span><span class="token variable">$point</span><span class="token punctuation">)</span>
	<span class="token keyword">@if</span> <span class="token variable">$point</span> <span class="token operator">==</span> pc
		@media screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 1024px<span class="token punctuation">)</span>
			<span class="token keyword">@content</span>
	<span class="token keyword">@else if</span> <span class="token variable">$point</span> <span class="token operator">==</span> pad
		@media screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span>
			<span class="token keyword">@content</span>
	<span class="token keyword">@else if</span> <span class="token variable">$point</span> <span class="token operator">==</span> mobile
		@media screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 320px<span class="token punctuation">)</span>
			<span class="token keyword">@content</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用</p>
<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss">.box
	<span class="token property">width</span><span class="token punctuation">:</span> 500px
	<span class="token property">height</span><span class="token punctuation">:</span> 500px
	<span class="token keyword">@include</span> <span class="token function">breakpoint</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span>
		<span class="token property">width</span><span class="token punctuation">:</span> 1000px
		<span class="token property">height</span><span class="token punctuation">:</span> 1000px
	<span class="token keyword">@include</span> <span class="token function">breakpoint</span><span class="token punctuation">(</span>pad<span class="token punctuation">)</span>
		<span class="token property">width</span><span class="token punctuation">:</span> 300px
		<span class="token property">height</span><span class="token punctuation">:</span> 300px<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>優點 : 撰寫上比較方便，因為是寫在元素裡面</li>
<li>缺點 : 會一直重複生成 @media 對檔案大小不是很友善，大專案如果有追求效能不太適合</li>
</ul>
<h2 id="sass-檔案結構"><a href="#sass-檔案結構" class="headerlink" title="sass 檔案結構"></a>sass 檔案結構</h2><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@import</span> mixin 
<span class="token keyword">@import</span> reset
<span class="token keyword">@import</span> layout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>mixin 放一些主要要引入的變數，mixin 沒呼叫就不會產生任何東西<br>可以在一開始引入</p>
<p>參考這份結構 <a href="https://gist.github.com/AdamMarsden/7b85e8d5bdb5bef969a0">Sass Architecture Structure</a></p>
<ul>
<li>vendor : 其他的 plugin。boostrap 等等的第三方套件。  </li>
<li>utils : 基本的 <code>__variable</code>、<code>__mixin</code>、<code>__function</code></li>
<li>base : css reset 或是 文字規範 (h1~h6)</li>
<li>component : 小零件，像是按鈕、</li>
<li>layout : 每一頁面共同元素。導覽列、網頁底部、</li>
<li>pages : css 組裝，不同頁面有用到的元素透過 layout 、 component 組合  <pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@import</span> <span class="token string">'utils/variable'</span>
<span class="token keyword">@import</span> <span class="token string">'utils/mixin'</span>
<span class="token keyword">@import</span> <span class="token string">'base/reset'</span>
<span class="token keyword">@import</span> <span class="token string">'component/button'</span>
<span class="token keyword">@import</span> <span class="token string">'layout/navbar'</span>
<span class="token keyword">@import</span> <span class="token string">'pages/index'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="color-好幫手-draken-amp-lignten"><a href="#color-好幫手-draken-amp-lignten" class="headerlink" title="color 好幫手 draken &amp; lignten"></a>color 好幫手 draken &amp; lignten</h2><p>有時候需要建置顏色資料庫<br>相同色系但有不同深淺或是些微變化<br>不用一直複製新的色票<br>可以透過 sass 內建函式來幫我們達成  </p>
<p>sass 內建可以調整 <strong>明暗、飽和(saturate) 或 色象環 (hue)</strong> 等等的功能<br>而且可以用組合式的<br>如果很熟悉 hsl 的方法就知道運作模式 <code>hsl(&lt;hue 色相環&gt;,飽和度,亮度)</code></p>
<ul>
<li>darken &amp; lignten : 值 0 ~ 50，想降低亮度就用 darken</li>
<li>desaturate &amp; saturate :  根據原本色彩的飽和去做疊加，如果原本色彩的飽和本身就很高，再增加飽和也沒意義  </li>
<li>adjust_hue  : 以目前色環的顏色方向再去疊加<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.box</span><span class="token punctuation">&#123;</span>
	<span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
	<span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
	<span class="token property">background</span> <span class="token punctuation">:</span> adjust_<span class="token function">hue</span><span class="token punctuation">(</span><span class="token function">desaturate</span><span class="token punctuation">(</span><span class="token function">lighten</span><span class="token punctuation">(</span>blue<span class="token punctuation">,</span>10<span class="token punctuation">)</span><span class="token punctuation">,</span>10<span class="token punctuation">)</span><span class="token punctuation">,</span>120<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
根據步驟來說  </li>
</ul>
<ol>
<li>被調整的是 藍色，亮度調整 10 %</li>
<li>降低飽和 10%</li>
<li>色相環轉動 120 度，藍色是 240 ，再轉 120 就到紅色</li>
</ol>
<p>最後結果會是 hsl(0,90%,60%)<br>想快速產生也可以用 <a href="https://sassme.jim-nielsen.com/">SassMe</a></p>
<h3 id="建立色彩資料庫"><a href="#建立色彩資料庫" class="headerlink" title="建立色彩資料庫"></a>建立色彩資料庫</h3><p>像 tailwindcss 有很豐富的顏色，透過不同數值調整參數<br>我們也可以使用 @for 迴圈來變化，並且使用在 html 加上 class 直接套用<br>使用上很方便，但檔案就會越來越肥 QQ<br>這時候就會選擇 boostrap 或是 tailwindcss :D…  </p>
<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$primary</span></span> <span class="token punctuation">:</span> blue
<span class="token keyword">@for</span> <span class="token variable">$i</span> <span class="token keyword">from</span> 1 <span class="token keyword">through</span> 4
  .primary-d-#<span class="token punctuation">&#123;</span><span class="token variable">$i</span>*10<span class="token punctuation">&#125;</span>
    <span class="token property">background</span> <span class="token punctuation">:</span> <span class="token function">darken</span><span class="token punctuation">(</span><span class="token variable">$primary</span> <span class="token punctuation">,</span><span class="token variable">$i</span> <span class="token operator">*</span> 10<span class="token punctuation">)</span>
  .primary-l-#<span class="token punctuation">&#123;</span><span class="token variable">$i</span>*10<span class="token punctuation">&#125;</span>
    <span class="token property">background</span> <span class="token punctuation">:</span> <span class="token function">lighten</span><span class="token punctuation">(</span><span class="token variable">$primary</span> <span class="token punctuation">,</span><span class="token variable">$i</span> <span class="token operator">*</span> 10<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="sass-合作問題"><a href="#sass-合作問題" class="headerlink" title="sass 合作問題"></a>sass 合作問題</h2><ul>
<li>如果合作人不會寫 sass ?<br>  用 scss 寫，scss 跟一般 css 檔案沒什麼差別，把 .css 改成 .scss。<br>  要使用檔案 import 進來就 ok 的。</li>
<li>共用樣式或測試<br>  做成 @extend 引入做測試</li>
</ul>
<h2 id="設計網站版本"><a href="#設計網站版本" class="headerlink" title="設計網站版本"></a>設計網站版本</h2><p>如果網站中不同頁面有不同的樣式，傳統上會準備兩分 .css 檔，透過後者覆蓋前者的特性，把預設的蓋掉。  </p>
<p>比如說不同的電商網站根據不同種類的網頁套用不同樣式顏色。<br><code>food.css</code>、<code>clothes.css</code> 等等  </p>
<ul>
<li>優點 : 分檔案好管理</li>
<li>缺點 : <ol>
<li>多發出 request</li>
<li>CSS 結構很胖</li>
</ol>
</li>
</ul>
<h3 id="nth-amp-index"><a href="#nth-amp-index" class="headerlink" title="nth &amp; index"></a>nth &amp; index</h3><p>index 找到第幾位，對應 nth 來應用</p>
<p>這邊以四季為例</p>
<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$season</span></span><span class="token punctuation">:</span> spring <span class="token punctuation">,</span> summer <span class="token punctuation">,</span> fall <span class="token punctuation">,</span> winter
<span class="token property"><span class="token variable">$primary-color</span></span> <span class="token punctuation">:</span> green <span class="token punctuation">,</span> yellow <span class="token punctuation">,</span> orange <span class="token punctuation">,</span> grey
<span class="token property"><span class="token variable">$secondary-color</span></span><span class="token punctuation">:</span> #fff <span class="token punctuation">,</span> #05f <span class="token punctuation">,</span> #00f <span class="token punctuation">,</span> #000
<span class="token property"><span class="token variable">$now-season</span></span> <span class="token punctuation">:</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token variable">$season</span><span class="token punctuation">,</span>spring<span class="token punctuation">)</span>

<span class="token comment">//-------------</span>
.navbar
  <span class="token property">width</span><span class="token punctuation">:</span> 100%
  <span class="token property">height</span><span class="token punctuation">:</span> 100px
  <span class="token property">font-size</span><span class="token punctuation">:</span> 60px
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">nth</span><span class="token punctuation">(</span><span class="token variable">$primary-color</span><span class="token punctuation">,</span><span class="token variable">$now-season</span><span class="token punctuation">)</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">nth</span><span class="token punctuation">(</span><span class="token variable">$secondary-color</span><span class="token punctuation">,</span><span class="token variable">$now-season</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="使用-if-提升-Mixin-靈活度"><a href="#使用-if-提升-Mixin-靈活度" class="headerlink" title="使用 @if 提升 @Mixin 靈活度"></a>使用 @if 提升 @Mixin 靈活度</h2><p>產生簡單圖案，降低 request 請求數量<br>不用再另外做圖，避免不同尺寸的裝置造成失真  </p>
<ul>
<li><p>生成圓形</p>
<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token placeholder selector">%border-radius</span>
  <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%

<span class="token keyword">@mixin</span> <span class="token function">circle</span><span class="token punctuation">(</span><span class="token variable">$size</span><span class="token punctuation">,</span><span class="token variable">$color</span><span class="token punctuation">)</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">$size</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">$size</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">$color</span>
  <span class="token keyword">@extend</span> <span class="token placeholder selector">%border-radius</span>

.box
	+<span class="token function">circle</span><span class="token punctuation">(</span>50px<span class="token punctuation">,</span>red<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>生成三角形</p>
<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@mixin</span> <span class="token function">triangle</span><span class="token punctuation">(</span><span class="token variable">$size</span><span class="token punctuation">,</span><span class="token variable">$pos</span><span class="token punctuation">,</span><span class="token variable">$color</span><span class="token punctuation">,</span><span class="token property"><span class="token variable">$ratio</span></span> <span class="token punctuation">:</span>1<span class="token punctuation">)</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 0
  <span class="token property">height</span><span class="token punctuation">:</span> 0
  <span class="token keyword">@if</span> <span class="token variable">$pos</span> <span class="token operator">==</span> top
    <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token variable">$size</span>*<span class="token variable">$ratio</span> solid <span class="token variable">$color</span>
    <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token variable">$size</span>/2 solid transparent
    <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token variable">$size</span>/2 solid transparent
  <span class="token keyword">@else if</span> <span class="token variable">$pos</span> <span class="token operator">==</span> top-left
    <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token variable">$size</span> solid <span class="token variable">$color</span>
    <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token variable">$size</span> solid transparent
  <span class="token keyword">@else if</span> <span class="token variable">$pos</span> <span class="token operator">==</span> top-right
    <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token variable">$size</span> solid <span class="token variable">$color</span>
    <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token variable">$size</span> solid transparent
  <span class="token keyword">@else if</span> <span class="token variable">$pos</span> <span class="token operator">==</span> bottom
    <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token variable">$size</span>*<span class="token variable">$ratio</span> solid <span class="token variable">$color</span>
    <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token variable">$size</span>/2 solid transparent
    <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token variable">$size</span>/2 solid transparent
  <span class="token keyword">@else if</span> <span class="token variable">$pos</span> <span class="token operator">==</span> bottom-left
    <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token variable">$size</span> solid <span class="token variable">$color</span>
    <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token variable">$size</span> solid transparent
  <span class="token keyword">@else if</span> <span class="token variable">$pos</span> <span class="token operator">==</span> bottom-right
    <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token variable">$size</span> solid <span class="token variable">$color</span>
    <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token variable">$size</span> solid transparent
  <span class="token keyword">@else if</span> <span class="token variable">$pos</span> <span class="token operator">==</span> right
    <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token variable">$size</span>/2 solid transparent 
    <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token variable">$size</span>*<span class="token variable">$ratio</span> solid <span class="token variable">$color</span>
    <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token variable">$size</span>/2 solid transparent
  <span class="token keyword">@else if</span> <span class="token variable">$pos</span> <span class="token operator">==</span> left
    <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token variable">$size</span>/2 solid transparent 
    <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token variable">$size</span>*<span class="token variable">$ratio</span> solid <span class="token variable">$color</span>
    <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token variable">$size</span>/2 solid transparent
<span class="token comment">// ------------------------</span>
    
.box
  +<span class="token function">triangle</span><span class="token punctuation">(</span>100px<span class="token punctuation">,</span>top-left<span class="token punctuation">,</span>red<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>參考 : <a href="https://css-tricks.com/snippets/css/css-triangle/">CSS Triangle | CSS-Tricks - CSS-Tricks</a>  </p>
</li>
</ul>
<h3 id="應用"><a href="#應用" class="headerlink" title="應用"></a>應用</h3><ol>
<li><a href="https://codepen.io/shan473/pen/YzYwjZR?editors=0100">對話框</a>，搭配上面的三角形 @mixin   <pre class="line-numbers language-scss" data-language="scss"><code class="language-scss">.box
 <span class="token property">width</span><span class="token punctuation">:</span> 100px
 <span class="token property">height</span><span class="token punctuation">:</span> 100px
 <span class="token property">background-color</span><span class="token punctuation">:</span> #ccc
 <span class="token property">position</span><span class="token punctuation">:</span> relative
 <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px
 &amp;<span class="token punctuation">:</span>before
   <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span>
   <span class="token property">position</span><span class="token punctuation">:</span> absolute
   <span class="token property">top</span><span class="token punctuation">:</span>100%
   <span class="token property">left</span><span class="token punctuation">:</span>30%
   +<span class="token function">triangle</span><span class="token punctuation">(</span>20px<span class="token punctuation">,</span>bottom<span class="token punctuation">,</span>#ccc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><a href="https://codepen.io/shan473/pen/YzYwjZR?editors=0100">麵包屑 (breadcrumb)</a> : <pre class="line-numbers language-scss" data-language="scss"><code class="language-scss">body
  <span class="token property">background-color</span><span class="token punctuation">:</span> #000
.breadcrumb
  <span class="token property">display</span><span class="token punctuation">:</span> flex
  <span class="token property">justify-content</span><span class="token punctuation">:</span> center
  <span class="token property">align-items</span><span class="token punctuation">:</span> center
  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap
  <span class="token property">padding</span><span class="token punctuation">:</span> 20px
  li
    <span class="token property">list-style</span><span class="token punctuation">:</span> none
    <span class="token property">background-color</span><span class="token punctuation">:</span> #054
    <span class="token property">padding</span><span class="token punctuation">:</span> 10px 20px 10px 40px 
    <span class="token property">position</span><span class="token punctuation">:</span> relative
    &amp; <span class="token operator">+</span> li
      <span class="token property">margin-left</span><span class="token punctuation">:</span> 40px
    &amp;<span class="token punctuation">:</span>before
        <span class="token property">left</span><span class="token punctuation">:</span> 0%
        +<span class="token function">triangle</span><span class="token punctuation">(</span>40px<span class="token punctuation">,</span>right<span class="token punctuation">,</span>#000<span class="token punctuation">)</span>
    &amp;<span class="token punctuation">:</span>after
        <span class="token property">left</span><span class="token punctuation">:</span> 100%
        +<span class="token function">triangle</span><span class="token punctuation">(</span>40px<span class="token punctuation">,</span>right<span class="token punctuation">,</span>#054<span class="token punctuation">)</span>
    &amp;<span class="token punctuation">:</span><span class="token property">first-child</span><span class="token punctuation">:</span>before
      <span class="token property">all</span><span class="token punctuation">:</span> initial
    &amp;<span class="token punctuation">:</span><span class="token property">last-child</span><span class="token punctuation">:</span>after
      <span class="token property">all</span><span class="token punctuation">:</span> initial
    a
      <span class="token property">text-decoration</span><span class="token punctuation">:</span> none
      <span class="token property">margin-left</span><span class="token punctuation">:</span> 20px
      <span class="token property">color</span><span class="token punctuation">:</span> #fff
      <span class="token property">font-weight</span><span class="token punctuation">:</span> bold
    &amp;<span class="token punctuation">:</span>before<span class="token punctuation">,</span>&amp;<span class="token punctuation">:</span>after
      <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span>
      <span class="token property">position</span><span class="token punctuation">:</span> absolute
      <span class="token property">top</span><span class="token punctuation">:</span> 0
      <span class="token property">bottom</span><span class="token punctuation">:</span> 0
      <span class="token property">margin</span><span class="token punctuation">:</span> auto
    &amp;<span class="token punctuation">:</span>first-child
      <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px 0px 0 10px 
      <span class="token property">padding-left</span><span class="token punctuation">:</span> 10px
    &amp;<span class="token punctuation">:</span>last-child
      <span class="token property">border-radius</span><span class="token punctuation">:</span> 0 10px 10px 0
      <span class="token property">padding-right</span><span class="token punctuation">:</span> 20px<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h2 id="for-random"><a href="#for-random" class="headerlink" title="@for+random()"></a>@for+random()</h2><p><a href="https://codepen.io/shan473/pen/WNdrLWy?editors=0100">balls</a><br>利用 shadow 來產生分身，有點像 texture  把東西蓋上去做整體位移<br>用 function 生成隨機的變數，在疊加上去做 box-shadow 的位移</p>
<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@function</span> <span class="token function">randoms</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">)</span>
  <span class="token property"><span class="token variable">$value</span></span><span class="token punctuation">:</span> #<span class="token punctuation">&#123;</span><span class="token function">random</span><span class="token punctuation">(</span>2000<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>+px #<span class="token punctuation">&#123;</span><span class="token function">random</span><span class="token punctuation">(</span>2000<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>+px #fff
  <span class="token keyword">@for</span> <span class="token variable">$i</span> <span class="token keyword">from</span> 1 <span class="token keyword">through</span> <span class="token variable">$n</span>
    <span class="token property"><span class="token variable">$value</span></span> <span class="token punctuation">:</span>  <span class="token variable">#&#123;$value&#125;</span> <span class="token punctuation">,</span> #<span class="token punctuation">&#123;</span><span class="token function">random</span><span class="token punctuation">(</span>2000<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>+px #<span class="token punctuation">&#123;</span><span class="token function">random</span><span class="token punctuation">(</span>2000<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>+px #fff
  <span class="token keyword">@return</span> <span class="token variable">$value</span>

body
  <span class="token property">background-color</span><span class="token punctuation">:</span> #000
.ball
  <span class="token property">position</span><span class="token punctuation">:</span> absolute
  <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%
.ball-big
  <span class="token property">height</span><span class="token punctuation">:</span> 10px
  <span class="token property">width</span><span class="token punctuation">:</span> 10px
  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token function">randoms</span><span class="token punctuation">(</span>300<span class="token punctuation">)</span>
  <span class="token property">animation</span> <span class="token punctuation">:</span> drop 50s infinite linear
.ball-medium
  <span class="token property">height</span><span class="token punctuation">:</span> 5px
  <span class="token property">width</span><span class="token punctuation">:</span> 5px
  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token function">randoms</span><span class="token punctuation">(</span>500<span class="token punctuation">)</span>
  <span class="token property">animation</span> <span class="token punctuation">:</span> drop 15s infinite linear
.ball-small
  <span class="token property">height</span><span class="token punctuation">:</span> 2px
  <span class="token property">width</span><span class="token punctuation">:</span> 2px
  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token function">randoms</span><span class="token punctuation">(</span>700<span class="token punctuation">)</span>
  <span class="token property">animation</span> <span class="token punctuation">:</span> drop 10s infinite linear

@keyframes drop
  0%
  100%
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>-2000px<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Sass開發流程設計"><a href="#Sass開發流程設計" class="headerlink" title="Sass開發流程設計"></a>Sass開發流程設計</h2><h3 id="切圖、規劃Layout"><a href="#切圖、規劃Layout" class="headerlink" title="切圖、規劃Layout"></a>切圖、規劃Layout</h3><p>美術 </p>
<ol>
<li>互動部分是否有設計出來 (hover、dropdown 等等)</li>
<li>背景圖要切透明 (避免不規則形狀)</li>
<li>字體字型，如果不是預設 web font 有無替代的</li>
</ol>
<p>事先規劃 : </p>
<ul>
<li>layout 如何合作設計 ? 共同的元素 ?</li>
<li>預先規劃 html 架構</li>
<li>畫面手寫輔助思考</li>
<li>圖片可以分成 png &amp; jpg (或者 svg)</li>
</ul>
<h3 id="結構規劃、全域變數設定"><a href="#結構規劃、全域變數設定" class="headerlink" title="結構規劃、全域變數設定"></a>結構規劃、全域變數設定</h3><p>變數名稱 跟 內容不要有關<br>像是顏色的變數，不要以顏色種類命名<br>一般來說有設計稿有主色、次級色或是顏色的用途  </p>
<ul>
<li>$red : <code>#ff0000</code> ——(👎)</li>
<li>$primary-color : <code>#ff0000</code> ——(👍)</li>
<li>$highlight-color: <code>#ff0000</code> ——(👍)</li>
</ul>
<h3 id="網頁排版流程"><a href="#網頁排版流程" class="headerlink" title="網頁排版流程"></a>網頁排版流程</h3><ul>
<li>reset css</li>
<li>clearfix 預先寫好  <pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token placeholder selector">%clearfix</span>
  &amp;<span class="token punctuation">:</span><span class="token punctuation">:</span>after
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span>
    <span class="token property">clear</span><span class="token punctuation">:</span> both
    <span class="token property">display</span><span class="token punctuation">:</span> block<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>background 使用 @mixin 節省路徑的寫法<br>  預防還有複合路徑，我把額外的 path 寫在最後面<br>  還有不同的格式，所以就多寫 format，沒有把檔名寫死<br>  根路徑就可以按照想要的圖庫來放  <pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$root</span></span> <span class="token punctuation">:</span> <span class="token string">'../img/'</span>
<span class="token keyword">@mixin</span> <span class="token url">img-url</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token variable">$format</span><span class="token punctuation">,</span><span class="token property"><span class="token variable">$path</span></span><span class="token punctuation">:</span> <span class="token null keyword">null</span><span class="token punctuation">)</span>
  <span class="token property"><span class="token variable">$file</span></span> <span class="token punctuation">:</span> #<span class="token punctuation">&#123;</span><span class="token variable">$name</span>+<span class="token string">'.'</span>+<span class="token variable">$format</span><span class="token punctuation">&#125;</span>
  <span class="token property"><span class="token variable">$fullpath</span></span> <span class="token punctuation">:</span> <span class="token null keyword">null</span>
  <span class="token keyword">@if</span> <span class="token variable">$path</span>
    <span class="token property"><span class="token variable">$fullpath</span></span> <span class="token punctuation">:</span> #<span class="token punctuation">&#123;</span><span class="token variable">$root</span>+<span class="token variable">$path</span>+ <span class="token string">'/'</span>+<span class="token variable">$file</span><span class="token punctuation">&#125;</span>
  <span class="token keyword">@else</span>
    <span class="token property"><span class="token variable">$fullpath</span></span> <span class="token punctuation">:</span>#<span class="token punctuation">&#123;</span><span class="token variable">$root</span>+<span class="token variable">$file</span><span class="token punctuation">&#125;</span>
  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url</span><span class="token punctuation">(</span><span class="token variable">#&#123;$fullpath&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>prefix :  瀏覽器前綴[[#節省寫前綴 prefix]]，用套件或是自己用 @mixin 寫<br>  postcss 具有 autoprefix，或是 compass</li>
</ul>
<p>大部分共用的變數</p>
<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$text-color</span></span> <span class="token punctuation">:</span> 主體文字色彩
<span class="token property"><span class="token variable">$link-color</span></span> <span class="token punctuation">:</span> 連結字顏色
<span class="token property"><span class="token variable">$link-hover-color</span></span> <span class="token punctuation">:</span> 連結字 hover 顏色
<span class="token property"><span class="token variable">$line-hiehgt</span></span> <span class="token punctuation">:</span> 字距航高
<span class="token property"><span class="token variable">$container-width</span></span> <span class="token punctuation">:</span> 區塊寬度
<span class="token property"><span class="token variable">$font-style</span></span> <span class="token punctuation">:</span> 字體<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在切版中把重複性高的獨立出來  </p>
<h3 id="整合自己的-Sass-資料夾"><a href="#整合自己的-Sass-資料夾" class="headerlink" title="整合自己的 Sass 資料夾"></a>整合自己的 Sass 資料夾</h3><p><a href="https://github.com/meitung473/Sass-template">我的 sass 資料夾</a><br>資料夾結構  </p>
<pre class="line-numbers language-none"><code class="language-none">|- src
    |- img
    |- sass
        |- base : css reset、typography
        |- component : button、link...
        |- layout : 通用版面，header 、 navgation、footer
        |- pages : 個別頁
        |- utils : variable、mixin、extend 等等
        |- vendors : 放 sass-plugin
        |- section (目前沒有) :  頁面區塊，hero、cta
    - app.sass
    - index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>每個資料夾都有 all.sass 整合資料夾內的 @import </p>
<ul>
<li>base<br>  裡面已有 meyer 版本的 reset.css</li>
<li>utils/mixin<ol>
<li>media query breakpoint  </li>
<li>img-url background-image 快速匯入<br>參數 <code>(&lt;檔案名&gt;,&lt;副檔名&gt;,&lt;複合路徑&gt;(optional))</code><br>裡面的 <code>$root</code> 可以更換圖片根目錄路徑  </li>
<li>prefix 手動添加瀏覽器前綴<br>參數 <code>(&lt;css-property&gt;,&lt;value&gt;,&lt;prefix list&gt;)</code>  </li>
<li>基礎形狀圓形、三角形<br>圓形參數 <code>(&lt;size&gt;,&lt;color&gt;)</code><br>三角形參數 <code>(&lt;size&gt;,&lt;三角形位置&gt;,&lt;color&gt;,&lt;預設 1 是等腰，86.6% 為正三角&gt;)</code> </li>
</ol>
</li>
</ul>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>Sass 當然還有更多東西可以去研究<br>在文章裡還包含常用的 sass plugin<br>compass、susy 等等<br>考量到這系列文章的年份<br>發現這兩者已經停止維護<br>這部分我就沒有去特別著墨了<br>不過依然讓我學到不少東西  </p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>Sass</tag>
      </tags>
  </entry>
  <entry>
    <title>CSSZeroToOneSeries | 02 | 互動卡片</title>
    <url>/Frontend/CSS/CSSSeriesZeroToOne-02/</url>
    <content><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/LYOdJjV">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4mBJbcOCZ4CF8WqJt5NbdIirs1thioqss6qbUqW3ReiXiJK9hPjNOthclckHXTZPXb1Y7DFw_kR-UQQmMYqzIWBfGLog7LogLdEVu4TEuI-iaz_91LgvrZteMyvlcB3mxOq4RxeHRiFqrz0JlQOD0O3tLstdIvdeXoDZD7l2saSLi84O8Vhu92m_J2Fd4O1rgh?width=1024&height=585&cropmode=none" alt="互動圖卡"></p>
<span id="more"></span>
<h2 id="圖片間距問題"><a href="#圖片間距問題" class="headerlink" title="圖片間距問題"></a>圖片間距問題</h2><p>img 是 inline 元素，但又可以按照圖片大小來設定寬高，所以又很像 inline-block。<br>而且圖片是沒有 baseline 的，距離下方有會 1 px 的問題。   </p>
<p>可以有 2 種情境</p>
<ol>
<li>文字 + 圖片</li>
<li>純圖片(s)</li>
</ol>
<h3 id="vertical-align-垂直對齊"><a href="#vertical-align-垂直對齊" class="headerlink" title="vertical-align 垂直對齊"></a>vertical-align 垂直對齊</h3><p>設定 <code>vertical-align</code>。vertical-align 是對 <strong>inline</strong> 屬性的元素做垂直對齊的方式。  </p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">img</span><span class="token punctuation">&#123;</span>
  <span class="token property">vertical-align</span> <span class="token punctuation">:</span> middle<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>middle 或 bottom 都可以，只是把圖片往容器下面靠攏，而且不修改圖片的 display 屬性。<br>在後面有文字的元素我覺得這個方法最適合。  </p>
<h3 id="display-block"><a href="#display-block" class="headerlink" title="display: block"></a>display: block</h3><p>1 px 是來自 inline 的問題，那把 display 修改成 block 就沒毛病了<br>但如果是好幾張圖並排加上文字，這方法就不適用了。  </p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">img</span><span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="font-size-0-amp-line-height-0"><a href="#font-size-0-amp-line-height-0" class="headerlink" title="font-size : 0 &amp; line-height : 0"></a>font-size : 0 &amp; line-height : 0</h3><p>如果在沒有文字的情況下，在 <strong>父層</strong> 去除空白文字的空間  </p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.image-father</span><span class="token punctuation">&#123;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> || <span class="token property">line-height</span><span class="token punctuation">:</span> 0 <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="改動-html-結構，讓-inline-擠在一起"><a href="#改動-html-結構，讓-inline-擠在一起" class="headerlink" title="改動 html 結構，讓 inline 擠在一起"></a>改動 html 結構，讓 inline 擠在一起</h3><p>不過在多張圖並排也可以利用 html 排列來解決問題，inline 屬性似乎會吃進 1 個 html 空格，這空格也不是 margin…  </p>
<ul>
<li>img 元素間有空白<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>擺在一起，空白會消失<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
我覺得蠻神奇的，平時在做導覽列 (navbar) 使用 a 標籤來排，也是同一概念<br>因為 a 也是 inline 屬性，如果想讓 a 無縫隙並排擠在一起寫就行了<br>上一篇的 <code>應用 : 導覽列</code> 就有示範到囉  </li>
</ul>
<h3 id="超級偷吃步-margin-top-1px"><a href="#超級偷吃步-margin-top-1px" class="headerlink" title="超級偷吃步 margin-top : -1px"></a>超級偷吃步 margin-top : -1px</h3><p>大部分在網路上看到的解決方案是把圖片往上挪 1 px 來解決<br>起因是很多網頁有超大張 DM 海報要放在網頁，並且切成兩段<br>造成中間銜接處有 1 px 空白   </p>
<p>由於瀏覽器相容性問題，上面的招數只在 chrome 跟 Edge 試過<br>像是 safiri 、firefox 或 opera 就沒試過了<br>margin 是都可以用的，應該是最保險的    </p>
<h2 id="position-迷思"><a href="#position-迷思" class="headerlink" title="position 迷思"></a>position 迷思</h2><p>子層用 absolute ，父層不一定用 relative</p>
<blockquote>
<p>只是找上面不是 static (預設) 定位的元素  </p>
</blockquote>
<h3 id="補充-常見技巧-蓋滿全版"><a href="#補充-常見技巧-蓋滿全版" class="headerlink" title="補充 : 常見技巧 蓋滿全版"></a>補充 : 常見技巧 蓋滿全版</h3><p>有時候想蓋滿容器，不一定要用 100% 來使用<br>如果遇到 inline 屬性既不能設高度也不能設寬度<br>這時候就可以透過 position 加上定位值來撐開  </p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span><span class="token punctuation">&#123;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.box a</span><span class="token punctuation">&#123;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">bottom</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
  <span class="token property">right</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>Frontend</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSZeroToOneSeries</tag>
      </tags>
  </entry>
  <entry>
    <title>CSSZeroToOneSeries | 01 | 圖文滿版區塊</title>
    <url>/Frontend/CSS/CSSSeriesZeroToOne-01/</url>
    <content><![CDATA[<p>這個系列是從鐵人賽<a href="https://ithelp.ithome.com.tw/users/20112550/ironman/2623">金魚都能懂的這個網頁畫面怎麼切 - 金魚都能懂了你還怕學不會嗎</a>的筆記與實作<br>原本要叫 Zreo to Hero，從迪士尼大力士的歌曲想到的<br>但完成金魚系列好像撐不上 Hero XD<br>就改成 Zero to One 了<br>代表從零到入門的  </p>
<p>起因是覺得自己的 CSS 結構跟用法沒有很妥善<br>一些性質莫名亂用，簡單來說就是不懂 CSS<br>透過一天天跟著實作了解 HTML 建置結構與 CSS 乾淨的寫法  </p>
<blockquote>
<p>這個系列不做 RWD  </p>
</blockquote>
<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/oNoEjNV?editors=0100">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4mFal1-hjaKzBYO0ceMmC3QyeuTEau2VqzDJF9KrNlLlaJqh1_6IA96aYDhEfXLD8hxMLGT-e2HeoUSEuxZzdB9J6Avk0LArKj0fgN4pP4drg_Qdza2-44tROHeK-PkxW5KrMWNXsxRYHNQIlD6Kw6MfCSVx-zj_uT7j_yf072F9X-qDfe2ro6EJNp59rN5m-z?width=1024&height=585&cropmode=none" alt="圖文滿版區塊"></p>
<span id="more"></span>

<h2 id="Reset-一下"><a href="#Reset-一下" class="headerlink" title="Reset 一下"></a>Reset 一下</h2><p>刻板面之前要先 reset，這樣我們才能掌控間距大小<br>最常見的是對這三者進行重置  </p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span><span class="token punctuation">&#123;</span>
	<span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
	<span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
	<span class="token property">list-style</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="什麼是-Reset"><a href="#什麼是-Reset" class="headerlink" title="什麼是 Reset ?"></a>什麼是 Reset ?</h3><p>每個瀏覽器會預先有 CSS 樣式，但是規格是不一樣，像是 padding 或 margin 究竟是加在 <code>html</code> 還是 <code>body</code> 呢 ?<br>各個瀏覽器各自有自己的規範，因此在製作上需要先把 CSS Reset 一下，把所有標籤都規定成一樣，再去設計。  </p>
<p>像是 li tag 會預設距離 <code>margin-left : 8px</code>，body 還沒 reset 情況下也會有 margin   </p>
<h3 id="CSS-Reset-我把你全家變一樣"><a href="#CSS-Reset-我把你全家變一樣" class="headerlink" title="CSS Reset  :  我把你全家變一樣"></a>CSS Reset  :  我把你全家變一樣</h3><p>把所有預設外觀都變一樣<br>所有標籤都必須自己手動加，可以自己掌控元素<br>不論在哪一個瀏覽器都會把 CSS 歸零。<br>最常見的是 meyer 的 reset.css  </p>
<p>所有標籤的樣式都變一樣，好像有點太超過了，因此出現了 <strong>Normalize CSS</strong>。  </p>
<p>=&gt; <a href="https://meyerweb.com/eric/tools/css/reset/">CSS Tools: Reset CSS (meyerweb.com)</a>   </p>
<h3 id="Normalize-CSS-差很大的修一下"><a href="#Normalize-CSS-差很大的修一下" class="headerlink" title="Normalize CSS : 差很大的修一下"></a>Normalize CSS : 差很大的修一下</h3><p>不用到每個都 reset ，針對一些瀏覽器差異性較大屬性進行微調<br>最大優點是既保留原有 html 標籤的情況下，做修改<br>很多主流 CSS 框架也是採用 Normalize CSS</p>
<h2 id="萬年問題-inine-v-s-block"><a href="#萬年問題-inine-v-s-block" class="headerlink" title="萬年問題 : inine v.s block"></a>萬年問題 : inine v.s block</h2><ul>
<li>block : 佔據一整行</li>
<li>inline : 本身元素的寬度</li>
</ul>
<h3 id="inline"><a href="#inline" class="headerlink" title="inline"></a>inline</h3><p>理論上元素跟別人排在一起，但也要看周遭的元素排列。  </p>
<blockquote>
<p>最重要的是 <strong>設定寬高是沒用的</strong>，是依照內容去撐高</p>
</blockquote>
<p>具有 inline 屬性的標籤<br>a 、span   </p>
<p>如果加上 padding 跟 margin，並不會影響其他元素的排版狀況，只會把單純的背景撐開。  </p>
<p>float 屬性會讓 block 排排站，可以想成是 3D 浮起來。  </p>
<h3 id="block"><a href="#block" class="headerlink" title="block"></a>block</h3><p>不管多寬都會佔掉一整列，跟 inline 最大區別是 <strong>可以設定寬高</strong></p>
<p>具有 block 屬性的標籤<br>h(1~6)、p、div …等等  </p>
<h3 id="混亂中立-inline-block"><a href="#混亂中立-inline-block" class="headerlink" title="混亂中立 : inline-block"></a>混亂中立 : inline-block</h3><p>解決 inline 不能設定寬高的，但是又可以跟別人排在一起<br>繼承 inline 排在同一排，又繼承 block 可以設寬高。</p>
<h4 id="範例一"><a href="#範例一" class="headerlink" title="範例一"></a>範例一</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
	<span class="token selector">h1</span><span class="token punctuation">&#123;</span>
		display： inline；
	<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>h(1~6) 用 inline 還是沒有被排在一起，因為 p也是 block。<br>如果 p 也是 inline，就會並排  </p>
<h4 id="範例二"><a href="#範例二" class="headerlink" title="範例二"></a>範例二</h4><p>a 變成 block ，會一整行都可以按，即使有寬度元素還是會佔好佔滿</p>
<h3 id="ul-預設是-block"><a href="#ul-預設是-block" class="headerlink" title="ul : 預設是 block"></a>ul : 預設是 block</h3><p>edge =&gt; 預設有 <code>padding : 16px;</code> <code>margin : 16px 0;</code></p>
<ul>
<li>如果是 <strong>inline</strong> =&gt; 底下的 li 照排，只是沒有包裹在 ul 容器裡，edge 預設會有 <code>padding-left : 40px</code>，margin 會歸零。  </li>
<li>如果是 <strong>inline-block</strong> =&gt; 保有 block 元素</li>
</ul>
<h3 id="li-預設是-list-item"><a href="#li-預設是-list-item" class="headerlink" title="li  : 預設是 list-item"></a>li  : 預設是 list-item</h3><p>不屬於兩大派別，而是 list-item</p>
<ul>
<li>如果是 inline ，<code>list-style-type</code>，會不見</li>
<li>如果是 block ，<code>list-style-type</code> 也會不見</li>
<li>如果是 inline-block ，<code>list-style-type</code> 也會不見</li>
</ul>
<p>所以這個 list-item 會包含 list-style-type 這個屬性<br>可以用 div 跟 span 模仿 ul &amp; li   </p>
<iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/shan473/embed/ZEarWRK?default-tab=html%2Cresult&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/shan473/pen/ZEarWRK">
  Untitled</a> by YanShanHong (<a href="https://codepen.io/shan473">@shan473</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
    
<h3 id="應用-導覽列"><a href="#應用-導覽列" class="headerlink" title="應用 : 導覽列"></a>應用 : 導覽列</h3><p>把 a 設成 inline-block，這樣可以把高度撐開<br>但是 HTML 空白字元會佔據 px ，只要把 HTML 擠在一起就不會有問題了<br><a href="https://codepen.io/shan473/pen/JjOpWab">Codepen</a></p>
<h2 id="vh"><a href="#vh" class="headerlink" title="vh"></a>vh</h2><p>viewport 的高度，看到的頁面視窗高度<br>最常看到 100vh，會佔據整個視窗高度  </p>
<h2 id="flex-direction-flex-排序的方向"><a href="#flex-direction-flex-排序的方向" class="headerlink" title="flex-direction : flex 排序的方向"></a>flex-direction : flex 排序的方向</h2><p>轉向的同時主軸線的 justify-content 跟次軸 align-items 也要跟著轉哦 !  </p>
<ul>
<li>row : 橫向 </li>
<li>column : 直向</li>
</ul>
<h2 id="background"><a href="#background" class="headerlink" title="background"></a>background</h2><blockquote>
<p><code>background:</code><br>linear-gradient(115deg,#9198e5 50%,transparent 50%) center center/100% 100% ,<br>url(‘<a href="https://picsum.photos/1200/600?random=10&#39;">https://picsum.photos/1200/600?random=10&#39;</a>) right center/100% 100%;</p>
</blockquote>
<ol>
<li>多個背景疊層用 <code>,</code> 隔開</li>
<li><code>linear-gradient(&lt;角度&gt;, $顏色1 $濃度,$顏色1 $濃度)</code><br> 可以擺放多個顏色跟濃度，角度不只 <code>deg</code> 也可以用 360 算的 <code>turn</code>  </li>
<li>後面擺放的順序是 <code>poition / size</code>   <ul>
<li><code>size</code> :   <ol>
<li>contain =&gt; 把大小等比例放大跟容器其中一邊等大</li>
<li>cover =&gt; 圖片真實的大小，不夠的會 repeat 到塞滿</li>
<li>% 數 =&gt; 相對容器的多少 %</li>
<li>直接設定 px</li>
<li>auto : 這個蠻複雜的先不討論 QQ</li>
</ol>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSZeroToOneSeries</tag>
      </tags>
  </entry>
  <entry>
    <title>CSSZeroToOneSeries | 05 | 超通用版面</title>
    <url>/Frontend/CSS/CSSSeriesZeroToOne-05/</url>
    <content><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/yLPqLWg">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4mHj3lx_2ZCP6jUJJdmg3J0yQ1okzs2onLtZoKl8Xl9-SHWo5R76rhJJOxB0CCcCpsr4mjLPVhk5vDB68y-tAOu5tf-ZNbKOE3h4Sre1TfJSvHP0v2J8P8TvUahMIXlTHuDmVXPLF8B_iY-H2YRC15q7MtFqTN40Pi1Q79x-NpaPicKK8MhjlUTMAusYM6_kFp?width=660&height=377&cropmode=none" alt="超通用版面"></p>
<span id="more"></span>
<h2 id="object-fit"><a href="#object-fit" class="headerlink" title="object-fit"></a>object-fit</h2><p>讓置換元素 (Replaced element) 的內容如何塞到已知的父層寬度與高度的框  </p>
<p>Replaced element 指的是內容呈現不在 CSS 的控制範圍<br>像以下這些元素  </p>
<ol>
<li><code>&lt;img&gt;</code></li>
<li><code>&lt;object&gt;</code> </li>
<li><code>&lt;video&gt;</code> </li>
<li><code>&lt;textarea&gt;</code> 和 <code>&lt;input&gt;</code> 表單元素。</li>
</ol>
<p>簡單來說還未設定 CSS 寬高之前，是由內容去撐開的  </p>
<p>object-fit 有 5 個屬性   </p>
<ul>
<li>fill : 填滿，超出會進行拉伸</li>
<li>cover : 照片超出版面，可以讓圖片等比例縮到塞滿框，多餘的裁切。或是照原圖片裁掉不符合框的範圍</li>
<li>contain : 等比例縮放，直到看見整張完整的圖。可能會距離框有距離  </li>
<li>none : 不做縮放，直接塞滿框</li>
<li>scale-down : 會是 none 跟 contain 其中一個值，看誰會拿到最小值</li>
</ul>
<p>參考 : <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/object-fit">object-fit</a>  </p>
<h2 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h2><p>當父容器為 flex<br>單一個子元素可以擺脫整體的 align-items 約束<br>自己排在想要的次軸位置  </p>
<p>* align-items 是在父層控制所有子元素的次軸位置，預設是 flex-start       </p>
<p>以本篇為例，<code>flex-direction : column</code> 來說次軸是 X 軸<br>align-self 會控制子元素在 X 軸的排列<br>我想只讓 more button 往最右邊靠攏只要設定  </p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.more</span><span class="token punctuation">&#123;</span>
  <span class="token property">align-self</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="margin-top-auto"><a href="#margin-top-auto" class="headerlink" title="margin-top : auto"></a>margin-top : auto</h2><p>子元素會在父層剩餘的 margin 被分配掉  </p>
<p>那 <strong>auto</strong> 的值何來 ?<br>我們必須要告訴瀏覽器有參考值邊界才能算出剩餘的空間  </p>
<p>以本篇的按鈕想要往下面對齊<br>父層使用 <code>display: flex</code> 跟 <code>flex-direction : column</code><br>子層會被撐開，佔滿空間<br>這時候子層就可以算出距離邊界的剩餘的空間(也就是子元素內容本身跟父層的邊界)<br>要全部往下推就要把 top 所有空間都分配掉 </p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item .txt .btn</span><span class="token punctuation">&#123;</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>所以如果想往哪邊推，就是把反向的空間給分掉   </p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">margin-top</span> <span class="token punctuation">:</span> auto <span class="token punctuation">;</span> // 擠到下方
<span class="token property">margin-bottom</span> <span class="token punctuation">:</span> auto <span class="token punctuation">;</span> // 擠到上方
<span class="token property">margin-left</span> <span class="token punctuation">:</span> auto <span class="token punctuation">;</span> // 擠到右方
<span class="token property">margin-right</span> <span class="token punctuation">:</span> auto <span class="token punctuation">;</span> // 擠到左方<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="常見的-margin-0-auto-置中技巧也是"><a href="#常見的-margin-0-auto-置中技巧也是" class="headerlink" title="常見的 margin : 0 auto 置中技巧也是"></a>常見的 margin : 0 auto 置中技巧也是</h3><p>把 box 置中</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span><span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>margin 針對左右邊都分配掉，也就是平均，所以元素才會置中  </p>
<ul>
<li>此時的邊界剩餘空間 ?<br>預設 box 的 display 是 block 占據整行<br>由於內容只有 100px，剩餘的空間就會是 viewport - box 內容再去分配    </li>
</ul>
<h2 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h2><p>有兩個值</p>
<ul>
<li>wrap  : 總體寬度超出螢幕寬，會換行</li>
<li>nowrap : flex 預設，打死不換行</li>
</ul>
<p>當複數個元素擠在同一個容器<br>會發現他們會平均壓縮(預設 flex-shrink : 1)<br>而且打死不換行<br>即使你縮到最小，也不會有內容超出容器導致 X 向的捲軸出現<br>因為 flex 都幫你壓好好的  </p>
<p>當然這樣的視覺是 NG 的，內容都擠一塊了<br>這時候 <code>wrap</code> 就很好用了<br>當這一行的寬度容不下多的子容器寬度就會往下排   </p>
<p>flex 可以說是能屈能伸，你說是不是很棒呢 QQ  </p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSZeroToOneSeries</tag>
      </tags>
  </entry>
  <entry>
    <title>CSSZeroToOneSeries | 03 | 人員介紹卡片</title>
    <url>/Frontend/CSS/CSSSeriesZeroToOne-03/</url>
    <content><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/qBVKqOO">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4mHzg-JW7SyoAHGTdGlUdj_5ZnwCD4xI67k_hSfC3GQoVpUstnuk7UTBR7UmUJpb13ZdYrbWwiYAHfilOlHT7mMJQ7HXqcji-jzR8muC__o_Dw1iYTtrnTdQi6XfOoLIEtZsrFHqsrZq3aNmq8disMaXDMzI_RxGM47SUv3SgTztsiBsVOTkzmRI7CYrfu6ytD?width=1024&height=585&cropmode=none" alt="人員介紹卡片"></p>
<span id="more"></span>
<h2 id="計算區塊尺寸"><a href="#計算區塊尺寸" class="headerlink" title="計算區塊尺寸"></a>計算區塊尺寸</h2><p>現代在撰寫 CSS 之前，在 reset 你可能會看到     </p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*,*::after,*::before</span><span class="token punctuation">&#123;</span>
  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>總是會加上一個 <code>box-sizing : border-box</code><br>讓設計師終於不用再算那些奇奇怪怪的數字<br>不過在沒有設定之前<br>到底怎麼算出內容寬度呢 ?  </p>
<p>以本篇為例<br>wrap 總寬度設為 1200px<br>共有 3 個 item 一個平均設 400px<br>加上 </p>
<ul>
<li>margin 上下左右各 15 px</li>
<li>border 上下左右各 1 px</li>
</ul>
<p>對吧 ! 那我 width 設 400px 準沒錯  </p>
<p>結果你打開 devtool 一看 !<br><img data-src="https://dsm01pap006files.storage.live.com/y4mzmrNWlb-z4xM6ccNPP18s_3klzarPfgQB5BTOPYpOpmJtGrioRBX7Qd5y8xMG1gcZrjoPOwMaXE7NIZSLZAbxRM2xNfah6MTMEOkY6KCfGDaV2WyMtTDMEEv4wHNfgF-9BfapXpyLFlhiC_hzthM7G2lJCfrPn4uKKTrR5z4SriKohs1faMgQ_ukHRedGqO_?width=404&height=660&cropmode=none" alt="368... 什麼鬼，那我還要設寬度嗎 ? "><br>不過 devtool 也告訴你答案了  </p>
<p>如果設超過平均寬度那還好，因為設定了 <code>display : flex</code><br>瀏覽器會幫你自動平均壓一壓併在同一排<br>但在 flex 出現之前呢 ?<br>大家會用 float 來排版，結果最後一個 item 被擠到第二行   </p>
<p>實際上在算寬度時 box-model (盒模型) 有兩種方式<br>預設是 content-box<br>意思是你的實際內容 (width) 是還要扣掉  </p>
<ul>
<li>padding</li>
<li>border </li>
</ul>
<p>但又因為 item 並排又有 margin 的存在<br>也要一併算在內<br>就能知道為什麼瀏覽器給我們的寬度是 368<br>你應該設定的 width    </p>
<blockquote>
<p>width  = 400 - (15 * 2)<code>&lt;margin 左右&gt;</code> - (1 * 2)<code>&lt;border 左右&gt;</code></p>
</blockquote>
<p>如果今天設定 box-sizing : border-box ，width 就會是 370<br>只要扣除 margin 就可以了   </p>
<h2 id="製作三角形"><a href="#製作三角形" class="headerlink" title="製作三角形"></a>製作三角形</h2><ul>
<li>有 width 跟 height 的情況下    </li>
</ul>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span><span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>
  <span class="token property">border-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
  <span class="token property">border-width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img data-src="https://dsm01pap006files.storage.live.com/y4myQ83gcWFgUdpgYx28trLrkeTeEbnNNerUjEyJiejmEwdCXaGVE8Hec0xCD1_fwAq92se5upOAAzgxpNwDcbKERH78dbQM3p_NVWKRDIgdiSWZ0XekHD6cKfkgm1MVp8SW3uYRu6qLPctjarWRedUKtrIWTB8OHBkk1uVrWJZDPEoFB4W_NUjxJw_kfrCWh11?width=497&height=484&cropmode=none" alt="一般具有長寬的 border">  </p>
<p>你可能會想我為什麼不寫 <code>border: 50px solid black</code><br>我是覺得這樣個別設定可以更方便<br>當然也可以個別寫方位 <code>border-top</code> 等等的   </p>
<ul>
<li>width、height 都等於 0<br><img data-src="https://dsm01pap006files.storage.live.com/y4m433-jklFksPiycDy1fvGep6xnsZvv3ps2NNrt4dxZY2AhEySiD_gkuAowFAnbRYjg8UEfdfHvkqo4fe5dXdEx-NEmCFJ06RxrKSJKceEmgUQ1Zfdqxz0mVcswcOGDRFas_Bb-rinjNvhWlINqQ2-fTxO_Xbg8TJFQa8LNA72YsZ7rAbU7uz37y33GtCNM1S8?width=284&height=283&cropmode=none" alt="只有 border">  </li>
</ul>
<p>會發現 border 的組成是來自四個等腰三角<br>出現單個三角只要把其中三邊背景變成透明就可以了 </p>
<p>比如說我想要 <strong>向上</strong> 的三角<br>所以只有底部的 border 保留<br><code>border-color : &lt;上&gt; &lt;右&gt; &lt;下&gt; &lt;左&gt;</code>  </p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span><span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>
  <span class="token property">border-color</span><span class="token punctuation">:</span> transparent transparent black transparent<span class="token punctuation">;</span>
  <span class="token property">border-width</span><span class="token punctuation">:</span> 0 25px 50px 25px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img data-src="https://dsm01pap006files.storage.live.com/y4mhEdF0YF0fV9DU8nRo63Lueil9A23f78iKvteTNLhrdagTR-P-FEg9JABpPpBf-oJ7HyY8FkAjj2gXaVE1cbl1NiIl3a0-O45t1xzfzOfa-1dn-6WhlHowlP3L80zoOJlzQxpAitnDEtH13ICceEnB4r0sY9uOlPxP3RpjmGjUshc5BxzCwGrpYXQTJ-5FKdw?width=249&height=266&cropmode=none" alt="向上等腰三角形">  </p>
<p>雖然左右兩邊是透明的，但不代表他們毫無無關<br>當我們去調整 width 的左右邊時<br>發現三角傾斜度不一樣<br>也可以說 <strong>border 左右邊是來控制傾斜度</strong>  </p>
<p>在本篇要做兩個到三角<br>只要把上面的 border 設為透明就 OK 了<br>左右邊則來控制斜度    </p>
<h3 id="正三角形呢"><a href="#正三角形呢" class="headerlink" title="正三角形呢 ?"></a>正三角形呢 ?</h3><p>對，我上面一直說等腰，那正三角形呢 ?<br>我們可以確定的是左右兩邊的長度<br>剩餘的就是底邊 (下) 長    </p>
<p>來簡單算數學<br>假設正三角邊長是 1，那高是  </p>
<blockquote>
<p>1^2 - (1/2)^2 開根號 = 根號 3 / 2<br>根號 3 大概是 1.73… ，除以 2 大約等於 0.866..  </p>
</blockquote>
<p>以上面的值來說左右如果設 50<br>因為左右是 除以 2 的結果<br>往回推，底長度 <code>50 * 2 * 0.866</code> </p>
<p>這邊就可以使用 CSS3 的 <code>calc</code> 來計算<br>我們只要控制 <code>--width</code> 達成想要的邊長就好  </p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>
  <span class="token property">--width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">--tri</span> <span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--width<span class="token punctuation">)</span> * 0.866<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--side</span> <span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--width<span class="token punctuation">)</span> / 2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span>
  <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>
  <span class="token property">border-width</span><span class="token punctuation">:</span> 0 <span class="token function">var</span><span class="token punctuation">(</span>--side<span class="token punctuation">)</span> <span class="token function">var</span><span class="token punctuation">(</span>--tri<span class="token punctuation">)</span> <span class="token function">var</span><span class="token punctuation">(</span>--side<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">border-color</span><span class="token punctuation">:</span> transparent transparent green transparent<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="補充-三角形的陰影"><a href="#補充-三角形的陰影" class="headerlink" title="補充 : 三角形的陰影"></a>補充 : 三角形的陰影</h3><p>我們知道 width、height 做出的陰影就是同等的大小<br>要做三角形的陰影不能用單一邊來想  </p>
<p>如果直接加上 box-shadow 只會有框邊有陰影<br><img data-src="https://dsm01pap006files.storage.live.com/y4mTG53FSgXjdPHvOF9D5Dqki3tUPtD_CNtxuMpoF968okr8GNjzzrQN3Tw9LSr-K-EBAoqpsb9RmjyJYoeWSlad8Ak2PQIYG9kAGd4DNeE1qcm7bTbkmqnFNQmz2lfF5LFkBWwVvc7LUOol8lEi8OI2SouBCtNdGKiKkCOD0hS0wjEfAnzpL7ws5jpFxN9-VFn?width=281&height=291&cropmode=none" alt="只有框邊，而不是三角直角陰影"><br>我們要的是 <strong>直角</strong> 那邊的陰影<br>所以要有兩邊的 border 形成直角再加陰影   </p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.tri</span><span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 50px solid black<span class="token punctuation">;</span>
  <span class="token property">border-color</span><span class="token punctuation">:</span>  transparent transparent green green<span class="token punctuation">;</span>
  <span class="token property">transform-origin</span><span class="token punctuation">:</span>0 0<span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">rotate</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">box-shadow</span><span class="token punctuation">:</span> -3px 3px 0px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img data-src="https://dsm01pap006files.storage.live.com/y4mA2Jyaa1HqhHgBom2vW4U42LqOPi2CjxozjxzGJOYstpR76s_Cx5_QWCghJR8bAN3Ua6RYK3LK6lsHOGnMsv9JZ3iB_u8CW4RRpBXgO9hAj6S_ZStsvoVVms31KuLFAbBkI_8KIGN9IKeyeTKTm70222bEwW5LV0pbhJlidC1yHB78ona8fSGWn6lljvyM-ph?width=370&height=192&cropmode=none" alt="正確的三角陰影"></p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSZeroToOneSeries</tag>
      </tags>
  </entry>
  <entry>
    <title>CSSZeroToOneSeries | 04 | 交錯漂浮版</title>
    <url>/Frontend/CSS/CSSSeriesZeroToOne-04/</url>
    <content><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/JjOZEBv">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4myrS3n9KEVx68j_Eae0KRrAYX2x2pFSw4IpKeLRuSQUsYqqzoIbIJ_TZHOxs96dBkjq9Or4jrv4cbmLYZJHh8XJf5UwXUa8Fst54z9sV0FCDctxAGmKDM3WK1sB4h8QsOqArz8DIpcZX4fpHELmYZC4xd994q-I2LITANufFsVCXWAneTdCRxsl7eG7xqpK_I?width=1024&height=1016&cropmode=none" alt="交錯漂浮版"></p>
<span id="more"></span>

<h2 id="box-sizing-盒子計算方式"><a href="#box-sizing-盒子計算方式" class="headerlink" title="box-sizing 盒子計算方式"></a>box-sizing 盒子計算方式</h2><p>box sizing 有兩種屬性  </p>
<ul>
<li><code>content-box</code> : 只有內容 (width) 的大小，其他另外算 (padding、border)</li>
<li><code>border-box</code> : 到 border 之前的都計算在內   </li>
</ul>
<p>在早期瀏覽器支援度沒那麼高，都會加上前綴 (prefix)<br>如果擔心使用的瀏覽器是否有支援也可以到 <a href="https://caniuse.com/?search=box-sizing">caniuse</a> 查詢  </p>
<h2 id="flex-shirk-壓縮值"><a href="#flex-shirk-壓縮值" class="headerlink" title="flex-shirk : 壓縮值"></a>flex-shirk : 壓縮值</h2><p>父層設定 flex 後<br>預設內容會進行並排而且壓縮<br>壓縮值預設是 flex-shirk : 1<br>所有子項會照數目去壓縮寬度    </p>
<p>如果是 0 的話 flex 不會幫你壓內容<br>而是解開束縛~  </p>
<p>在這個排版中我們將兩個子元素 <code>.txt</code> 跟 <code>.pic</code>  width 設定 55%<br>整體容器的大小照理來說是 110%<br>但實際上預設最大值只有 100%<br>在還未設定 flex-shirk 之前，我們可以看到容器實際大小是 600 而不是 660<br>即使設定兩個子項都設 100% ，flex 還是只會將空間平均分配後縮壓   </p>
<p>這時候只要加上 flex-shirk : 0，把壓縮比取消<br>正確的寬度就會是 660 了    </p>
<p>這也是為什麼有人設定完 flex 後，想把剩餘空間平均撐開<br>填入 width 把原本內容還大的數值<br>因為 flex 自己就會幫你壓完算完    </p>
<h2 id="nth-child-選兒子"><a href="#nth-child-選兒子" class="headerlink" title="nth-child : 選兒子"></a>nth-child : 選兒子</h2><p>跟 nth-of-type 很像，但是 nth-child 只認位置      </p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 翻譯 : 是第一個，而且 class 是 box 的 */</span>
<span class="token selector">.box:nth-child(1)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> 
<span class="token comment">/* 翻譯 : 是第一個，而且在 box 裡 */</span>
<span class="token selector">.box :nth-child(1)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>但如果配上 <code>&gt;</code> ，如果有孫子，並不包含在內，因為 <code>&gt;</code> 是指下一層而已，只包到兒子。 </p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grand<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 被套入樣式的只有 grand 裡面第一個 fater，但是 child 不會有 */</span>
<span class="token selector">.grand:nth-child(1)</span><span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也可以奇數、偶數    </p>
<ul>
<li>奇數 : <code>nth-child(odd)</code>  </li>
<li>偶數 : <code>nth-child(even)</code>  </li>
</ul>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSZeroToOneSeries</tag>
      </tags>
  </entry>
  <entry>
    <title>CSSZeroToOneSeries | 06 | 網頁頁尾版塊</title>
    <url>/Frontend/CSS/CSSSeriesZeroToOne-06/</url>
    <content><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/oNoMJBQ">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4mtphMUUk0c1yY9dUb53RF0jkrLI5tF-TSjeeSIBE583SwUq1Uk8UZUm-Z011ZK-Or0KbhFHvVqODwJObSn3ACJf7CuFIuu18jaIEzdPeLEqvFFMAesLSLoetnq0FPAtwi7kCTP7ZscwXBBtdaDMV7GQKnv5kTH_3vY6LSOcOkcg1zvlpCEsth5zYrQJ54RM7r?width=660&height=377&cropmode=none" alt="網頁頁尾版塊"></p>
<span id="more"></span>
<h2 id="flex-grow-子元素的空間分配"><a href="#flex-grow-子元素的空間分配" class="headerlink" title="flex-grow : 子元素的空間分配"></a>flex-grow : 子元素的空間分配</h2><p><code>flex-grow</code> : 剩餘容器空間分配，運用到 flex-grow : 1，個別分配一樣的，以免內容大小不一導致 container 有大有小。  </p>
<blockquote>
<p><code>width : 0</code> 可以把 width 先設定為 0 ，讓 <strong>主軸</strong> 的 width 都交給 grow 分配。</p>
</blockquote>
<h3 id="flex-裡面的-width-100-到底沒有作用"><a href="#flex-裡面的-width-100-到底沒有作用" class="headerlink" title="flex 裡面的 width : 100% 到底沒有作用 ?"></a>flex 裡面的 width : 100% 到底沒有作用 ?</h3><p>有，在還沒設定 flex-grow 之前<br>子元素的空間是由內容去撐開的<br>拔掉本篇的 footer-item 中的 flex-grow 並將 width 設為 100%<br>依然會跟 flex-grow 一樣  </p>
<p>在之前的篇章有介紹過 flex-shrink 壓縮值<br>原因在於 flex-shrink 預設把空間平均壓縮了<br>這也是為什麼撐開到 100% 也單一個子元素占不滿 container<br>所以設定 25% (item 總數是 4) 或 100% 也沒差  </p>
<p>個人不太建議這樣寫，因為 width 感覺失去意義了    </p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSZeroToOneSeries</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - 表達式 &amp; 陳述式</title>
    <url>/Frontend/JavaScript/JavaScript-Expression-Statement/</url>
    <content><![CDATA[<h2 id="表達式-Expressions"><a href="#表達式-Expressions" class="headerlink" title="表達式 (Expressions)"></a>表達式 (Expressions)</h2><p>執行完程式能直接 <strong>有回傳值</strong>，通常會存成變數，但不一定要存成變數  </p>
<ul>
<li>這都是表達式<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span>
a <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">5</span>
<span class="token keyword">const</span> c <span class="token operator">=</span><span class="token punctuation">&#123;</span>
	<span class="token string">"hi"</span> <span class="token operator">:</span> <span class="token string">'hello'</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="陳述式-Statements-Declaration"><a href="#陳述式-Statements-Declaration" class="headerlink" title="陳述式 (Statements | Declaration)"></a>陳述式 (Statements | Declaration)</h2><p>沒有回傳值，也不能當作變數的值  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">===</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token comment">//... dosomething</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>a===3</code> : 是表達式</li>
<li><code>if(...)</code> : 陳述式，並沒有回傳值</li>
</ul>
<p>所以不會寫成這樣</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">===</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token comment">//... dosomething</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="Function-Expressions-amp-Function-Statements"><a href="#Function-Expressions-amp-Function-Statements" class="headerlink" title="Function Expressions &amp; Function Statements"></a>Function Expressions &amp; Function Statements</h2><p>JavaScript 中 Function 是物件的一種<br>由這個例子可知，Function 在 Object 的原型鍊上</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// a 是不是 Object 的實作</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>不過如果去查型態 (typeof) function 會是 function </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span> <span class="token comment">// 'function'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="Function-Statements-declaration"><a href="#Function-Statements-declaration" class="headerlink" title="Function Statements (declaration)"></a>Function Statements (declaration)</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">mutiply</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">mutiply</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> a<span class="token operator">*</span>b
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>不會直接回傳任何的值。<br>該函式就會透過 hoisting 先被儲存在記憶體中，在程式碼出現之前去呼叫，就不會發出錯誤。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">
<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 執行函式</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 印出函式的內容</span>

<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Function-Expressions"><a href="#Function-Expressions" class="headerlink" title="Function Expressions"></a>Function Expressions</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">cross</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> 
<span class="token keyword">const</span> <span class="token function-variable function">cross</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> a<span class="token operator">*</span>b
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>提前呼叫的話會報錯</p>
<blockquote>
<p>Uncaught ReferenceError: Cannot access ‘cross’ before initialization</p>
</blockquote>
<p>在 let、const 定義了但沒賦值之前是不能叫它的。<br>如果是 var 宣告則會是 <code>Uncaught TypeError: cross is not a function</code></p>
<p>以 cross 來說，我們先建立了函式，但是沒有命名，這樣的函式叫 <strong>匿名函式（anonymous function 或 function literal）</strong>。  </p>
<ol>
<li>為什麼可以不命名 ?<br> 在 function expression 之前已經指定給 cross，這個變數名就用來指稱函式</li>
<li>可以命名嗎 ?   <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">greet</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// hello</span>
<span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// hi is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
 可以，而且依然可以運行。<br> 在 Huli 大<a href="https://blog.huli.tw/2020/04/18/javascript-function-is-awesome/">這篇文章</a>有提到，在 function expression 中函式給予名稱有些有趣的問題<ul>
<li>所以叫 greet 還是叫 hi ?<br>  是 hi，在外部呼叫必須用變數名，使用 function 名稱是 <code>is not defined</code></li>
<li>匿名的部份命名有什麼用處 ?<ol>
<li> 想呼叫自己的時候可以使用</li>
<li>stacktrace 會出現這個名字</li>
</ol>
</li>
</ul>
</li>
</ol>
<ul>
<li>stacktrace 匿名函式的名稱會出現<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img data-src="https://dsm01pap006files.storage.live.com/y4mBgzq2siu2WVu3eDN1OJz6Q8rPxMAKMf84yK2Z4Nw0PN6M8qYYBgOftVQ6BlFQwNEshSk-LjimjWZhNGvTzxLNNibhzJd03yNiG0zmDOJxVi2jjpGG1lqkTvEbr3v8a9GwI0IfOmnF3CwKa__lZB8T2uoXbF8PEQDU6-rLnuAFvLRk1ZIp8_QOjTJEX6AJ6AM?width=370&height=232&cropmode=none" alt="stacktrace"></li>
</ul>
<h2 id="函式中的函式"><a href="#函式中的函式" class="headerlink" title="函式中的函式"></a>函式中的函式</h2><p>在函式中放入 function expression 而且是 anonymous function</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">//--- 等同</span>
<span class="token keyword">const</span> <span class="token function-variable function">anonymousfunction</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">log</span><span class="token punctuation">(</span>anonymousfunction<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>會印出 funtion 的結構</p>
<pre class="line-numbers language-none"><code class="language-none">function()&#123;
	console.log(&#39;hi&#39;)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>要執行在 log 裡面的 fn 加入 <code>()</code> 就可以了</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="Callback-function"><a href="#Callback-function" class="headerlink" title="Callback function"></a>Callback function</h3><p>如果要確保程式執行的順序，會使用到 callback function，做法就是把函式傳入另一個函式裡面去呼叫   </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">hello</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>
	<span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> <span class="token function-variable function">bye</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bye'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span>
	<span class="token function">callback</span><span class="token punctuation">(</span>bye<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token function">hi</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>依序印出 <code>&#39;start&#39;、&#39;hello&#39;、&#39;bye&#39;</code></p>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol>
<li><a href="https://pjchender.blogspot.com/2016/03/javascriptfunction-statements-and.html">[筆記] 進一步談JavaScript中函式的建立─function statements and function expressions</a></li>
<li><a href="https://blog.huli.tw/2020/04/18/javascript-function-is-awesome/">覺得 JavaScript function 很有趣的我是不是很奇怪 - Huli</a></li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - first class function (一級函式)</title>
    <url>/Frontend/JavaScript/JavaScript-First-Class-Function/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JavaScript 中的 function 是很神奇的東西<br>在初學時看到很多名詞<br>像 callback function(回呼函式)、First-Class Function(一級函式)、High-Order Function(高階函式)<br>還有 Closure(閉包) 等等的，總是會霧撒撒…<br>本篇來初步認識 function 中的 First-Class Function 概念   </p>
<span id="more"></span>

<h2 id="一級函式"><a href="#一級函式" class="headerlink" title="一級函式"></a>一級函式</h2><blockquote>
<p>函式可以被視為其他變數一樣，像是 function 可以指定成變數，也可以做為參數傳入別的 funciton。  </p>
</blockquote>
<p>JavaScript 的 function 符合 first class function    </p>
<ul>
<li>函式只是物件的一種  </li>
<li>function 可以儲存成變數 (function expression)    <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">greet</span> <span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>function 可以當作參數傳入別的 function 中，這邊把 function 當作 <strong>值</strong> 來使用。<br>  (這樣的方式會稱這個 function 是 callback function)    <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token string">'hello,'</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span>name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>name<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">greet</span><span class="token punctuation">(</span>hello<span class="token punctuation">,</span><span class="token string">'rosa!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>function 裡面又回傳另一個 function。<pre><code>只要接收函式作為參數，或是回傳函式作為輸出的函式
</code></pre>
  就稱作高階函式 ( <strong>Higher-Order Function</strong> )<br>  像是 Array 中的 <code>map</code> function  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token operator">=></span> num <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">)</span>
<span class="token comment">// 實作</span>
<span class="token keyword">function</span> <span class="token function">arrayMap</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">let</span> length <span class="token operator">=</span> array<span class="token punctuation">.</span>length
	<span class="token keyword">let</span> newArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> 
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		newArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> newArray
<span class="token punctuation">&#125;</span>
<span class="token function">arrayMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> item <span class="token operator">*</span> <span class="token number">2</span> 	
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>function 跟物件一樣有屬性 (property)<br>下面進行說明</li>
</ul>
<h2 id="函式也是物件的一種"><a href="#函式也是物件的一種" class="headerlink" title="函式也是物件的一種 ?"></a>函式也是物件的一種 ?</h2><p>範例 : </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'invoke this'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 直接執行</span>
hello<span class="token punctuation">.</span>people<span class="token operator">=</span><span class="token string">'rosa'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span>people<span class="token punctuation">)</span> <span class="token comment">// output : rosa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>執行 (invoke) 函式，是透過 <code>()</code></li>
<li>可以直接用 <code>.</code> 建立物件中的 key-value  </li>
</ol>
<p>證明 function 是一種特殊的物件，也可以當作物件來使用。 </p>
<h2 id="補充-函式回傳一個另一個函式"><a href="#補充-函式回傳一個另一個函式" class="headerlink" title="補充 : 函式回傳一個另一個函式"></a>補充 : 函式回傳一個另一個函式</h2><p>調用函式與回傳的函式有幾種做法  </p>
<ol>
<li>存成變數<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sayhi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello, Rosa!'</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> myFunc <span class="token operator">=</span> <span class="token function">sayhi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// myFunc 接收的是一個 function</span>
<span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 呼叫</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>雙括號直接呼叫<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sayhi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello, Rosa!'</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span>
<span class="token function">sayhi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>IIFE (Immediately Invoked Function Expression): 定義完就回傳的 function<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sayhi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello, Rosa!'</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">&#125;</span>
<span class="token function">sayhi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<p>IIFE 的例子很常在 JQuery 看見  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//$ = jQuery</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol>
<li><a href="https://pjchender.blogspot.com/2016/03/javascriptfunctionobjects.html">[筆記] JavaScript 中函式就是一種物件 ─ 談談 first class function（一等公民函式） ~ PJCHENder 那些沒告訴你的小細節</a></li>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Glossary/First-class_Function">一級函式（First-class Function） - 術語表 | MDN (mozilla.org)</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10224519">JS 原力覺醒 Day19 - 一級函式與高階函式</a></li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - 參數傳遞 call by value or call by reference &amp; call by sharing</title>
    <url>/Frontend/JavaScript/JavaScript-call-by-what/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直以來 JavaScript 的參數傳遞都蠻有爭議性的<br>可能聽過</p>
<blockquote>
<p>原始型態是 call by value；物件型態是 call by reference </p>
</blockquote>
<p>甚至有人說 JavaScript 只有 <code>call by sharing</code> 或是根本只有 <code>call by value</code><br>到底是哪種 ? 眾說紛紜，本篇針對這三種名詞進行解釋幫助自己去來理解   </p>
<p>如果有誤再麻煩各路大大指點    </p>
<span id="more"></span>   

<h2 id="call-by-value-傳值"><a href="#call-by-value-傳值" class="headerlink" title="call by value : 傳值"></a>call by value : 傳值</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">5</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> a

a<span class="token operator">=</span><span class="token number">10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>定義變數 a 並且賦予 5 這個值，假設會被存在記憶體 <code>00x1</code> 這個位址</p>
<table>
<thead>
<tr>
<th>變數</th>
<th>記憶體位址</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>a</td>
<td>00x1</td>
<td>5</td>
</tr>
</tbody></table>
</li>
<li><p>定義變數 b 等於 a ，b 拷貝 a 的值，另外存在新的記憶體位址  <code>00x3</code></p>
<table>
<thead>
<tr>
<th>變數</th>
<th>記憶體位址</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>a</td>
<td>00x1</td>
<td>5</td>
</tr>
<tr>
<td>b</td>
<td>00x3</td>
<td>5 (copy from a)</td>
</tr>
</tbody></table>
</li>
<li><p>當你改變 a 的值，因為 b 指向不同記憶體位置，所以跟 b 沒有關係</p>
<table>
<thead>
<tr>
<th>變數</th>
<th>記憶體位址</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>a</td>
<td>00x1</td>
<td>10</td>
</tr>
<tr>
<td>b</td>
<td>00x3</td>
<td>5</td>
</tr>
</tbody></table>
</li>
</ul>
<p>即使修改 a 或 b 其中一項，a 、 b 值互不相干擾，稱作 <code>call by value</code><br>而且 JavaScript 對於 Primitive type 的操作都是 <code>call by value</code><br>拷貝 「<strong>值</strong>」 但不拷貝 「<strong>址</strong>」</p>
<p>這也為什麼說 Primitive type 是 <strong>immutable</strong> (不可變)<br>這邊指的不可變 b 雖然等於 a，但你修改 a 並不會去變動到其他的值   </p>
<h3 id="Function-中參數的傳遞-by-value"><a href="#Function-中參數的傳遞-by-value" class="headerlink" title="Function 中參數的傳遞 : by value"></a>Function 中參數的傳遞 : by value</h3><p><a href="https://blog.techbridge.cc/2018/06/23/javascript-call-by-value-or-reference/">Huli 大的文章</a> 中也舉例變數 function 做為參數，並在 funciton 中進行新賦值的問題   </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">revalue</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
	b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">revalue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>把變數 a 跟變數 b 都當作參數傳進 <code>revalue</code> 這個 function，而參數只是複製傳進來的值，並不會影響到在外面的 a 跟 b。  </p>
<blockquote>
<p>這邊的參數 a、b 作為傳進來的值的別名 (alias)而已，跟外部定義的 a、b 是無關的  </p>
</blockquote>
<h2 id="call-by-reference-傳址"><a href="#call-by-reference-傳址" class="headerlink" title="call by reference : 傳址"></a>call by reference : 傳址</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	a<span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> obj2 <span class="token operator">=</span> obj1
obj1<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">===</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1 <span class="token operator">===</span> obj2<span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在 object 型態的判斷來看，空物件不會等於空物件，因為記憶體儲存的位址不同<br>但這裡 <code>obj1 === obj2</code> 是 true 的時候，代表兩個變數是指向同一個地方 ，是一樣的。  </p>
<p>接著看怎麼運作的  </p>
<ul>
<li><p>定義變數 obj1 並且賦予 <code>&#123;a : 1&#125;</code> 這個值，記憶體 <code>00x1</code> 這個位址 ，會存有 <code>&#123;a: 1&#125;</code> 這個值。而 obj1 的值則引用 (reference) <code>00x1</code> 位子的值</p>
<table>
<thead>
<tr>
<th>變數</th>
<th>記憶體位址</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>00x1</td>
<td>{a: 1}</td>
</tr>
<tr>
<td>obj1</td>
<td>00x2</td>
<td>00x1</td>
</tr>
</tbody></table>
</li>
<li><p>定義變數 obj2 等於 obj1，也就是參照同一個 <strong>位址</strong> 的值</p>
<table>
<thead>
<tr>
<th>變數</th>
<th>記憶體位址</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>00x1</td>
<td>{a: 1}</td>
</tr>
<tr>
<td>obj1</td>
<td>00x2</td>
<td>00x1</td>
</tr>
<tr>
<td>obj2</td>
<td>00x2</td>
<td>00x1</td>
</tr>
</tbody></table>
</li>
<li><p>當 <code>obj1.a</code> 改變時，是改動到位在 <code>00x1</code> 記憶體的值 <code>&#123;a : 5&#125;</code>，因為 obj2 也參照這裡的位址的值，在運作上連同 obj2 也被改動到</p>
<table>
<thead>
<tr>
<th>變數</th>
<th>記憶體位址</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>00x1</td>
<td><code>&#123;a: 5&#125;</code></td>
</tr>
<tr>
<td>obj1</td>
<td>00x2</td>
<td>00x1</td>
</tr>
<tr>
<td>obj2</td>
<td>00x2</td>
<td>00x1</td>
</tr>
</tbody></table>
</li>
</ul>
<p>由此可知當改動到 obj1.a 的值 obj2.a 也會改變稱作 call by reference<br>Object type 通常是 call by reference<br>拷貝 「<strong>值</strong>」 <strong>也拷貝址</strong></p>
<p>跟 Primitive type 相反的是 Object type 是 <strong>mutable</strong> (可變)<br>改動 a 的值卻也會變動到 b<br>在 <a href="https://www.slideshare.net/YiTaiLin/java-script-63031051">Tommy 大簡報第 12 頁有清楚的流程</a> 可以參考  </p>
<h3 id="Function-中參數的傳遞-by-reference"><a href="#Function-中參數的傳遞-by-reference" class="headerlink" title="Function 中參數的傳遞 : by reference"></a>Function 中參數的傳遞 : by reference</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	a<span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">revalue</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	obj<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">5</span>
<span class="token punctuation">&#125;</span>
<span class="token function">revalue</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span> <span class="token comment">// &#123;a: 1,b :5 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在 revalue 函式中我們對參數 obj 進行更新<br>而外部的 obj1 也會變動到，因為指向的記憶體位址是同一處。  </p>
<ul>
<li><p>obj1 作為引數，帶入 obj 參數時，複製一份 obj1 進去  </p>
<table>
<thead>
<tr>
<th>變數</th>
<th>記憶體位址</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>00x1</td>
<td>{a : 1}</td>
</tr>
<tr>
<td>obj1</td>
<td>00x2</td>
<td>00x1</td>
</tr>
<tr>
<td></td>
<td>00x4</td>
<td>funtion revalue()…</td>
</tr>
<tr>
<td>revalue</td>
<td>00x5</td>
<td>00x4</td>
</tr>
<tr>
<td>參數 <strong>obj</strong></td>
<td>00x2</td>
<td>00x1</td>
</tr>
</tbody></table>
</li>
<li><p>obj.b = 5 (不是變數重新賦值 !)</p>
<table>
<thead>
<tr>
<th>變數</th>
<th>記憶體位址</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>00x1</td>
<td><code>&#123;a:1,b:5&#125;</code></td>
</tr>
<tr>
<td>obj1</td>
<td>00x2</td>
<td>00x1</td>
</tr>
<tr>
<td></td>
<td>00x4</td>
<td>funtion revalue()…</td>
</tr>
<tr>
<td>revalue</td>
<td>00x5</td>
<td>00x4</td>
</tr>
<tr>
<td>參數 <strong>obj</strong></td>
<td>00x2</td>
<td>00x1</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="例外狀況-重新賦值"><a href="#例外狀況-重新賦值" class="headerlink" title="例外狀況 : 重新賦值"></a>例外狀況 : 重新賦值</h3><p>凡事總有個例外… </p>
<ol>
<li><p>Object Literals 重新賦值</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> obj2 <span class="token operator">=</span> obj1

obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1 <span class="token operator">===</span> obj2<span class="token punctuation">)</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> 按照上面來說，參照同一記憶體位址， obj2 變動應該會連同 obj1 也改變，結果沒有。  </p>
<ul>
<li>obj2 = obj1，obj2 複製 obj1</li>
</ul>
<table>
<thead>
<tr>
<th>變數</th>
<th>記憶體位址</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>00x1</td>
<td><code>&#123;a:1,b:5&#125;</code></td>
</tr>
<tr>
<td>obj1</td>
<td>00x2</td>
<td>00x1</td>
</tr>
<tr>
<td>obj2</td>
<td>00x2</td>
<td>00x1</td>
</tr>
</tbody></table>
<ul>
<li>obj2 新賦值</li>
</ul>
<table>
<thead>
<tr>
<th>變數</th>
<th>記憶體位址</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>00x1</td>
<td>{a:1}</td>
</tr>
<tr>
<td></td>
<td>00x5</td>
<td><code>&#123;a: 3&#125;</code></td>
</tr>
<tr>
<td>obj1</td>
<td>00x2</td>
<td>00x1</td>
</tr>
<tr>
<td>obj2</td>
<td>00x6</td>
<td>00x5</td>
</tr>
</tbody></table>
<p> obj2 在新賦值時，物件創造新的記憶體位址賦予值，obj2 也創造一個新的記憶體位址並且複製物件位址到自己的值<br> obj1 跟 obj2 正式分道揚鑣 ~ 成為陌生人  </p>
</li>
<li><p> Function 中參數的傳遞 : Object 重新賦值</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	a<span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">revalue</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	obj<span class="token operator">=</span><span class="token punctuation">&#123;</span> a <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">revalue</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span> <span class="token comment">// &#123;a: 1&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在裡面重新賦值，外部的引數並不會改動到原本的值<br>跟著跑一遍  </p>
</li>
</ol>
<ul>
<li><p>obj1 作為引數，帶入 obj 參數時，複製一份 obj1 進去  </p>
<table>
<thead>
<tr>
<th>變數</th>
<th>記憶體位址</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>00x1</td>
<td>{a : 1}</td>
</tr>
<tr>
<td>obj1</td>
<td>00x2</td>
<td>00x1</td>
</tr>
<tr>
<td></td>
<td>00x4</td>
<td>funtion revalue()…</td>
</tr>
<tr>
<td>revalue</td>
<td>00x5</td>
<td>00x4</td>
</tr>
<tr>
<td>參數 <strong>obj</strong></td>
<td>00x2</td>
<td><code>00x1</code></td>
</tr>
</tbody></table>
</li>
<li><p>obj={ a : 3}  重新賦值</p>
<table>
<thead>
<tr>
<th>變數</th>
<th>記憶體位址</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>00x1</td>
<td>{ a : 1 }</td>
</tr>
<tr>
<td>obj1</td>
<td>00x2</td>
<td>00x1</td>
</tr>
<tr>
<td></td>
<td>00x4</td>
<td>funtion revalue()…</td>
</tr>
<tr>
<td>revalue</td>
<td>00x5</td>
<td>00x4</td>
</tr>
<tr>
<td>參數 <strong>obj</strong></td>
<td><code>00x8</code></td>
<td><code>00x6</code></td>
</tr>
<tr>
<td></td>
<td>00x6</td>
<td>{a : 3}</td>
</tr>
</tbody></table>
</li>
<li><p>根據 Scope 作用域，函式的變數作用範圍等函式結束後就會釋放記憶體。</p>
<table>
<thead>
<tr>
<th>變數</th>
<th>記憶體位址</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>00x1</td>
<td>{ a : 1 }</td>
</tr>
<tr>
<td>obj1</td>
<td>00x2</td>
<td>00x1</td>
</tr>
<tr>
<td></td>
<td>00x4</td>
<td>funtion revalue()…</td>
</tr>
</tbody></table>
</li>
</ul>
<p>obj1 依然不會變動到。  </p>
<p>不過你發現了嗎 ?<br>Object Type 新賦值的行為是複製值而已，很像 call by value  </p>
<h2 id="不是-by-value-也不是-by-renference-而是-by-sharing"><a href="#不是-by-value-也不是-by-renference-而是-by-sharing" class="headerlink" title="不是 by value 也不是 by renference 而是 by sharing"></a>不是 by value 也不是 by renference 而是 by sharing</h2><p>哦不，我的頭開始痛了<br>那我前面認識的難道是假的嗎 ?  </p>
<p>不，sharing 就像綜合體一樣<br>按上面所述，我們可以把情況分成三種  </p>
<ol>
<li>Primitive type 表現行為是 call by value</li>
<li>Object type 沒有新賦值的情況，而是對內容操作，表現行為像是 call by reference</li>
<li>Object type 重新賦值，表現則是 call by value，會建立一個新的記憶體位置，並且複製其(記憶體位址的)值  </li>
</ol>
<p>可知 call by sharing 在不同情況下會就會有不同的表現行為</p>
<p>借一下 Huli 大的圖…<br><img data-src="https://dsm01pap006files.storage.live.com/y4mnEy3INPdoo5FZIkuPSKskoOVfwI9iapT5pvdWu6c0BSovTa8z0rEaeST_jxZaxA8prHXyxrT_9IWaaoniKLBb6GJz6tdT60tRupMq7E0LMnDVcO97Oc8H1Rk2WzVxmlnTRFYoLOjzbHqdeFe5cLtaWuG_x4SY9Mt6GLI8HYXkVicjUFYT5QsvmVzYogaIAxS?width=949&height=702&cropmode=none" alt="call by sharing"></p>
<p>文章中有提及其實 JavaScript 嚴格意義上是沒有 call by reference 的，因為函式的引數重新賦值並不會修改到外部變數的值。<br>(C++ 能修改到是跟指標有關)<br>由於我不是很熟 C 跟 C++… 先不做討論     </p>
<p>由上圖可知，JavaScript 可以說    </p>
<blockquote>
<p>Primitive 是 Pass by Value，Object 是 Pass by sharing。</p>
</blockquote>
<h2 id="全都是-call-by-value-的觀點"><a href="#全都是-call-by-value-的觀點" class="headerlink" title="全都是 call by value 的觀點"></a>全都是 call by value 的觀點</h2><p>那全是 call by value 是怎麼回事 ?<br>造成爭論的點在於這邊的 value 並未定義說是 <strong>內容的值</strong> 還是 <strong>存放在變數記憶體位址裡的值</strong>  </p>
<ul>
<li><p>以 <strong>內容的值</strong> 觀點來看        </p>
<table>
<thead>
<tr>
<th>變數</th>
<th>記憶體位址</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>a</td>
<td>00x1</td>
<td><strong>5(被複製到 b)</strong></td>
</tr>
<tr>
<td>b</td>
<td>00x3</td>
<td>5</td>
</tr>
</tbody></table>
</li>
<li><p>以 <strong>記憶體位址裡的值</strong> 觀點來看  </p>
<table>
<thead>
<tr>
<th>變數</th>
<th>記憶體位址</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td><strong>00x1 (被複製)</strong></td>
<td>{a: 1}</td>
</tr>
<tr>
<td>obj1</td>
<td>00x5</td>
<td>00x1</td>
</tr>
<tr>
<td>obj2</td>
<td>00x5</td>
<td>00x1</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
</li>
</ul>
<p>b 複製 a ， a 也是複製記憶體 <code>(00x1)</code> 位址這個值，所以也可以說是 <strong>call by value</strong><br>在定義上的不同，導致不同的觀點與結論   </p>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol>
<li>帶你跑一次 : <a href="https://www.slideshare.net/YiTaiLin/java-script-63031051">簡單介紹JavaScript參數傳遞 (slideshare.net)</a></li>
<li>簡單論述 : <a href="https://ithelp.ithome.com.tw/articles/10191057">重新認識 JavaScript: Day 05 JavaScript 是「傳值」或「傳址」？</a></li>
<li>從各方面來看 : <a href="https://blog.techbridge.cc/2018/06/23/javascript-call-by-value-or-reference/">深入探討 JavaScript 中的參數傳遞：call by value 還是 reference？</a></li>
<li>好懂得位址概念 : <a href="https://ithelp.ithome.com.tw/articles/10209104">你不可不知的 JavaScript 二三事#Day26：程式界的哈姆雷特 —— Pass by value, or Pass by reference？</a></li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 筆記 ⟭ 初探 CSS Grid</title>
    <url>/Frontend/CSS/CSS-Grid/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>眾所皆知 flex 是排版神器，尤其在一維的排版非常好用<br>那在二維的排版呢 ?<br>就不得提到 grid，雖然 grid 在舊的瀏覽器支援性沒到很高，現代瀏覽器是幾乎都有支援。(<a href="https://caniuse.com/css-grid">caniuse</a>)   </p>
<span id="more"></span>  

<h2 id="grid-container-容器布局"><a href="#grid-container-容器布局" class="headerlink" title="grid-container 容器布局"></a>grid-container 容器布局</h2><p>要建立網格，起手式先建造一個容器，準備讓子項網格排列    </p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>item1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>item2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>item3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>item4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>item5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="display-grid"><a href="#display-grid" class="headerlink" title="display : grid"></a>display : grid</h3><p>grid 是二維的版面排版，透過 columns 跟 rows 來安排，直接 加上 grid 不會有變化。  </p>
<p>display 有關 grid 的有 2 個值，就像 <code>inline-flex</code> 跟 <code>flex</code>    </p>
<ol>
<li><code>inline-grid</code>  </li>
<li><code>grid</code> : 2D 布局  </li>
</ol>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">&#123;</span>
	<span class="token property">display</span><span class="token punctuation">:</span> grid | inline-grid<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="格線軌道（Grid-Track）"><a href="#格線軌道（Grid-Track）" class="headerlink" title="格線軌道（Grid Track）"></a>格線軌道（Grid Track）</h3><p>在 grid 中有不同的布局方式，來決定網格的架構     </p>
<ol>
<li>軌道   </li>
<li>fr 分塊，利用百分比算格數，具有彈性</li>
</ol>
<h3 id="明式格線（explicit-grid）"><a href="#明式格線（explicit-grid）" class="headerlink" title="明式格線（explicit grid）"></a>明式格線（explicit grid）</h3><p>明式是自定義軌道，有明就會有暗，暗式是 CSS 幫我們建立的線。  </p>
<h4 id="grid-template-columns-橫向軌道"><a href="#grid-template-columns-橫向軌道" class="headerlink" title="grid-template-columns : 橫向軌道"></a>grid-template-columns : 橫向軌道</h4><p>橫向網格的寬度。<br>合法的絕對單位 :   </p>
<ul>
<li>% </li>
<li>px</li>
<li>em</li>
<li>rem  </li>
</ul>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">&#123;</span>
	<span class="token property">grid-template-columns</span> <span class="token punctuation">:</span> 100px 100px 200px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>橫向放入三個元素，各別有寬度。  </p>
<ul>
<li><p><code>fr</code> : 可用空間的分塊（fraction）。全都 <code>fr</code> 的單位就像切分成幾分之幾，但是類似帶有 flex-grow 、flex-shrink 的功能。  </p>
  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">&#123;</span>
	<span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 2fr 3fr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>  橫向呈現兩個元素，前者占 2/5，後者 3/5</p>
</li>
<li><p><code>auto</code> : 如果是搭配 fr 單位，會是子元素分配剩餘的空間</p>
</li>
</ul>
<p>如果有重複的版面，除了一個個手打，也可以利用 repeat 快速重複</p>
<ul>
<li><code>repeat(&lt;次數&gt;,&lt;單位&gt;)</code>  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">&#123;</span>
	<span class="token property">display</span><span class="token punctuation">:</span>grid<span class="token punctuation">;</span>
	<span class="token property">grid-template-columns</span> <span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>5<span class="token punctuation">,</span>1fr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
  容器會被橫向切成五塊。  <h4 id="gird-template-rows"><a href="#gird-template-rows" class="headerlink" title="gird-template-rows"></a>gird-template-rows</h4>直排間的大小，跟 columns 很像<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span>grid<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>
  <span class="token property">grid-template-columns</span> <span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>5<span class="token punctuation">,</span>1fr<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>5<span class="token punctuation">,</span>1fr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.item:nth-child(2n)</span><span class="token punctuation">&#123;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.item:nth-child(2n+1)</span><span class="token punctuation">&#123;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> #ccc<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
延伸上一個 columns 的例子，這樣就完成 5X5 的網格版面。<br>做個簡單的就是黑白棋盤格<br><img data-src="https://dsm01pap006files.storage.live.com/y4mWjsi1VFCz1a4Y4PYgBdGH4nr_koMsXMKau9gYdZw6NHUWT6BZTF5VZzybgEZeTgEWRW7yShbHrosym0pS8SwRMoz8afSelU59UktSX_elpmKmC2GyvE1HQY_PVkefILEXPrnQoaOVZqP-h3mlpRPRv7Ma6NWNF8bWxiFgg0LCDBQ5pAgdUJKSyhR__iTjKM-?width=1024&height=558&cropmode=none" alt="軌道式布局"></li>
</ul>
<h4 id="grid-template-混合式布局"><a href="#grid-template-混合式布局" class="headerlink" title="grid-template : 混合式布局"></a>grid-template : 混合式布局</h4><blockquote>
<p>先 row 再 column</p>
</blockquote>
<ul>
<li><p>grid-template : <code>&lt;rows-template&gt; / &lt;columns-template&gt;</code></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 軌道式 */</span>
<span class="token selector">.container</span><span class="token punctuation">&#123;</span>
	<span class="token comment">/* ...略 */</span>
  <span class="token property">grid-template</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>5<span class="token punctuation">,</span>1fr<span class="token punctuation">)</span> / <span class="token function">repeat</span><span class="token punctuation">(</span>5<span class="token punctuation">,</span>1fr<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>除了軌道也可以用命名式的，上面的例子可以改成，下面會再提到命名式的寫法    </p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 軌道式 */</span>
<span class="token selector">.container</span><span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span>grid<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>
  <span class="token property">grid-template</span><span class="token punctuation">:</span> 
    <span class="token string">". . . . ."</span>
    <span class="token string">". . . . ."</span>
    <span class="token string">". . . . ."</span>
    <span class="token string">". . . . ."</span>
    <span class="token string">". . . . ."</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img data-src="https://dsm01pap006files.storage.live.com/y4munCQNLVYAOI_NYCgXrtU1bv1eLPQS8Nb_33cNyi0-DhiHRAeXzLCZYZi73nysSdYiALn5Ht-_Hoj0uD1VBw3tiLw5HE95LAuvmENJX9hSx2GnjRXwx_yHe8D5LthivgCGVNW_EuGXFJ8I3fJAtqTZVAbSFx8Zxvx_1Av9IqqrTFpH78MQSYy0dVnBEuy4Eeo?width=1024&height=558&cropmode=none" alt="命名式布局"></p>
<h3 id="暗式格線（implicit-grid）"><a href="#暗式格線（implicit-grid）" class="headerlink" title="暗式格線（implicit grid）"></a>暗式格線（implicit grid）</h3><p>瀏覽器將剩餘的空間自行運用產生的<br>設定剩下沒有指定 template 的 rows</p>
<blockquote>
<p><strong>implicit grid 預設的寬度會根據內容的大小來改變</strong><br>如果 定格到超出的 track ，CSS 會自動補上 implicit grid</p>
</blockquote>
<h4 id="grid-auto-rows-amp-grid-auto-columns"><a href="#grid-auto-rows-amp-grid-auto-columns" class="headerlink" title="grid-auto-rows &amp;  grid-auto-columns"></a>grid-auto-rows &amp;  grid-auto-columns</h4><p>容器預設寬高。  </p>
</li>
<li><p> <code>minmax</code> 可以設定最小和最大值  </p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">&#123;</span>
	<span class="token property">grid-auto-rows</span> <span class="token punctuation">:</span> <span class="token function">minmax</span><span class="token punctuation">(</span>`&lt;min><span class="token punctuation">,</span>&lt;max>`<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="網格間距"><a href="#網格間距" class="headerlink" title="網格間距"></a>網格間距</h3><h4 id="grid-gap"><a href="#grid-gap" class="headerlink" title="grid-gap"></a>grid-gap</h4><ul>
<li><code>grid-gap-row</code> : 直向元素的間距</li>
<li><code>grid-gap-column</code> : 橫向元素的間距</li>
</ul>
<p>兩個合併設定 grid-gap :  <code>&lt;row&gt; &lt;column&gt;</code><br>一樣是 <strong>先 row 再 column</strong></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">&#123;</span>
	<span class="token property">grid-gap</span> <span class="token punctuation">:</span> &lt;row-gap> &lt;column-gap><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="另一種布局-命名式"><a href="#另一種布局-命名式" class="headerlink" title="另一種布局 : 命名式"></a>另一種布局 : 命名式</h2><h3 id="grid-template-areas-命名式布局"><a href="#grid-template-areas-命名式布局" class="headerlink" title="grid-template-areas : 命名式布局"></a>grid-template-areas : 命名式布局</h3><p>透過命名的方式給空間<br>在父層 <code>grid-template-areas</code> 定義版面<br>子層元素透過 <code>grid-area</code> 設定別名 </p>
<p>常見的範例，快速排出 <strong>三欄式布局</strong></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span>
	<span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
	<span class="token property">grid-template-areas</span> <span class="token punctuation">:</span> 
	<span class="token string">"header header"</span>
	<span class="token string">"sidebar content"</span>
	<span class="token string">"footer footer"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="grid-area-定格之命名式定格"><a href="#grid-area-定格之命名式定格" class="headerlink" title="grid-area : 定格之命名式定格"></a>grid-area : 定格之命名式定格</h3><p>上面有提到軌道式的合併寫法也可以 <code>grid-area</code> 起點 &amp; 終點，而在命名式布局可以對想要的元素命名，再到布局進行排列。  </p>
<p>延續上面的三欄式布局，對個別的區塊 <strong>命名</strong><br>再個別設定區塊大小。  <a href="https://codepen.io/shan473/pen/yLpjwaK">Codepen 三欄式</a></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span>
	<span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>
  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 100px 1fr<span class="token punctuation">;</span>
  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> 200px 1fr 64px<span class="token punctuation">;</span>
	<span class="token property">grid-template-areas</span> <span class="token punctuation">:</span> 
	<span class="token string">"header header"</span>
	<span class="token string">"sidebar content"</span>
	<span class="token string">"footer footer"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.header</span><span class="token punctuation">&#123;</span>
	<span class="token property">grid-area</span> <span class="token punctuation">:</span> header<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> #ccc<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.sidebar</span><span class="token punctuation">&#123;</span>
	<span class="token property">grid-area</span> <span class="token punctuation">:</span> sidebar<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> #fa0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.content</span><span class="token punctuation">&#123;</span>
	<span class="token property">grid-area</span> <span class="token punctuation">:</span> content <span class="token punctuation">;</span> 
  <span class="token property">background-color</span><span class="token punctuation">:</span> #0fa<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.footer</span><span class="token punctuation">&#123;</span>
	<span class="token property">grid-area</span> <span class="token punctuation">:</span> footer<span class="token punctuation">;</span> 
  <span class="token property">background-color</span><span class="token punctuation">:</span> violet<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>個人覺得這種方式很直覺，做常規版面規劃就可以很快速😃  </p>
<h2 id="grid-item-子項定格"><a href="#grid-item-子項定格" class="headerlink" title="grid-item 子項定格"></a>grid-item 子項定格</h2><h3 id="grid-row-column-start-amp-end-個別設定定格"><a href="#grid-row-column-start-amp-end-個別設定定格" class="headerlink" title="grid-row/column start &amp; end 個別設定定格"></a>grid-row/column start &amp; end 個別設定定格</h3><p>有兩種方式來讓格子被佔據</p>
<ol>
<li>軌道範圍</li>
<li>佔據格數 </li>
</ol>
<h4 id="透過軸線起終點來指定佔據的範圍"><a href="#透過軸線起終點來指定佔據的範圍" class="headerlink" title="透過軸線起終點來指定佔據的範圍"></a>透過軸線起終點來指定佔據的範圍</h4><ul>
<li><code>grid-column-start</code> :  column 的佔據軌道起點</li>
<li><code>grid-column-end</code> : column 的佔據軌道終點</li>
</ul>
<p>打開 Devtools 按下 grid 的格線視覺工具就可以看見<br><img data-src="https://dsm01pap006files.storage.live.com/y4mFIFKSjXekpoog3xRQ2ne9NlGlppe2cMmpEyFJah7PMyNkDaFqG3BIrKWtESIgciPHiZw_qqYVFJRFYWO0OHTqvcyjR_0APRrrlZb7mVrKDkTDLsBclQunblwKtk4aoAwiGEk-E8u68pOAqaRSyu6NQ2Cb69euzI-d_02dR7VNk2rk15g-bDZqscdaCPFbDn0?width=1024&height=588&cropmode=none" alt="Devtools grid"></p>
<p>合併寫法</p>
<ul>
<li><code>grid-column</code> : &lt;起點&gt; /  &lt;終點&gt;</li>
</ul>
<p>如果想要 <strong>占據整行</strong>，除了從 <strong>第一行 / 末行</strong> 這樣寫，也可以利用負數來達成。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-1</span><span class="token punctuation">&#123;</span>
	<span class="token property">grid-column</span> <span class="token punctuation">:</span> 1/-1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="span-數格數"><a href="#span-數格數" class="headerlink" title="span : 數格數"></a>span : 數格數</h4><p>預設 grid-column 是 <code>span 1</code>，就是按照 flow 占據一格  </p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-2</span><span class="token punctuation">&#123;</span>
	<span class="token property">grid-colum</span> <span class="token punctuation">:</span> span 2<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="grid-area-軌道混合式定格"><a href="#grid-area-軌道混合式定格" class="headerlink" title="grid-area : 軌道混合式定格"></a>grid-area : 軌道混合式定格</h3><p>grid-area : <code>&lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;</code>。</p>
<p>按照老規矩 <strong>先 row 開始再 column</strong></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span><span class="token punctuation">&#123;</span>
	<span class="token property">grid-area</span> <span class="token punctuation">:</span> 1 / 2 / 3 / 4 <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="order-順序"><a href="#order-順序" class="headerlink" title="order 順序"></a>order 順序</h2><p>跟 <code>flex</code> 一樣 grid 是可以改變順序的。  </p>
<ul>
<li><code>order : 0</code> 照原本的排序</li>
<li><code>order : -1</code> : order 也可以是負值，屬於往前排。    </li>
</ul>
<p>order 的起始點是從 <strong>整體的排列</strong> 後面開始算起。<br>首先要知道 grid 的排列順序，預設是 row ，也就是從 row 的尾巴開始，如果有兩列，就是從第二列的尾巴開始。  </p>
<iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/shan473/embed/vYpjMZW?default-tab=result&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/shan473/pen/vYpjMZW">
  Untitled</a> by YanShanHong (<a href="https://codepen.io/shan473">@shan473</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<h2 id="對齊"><a href="#對齊" class="headerlink" title="對齊"></a>對齊</h2><h3 id="整體垂直與水平對齊"><a href="#整體垂直與水平對齊" class="headerlink" title="整體垂直與水平對齊"></a>整體垂直與水平對齊</h3><p>設定在父層，控制 <strong>整個網格</strong> 的位置</p>
<ul>
<li><code>justify-content</code> : 所有的子項水平位置。</li>
<li><code>align-content</code> :  所有的子項垂直位置</li>
</ul>
<blockquote>
<p>   flex-end(start) 這是給 flexbox 用的，gird 寫法是 start 跟 end</p>
</blockquote>
<p>設定在父層，控制 <strong>所有網格中的內容對齊</strong></p>
<ul>
<li><code>justify-items</code> : 預設是 stretch，個別設定會按照子項內容的 <strong>寬</strong> 再去水平對齊。</li>
<li><code>align-items</code> : 預設是 stretch，個別設定會按照子項內容的 <strong>高</strong> 再去垂直對齊。</li>
</ul>
<h3 id="個別設定子項內容對齊"><a href="#個別設定子項內容對齊" class="headerlink" title="個別設定子項內容對齊"></a>個別設定子項內容對齊</h3><p>設定在子層，控制 <strong>個別網格中的內容對齊</strong><br>子項的內容物想要客製化的對齊，複寫 justify-items &amp; align-items 的控制。  </p>
<ul>
<li><code>align-self</code> : 預設是 stretch，使用跟 align-items 差不多。</li>
<li><code>justufy-self</code> :  預設是 stretch，使用跟 justify-items 差不多。</li>
</ul>
<iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/shan473/embed/PoEevZg?default-tab=result&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/shan473/pen/PoEevZg">
  Untitled</a> by YanShanHong (<a href="https://codepen.io/shan473">@shan473</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>


<h2 id="z-index-圖層"><a href="#z-index-圖層" class="headerlink" title="z-index 圖層"></a>z-index 圖層</h2><p>以往我們要用到 <code>z-index</code> 都會是在絕對定位的時候，在 grid 中是可以把項目堆疊的，透過 <code>z-index</code> 來前後順序。  </p>
<p>預設的圖層順序是 html 結構 <strong>後面的會覆蓋前面的</strong>，可以直接透過 <code>z-index</code> 改變順序。  </p>
<p>這個例子兩個有重疊的部分，item-5 寫上後蓋住了 item-1，為了讓 item-1 被看見，圖層寫得比 item-5 高就行了。  </p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-1</span><span class="token punctuation">&#123;</span>
  <span class="token property">grid-area</span><span class="token punctuation">:</span> 1 / 2 / 1 / 2<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
  <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.item-5</span><span class="token punctuation">&#123;</span>
  <span class="token property">grid-area</span><span class="token punctuation">:</span> 1 / 1 / 1 / 3<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>本篇還有很多 grid 的應用還沒研究到，未來再專研 !<br>很推 <strong>CSS-tricks</strong> 上的文章，很多寫法都很實用</p>
<h2 id="練習"><a href="#練習" class="headerlink" title="練習"></a>練習</h2><ul>
<li>以 <strong><a href="https://zh.wikipedia.org/wiki/%E7%9A%AE%E7%89%B9%C2%B7%E8%92%99%E5%BE%B7%E9%87%8C%E5%AE%89">皮特·蒙德里安</a></strong> 的《紅、藍、黃的構成》做為練習，說到網格自然就想到這幅畫  XD。<br>   <a href="https://codepen.io/shan473/pen/KKZRmRm">Codepen</a><br>   <img data-src="https://dsm01pap006files.storage.live.com/y4meQohOpsPirn8FgIW6-32dz_PV_9ldr3h7XdfuoLRBgBMVuweq_tSNsV7Osnk8yDBjyZhV4cVT0RuzJnF4Mf5bLcYc5KKVnVXBuu0bOvra6l8WSV33Yu6krcT-r8yl7TlqLB1ir3IPN2crKR6HWWWwN7avpOZB6UabLXjVNMBVnGxMiRl_8PrB3Gs8xKtehAv?width=1022&height=1024&cropmode=none" alt="CSS 版-紅、藍、黃的構成"></li>
<li>額外來自 Frontend Mentor 的練習題，利用 grid 進行排版<br><a href="https://meitung473.github.io/testimonials-grid-section-main/">Frontend Mentor | Rosa Hong</a></li>
<li>grid-graden (已破關) : <a href="https://cssgridgarden.com/">Grid Garden - A game for learning CSS grid </a>  <blockquote>
<p>心得 :<br>遊戲式的 grid 很容易理解，<br>template 除了正數以外，也可以使用 <strong>負數</strong>。<br>個人遇到 26 關卡了一下，其他掌握住如何算軌道跟知道格數怎麼應用就沒什麼障礙。對齊的部份，都在另一個 flexbox frog。</p>
</blockquote>
</li>
</ul>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul>
<li>快速查表 :  <a href="https://grid.malven.co/">GRID: A simple visual cheatsheet for CSS Grid Layout (malven.co)</a></li>
<li>好筆記 : <a href="https://pjchender.dev/css/css-grid-layout/">[CSS] Grid Layout | PJCHENder 未整理筆記</a></li>
<li>非常詳盡的圖文並茂解說 : <a href="https://css-tricks.com/snippets/css/complete-guide-grid/">A Complete Guide to Grid | CSS-Tricks - CSS-Tricks</a> 。我也很推 flexbox 的教學  </li>
</ul>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>Grid</tag>
      </tags>
  </entry>
  <entry>
    <title>CSSZeroToOneSeries | 07 | 導覽列 &amp; 變化導覽列</title>
    <url>/Frontend/CSS/CSSSeriesZeroToOne-07/</url>
    <content><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/abVaLWx">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4m9T4H16Ta75kDzYcQq5DvDiixK4mUT7-zgyeMbwFltHZbFafI5uejyNEI2PKXuVsHwbitph6KpHB-W1twOqWHvFYJXV0ZHqpaK31pEbAbsnH7ffzVJrY4jCn-DQT8BuQlWSI7mhiwxpMOte8vgXL82SlBMc9CDVnRs4GQaX5zSfAIPFEVdD6wo429FOHMt4kh?width=1024&height=133&cropmode=none" alt="導覽列"></p>
<p>LOGO 放中央的四種不同寫法導覽列<br><a href="https://codepen.io/shan473/pen/NWwLwmZ">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4mxh2kVWQGz5Y5blS98ignQpvNJzpOWFoegrfNdnwioXN37pRMs_UAXWIjV38dGFgg2z4HSQGInRsfJzwzxhUc1-TL4o4jsjhWV_PINth18C_qZ2JEo-KuJm3UAaU8ePorHvVKZABYHV6LJ9mgFTP4YdVPGUP2DmOSCmHehmX01KVzjrVlFs-xp9IVKe_3hKWO?width=660&height=444&cropmode=none" alt="變化導覽列"></p>
<span id="more"></span>

<h3 id="max-width-最大寬度"><a href="#max-width-最大寬度" class="headerlink" title="max-width : 最大寬度"></a>max-width : 最大寬度</h3><p>避免現代螢幕過寬(高解析度螢幕)導致元素被擠在邊邊，如果原本是 width 是填滿的情況，使用 <code>display : flex，justify-content : space-between</code>，元素會被分散在螢幕的邊邊角角。 </p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">&#123;</span>
  <span class="token property">max-width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="input-focus"><a href="#input-focus" class="headerlink" title="input : focus"></a>input : focus</h3><p>input 在打字時會有預設的外框線 **(outline)**，可以把框線消失，讓視覺體驗更加。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">input:foucs</span><span class="token punctuation">&#123;</span>
  <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="a-tag-不能-transform-的原因"><a href="#a-tag-不能-transform-的原因" class="headerlink" title="a tag 不能 transform 的原因"></a>a tag 不能 transform 的原因</h3><p>幫連結加上浮上去的漸變動畫， a 的預設 display 是 <code> inline</code>，會發現直接加上去 a 並不會有變化。  </p>
<p>實際上 inline 屬性的元素並不支援，修改 display 屬性就可以了。</p>
<p>參考 : </p>
<ul>
<li><a href="https://stackoverflow.com/questions/14883250/css-transform-doesnt-work-on-inline-elements">CSS transform doesn’t work on inline elements - Stack Overflow</a></li>
</ul>
<blockquote>
<p>根據 CSS 規格書，有提到區塊元素或者 <code>inline-auto</code> 這類才可以 transform。 </p>
</blockquote>
<h3 id="border-畫線效果"><a href="#border-畫線效果" class="headerlink" title="border 畫線效果"></a>border 畫線效果</h3><p>position 讓我們可以利用 top、bottom、left、right 四邊進行定位，也可以撐開全版面。<br>也可以利用偽元素的 <code>left</code>、<code>right</code> 來創造線條收縮的效果。  </p>
<blockquote>
<p>為什麼用偽元素 ? 這邊的底線只是 <strong>裝飾作用</strong> 不具任何資訊，盡量不要創造新的 tag 來裝</p>
</blockquote>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container nav a:after</span><span class="token punctuation">&#123;</span>
  <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span>50%<span class="token punctuation">;</span>
  <span class="token property">right</span><span class="token punctuation">:</span>50%<span class="token punctuation">;</span>
  <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid <span class="token function">var</span><span class="token punctuation">(</span>--txtColor<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">bottom</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
  <span class="token property">transition</span><span class="token punctuation">:</span>left .3s ease<span class="token punctuation">,</span>right .3 ease<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.container nav a:hover:after</span><span class="token punctuation">&#123;</span>
  <span class="token property">left</span><span class="token punctuation">:</span>1em<span class="token punctuation">;</span>
  <span class="token property">right</span><span class="token punctuation">:</span>1em<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>後來想想這樣的寫法不太好，原因在於 <a href="https://csstriggers.com/top"><code>top</code></a> 這類定位是會 <code>reflow</code> (重排)，效能上比較不好，選擇只有 <code>repaint</code> (重繪) 的 <a href="https://csstriggers.com/transform">transform</a></p>
</blockquote>
<p>改成 transform  </p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container nav a:after</span><span class="token punctuation">&#123;</span>
  <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>
  <span class="token property">bottom</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 0.1em<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">transform-origin</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> transform .3s ease<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.container nav a:hover:after</span><span class="token punctuation">&#123;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>.8<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>transition 不要使用 <code>all</code>，針對要件漸變的部分設定就好，以免效能上的浪費。</p>
</blockquote>
<h2 id="導覽列變化手法"><a href="#導覽列變化手法" class="headerlink" title="導覽列變化手法"></a>導覽列變化手法</h2><ol>
<li>把 LOGO 擺中間  </li>
<li>flexbox 改變 order  </li>
<li>直接改寫 HTML 結構</li>
<li>利用絕對定位   </li>
</ol>
<p>個人最喜歡 flexbox 的部份，既不修改結構，又保有彈性修改，哪天想讓 LOGO 到最前面只要修改 <code>order</code> 即可。 </p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSZeroToOneSeries</tag>
      </tags>
  </entry>
  <entry>
    <title>CSSZeroToOneSeries | 08 | 網站麵包屑</title>
    <url>/Frontend/CSS/CSSSeriesZeroToOne-08/</url>
    <content><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/MWOqRoJ">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4m2Ut7v52DvB4HXKmhJiPfdh0fC0SYoIg5T6XnWySFOIDNRpNgeG6BkVMmRRZ1qoFlUYVdtq9et8hdrrwbuKF_IqtJFFUTFY2ZI0HDP4tw4ma1Jx9JaMbE6WmvD7YYOv32FJlbpmUwIGLUMzWi1CyKgXyGm598Nl1TZPipEnVfdXC5t8p5GdEi7KevsBdw7Zou?width=1024&height=585&cropmode=none" alt="麵包屑"></p>
<span id="more"></span>
<h2 id="before-偽元素"><a href="#before-偽元素" class="headerlink" title="::before 偽元素"></a>::before 偽元素</h2><p><code>::before</code> 或是 <code>:before</code> 寫法都可以<br>利用 <code>content</code> 內容產生的箭頭，可以隨時替換<br>箭頭也屬裝飾性，不用再特別寫 html tag  </p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.breadcrumb li + li:before</span><span class="token punctuation">&#123;</span>
	<span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'>'</span><span class="token punctuation">;</span>
	<span class="token property">padding-left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>content 覺得圖案太少，也可以利用網頁編碼 UTF-8 的特殊字元來顯示</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.breadcrumb li + li:before</span><span class="token punctuation">&#123;</span>
	<span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'\003E'</span><span class="token punctuation">;</span>
	<span class="token property">padding-left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>這兩者是一樣的，但前提是要在 html 加入 <code>&lt;meta charset=&quot;utf-8&quot;&gt;</code> 設定編碼<br>參考 : <a href="https://www.toptal.com/designers/htmlarrows/">快速編碼箭頭</a></p>
<h2 id="再深入偽元素"><a href="#再深入偽元素" class="headerlink" title="再深入偽元素"></a>再深入偽元素</h2><h3 id="偽元素出現的位置"><a href="#偽元素出現的位置" class="headerlink" title="偽元素出現的位置 ?"></a>偽元素出現的位置 ?</h3><p>偽元素需要經過瀏覽器的運算跟渲染之後才會出現，所以 <strong>檢視原始碼</strong> 是看不到的</p>
<h3 id="content"><a href="#content" class="headerlink" title="content"></a>content</h3><p>偽元素一定要有 <code>content</code> ，不然就不會出現了<br>其中 content 包含各式各樣的屬性  </p>
<ol>
<li> none</li>
<li> normal</li>
<li> <code>string</code></li>
<li> url</li>
<li> <code>counter</code></li>
<li> <code>attr</code></li>
<li> open-quote</li>
<li> close-quote</li>
<li> no-open-quote</li>
<li> no-close-quote</li>
</ol>
<p>這邊舉例常見的幾個樣式  </p>
<h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>一般的文字或是空內容，拿來裝飾元素<br>像本篇的箭頭就是 string   </p>
<h3 id="counter-讓-css-數數"><a href="#counter-讓-css-數數" class="headerlink" title="counter : 讓 css 數數"></a>counter : 讓 css 數數</h3><p>在父層新建一個 reset 計時器<br><code>counter-reset : &lt;計時器名稱&gt; &lt;起始值&gt;</code>，如果沒有寫起始值是從 0 開始  </p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span>
	<span class="token property">counter-reset</span><span class="token punctuation">:</span> Section 0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>其實也可以多層  </p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span>
	<span class="token property">counter-reset</span><span class="token punctuation">:</span> Section 0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">section</span><span class="token punctuation">&#123;</span>
  <span class="token property">counter-reset</span><span class="token punctuation">:</span> P 0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">section:before</span><span class="token punctuation">&#123;</span>
	<span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'Section'</span> <span class="token function">counter</span><span class="token punctuation">(</span>Section<span class="token punctuation">)</span><span class="token string">' .'</span><span class="token punctuation">;</span>
	<span class="token property">counter-increment</span><span class="token punctuation">:</span> Section 1<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>
<span class="token selector">p:before</span><span class="token punctuation">&#123;</span>
	<span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'P'</span> <span class="token function">counter</span><span class="token punctuation">(</span>Section<span class="token punctuation">)</span><span class="token string">'-'</span><span class="token function">counter</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token string">' .'</span><span class="token punctuation">;</span>
	<span class="token property">counter-increment</span><span class="token punctuation">:</span> P 1<span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>子層的偽元素可以使用 counter 進行計數</p>
<ul>
<li>content : counter(<code>&lt;計數器名稱&gt;</code>)</li>
<li>counter-increment : <code>&lt;計數器名稱&gt; &lt;要增加的數字&gt;</code> 也可以是負數       </li>
</ul>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span>
	<span class="token property">counter-reset</span><span class="token punctuation">:</span> Title<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">h1:before</span><span class="token punctuation">&#123;</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'Title '</span><span class="token function">counter</span><span class="token punctuation">(</span>Title<span class="token punctuation">)</span><span class="token string">' .'</span><span class="token punctuation">;</span>
  <span class="token property">counter-increment</span><span class="token punctuation">:</span> Title 1<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="attr"><a href="#attr" class="headerlink" title="attr"></a>attr</h3><p>可以拿到 <code>data-</code> 屬性的值，如果跟資料有關的不要放在偽元素，瀏覽器在解析時是讀取不到的。  </p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">data-title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>商店<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">data-title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>品項<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">data-title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>貨物<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">span:before</span><span class="token punctuation">&#123;</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">attr</span><span class="token punctuation">(</span>data-title<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<iframe height="300" style="width: 100%;" scrolling="no" title="css counter" src="https://codepen.io/shan473/embed/podGNON?default-tab=result&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/shan473/pen/podGNON">
  css counter</a> by YanShanHong (<a href="https://codepen.io/shan473">@shan473</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>


<h3 id="url-沒作用的圖片"><a href="#url-沒作用的圖片" class="headerlink" title="url 沒作用的圖片"></a>url 沒作用的圖片</h3><p>content 中的 <a href="http://csscoke.com/2013/09/22/%E4%BD%BF%E7%94%A8before-%E8%88%87-after%E4%BE%86%E8%A3%BD%E4%BD%9C%E5%8F%AF%E5%88%97%E5%8D%B0%E7%9A%84logo%E5%9C%96%E7%89%87/">url 圖片雖然能被列印出來</a>，但不能調整寬高尺寸，只能利用 scale 來縮放。</p>
<p>根據 <a href="https://segmentfault.com/q/1010000004569689">這篇文</a>，偽元素預設是 inline 的一種，就算調成 block，因為 content 並不是實際計算範圍，block 算的是匿名元素的 <code>width</code> 跟 <code>height</code>  </p>
<p>真的想放圖片可以使用 background-imge，再透過 background-size 調整大小，但是就不能被影印</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>為了 SEO 著想，偽元素出現在裝飾性上就好，資訊類就不建議了</p>
<h2 id="兄弟選擇器-，我的隔壁"><a href="#兄弟選擇器-，我的隔壁" class="headerlink" title="兄弟選擇器 (+) ，我的隔壁"></a>兄弟選擇器 (+) ，我的隔壁</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>排擠我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我有<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我有<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我是防守員<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>排擠我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我有<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">a + a</span><span class="token punctuation">&#123;</span>
	<span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>在 sass 會寫 <code>&amp; + &amp;</code>，通常是排除第一個，因為第一個的前面並沒有元素  </p>
<p>或者寫 <code>:not</code> 把第一個給排除掉  </p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">a</span><span class="token punctuation">:</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token punctuation">:</span>first-child<span class="token punctuation">)</span>
	<span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="網頁色彩-HSL"><a href="#網頁色彩-HSL" class="headerlink" title="網頁色彩 HSL"></a>網頁色彩 HSL</h2><p><code>hsl (色相角度&lt;0~360&gt; , 色彩飽和度 , 色彩的明度 )</code><br>色彩是 RGB，分別各佔 120 度    </p>
<p><a href="http://csscoke.com/2015/01/01/rgb-hsl-hex/"><img data-src="https://dsm01pap006files.storage.live.com/y4mzaFTHqTQKFWQ2sQ_sISqYOCtvikOQA4Dmli4z7vpaNjUQ7Nirr4UbVRGbiS9uCI9vba3kPgs7-_xx4wqwjkXxMs-VnajXcBBhswICqcXV54qi9lLN5lSAO_A-G5MdHISuaULUSfhoHKbgA1KFfLD6bcojrfSyoJJqCwIodr7i0AGpp8ainTKi0Fl7MV7y3XO?width=500&height=424&cropmode=none" alt="HSL 色相環圖片"> 來自《RGB、HSL、Hex 網頁色彩碼，看完這篇全懂了 | CSS可樂》</a>  </p>
<ul>
<li><code>Hue</code> : 色相</li>
<li><code>Saturation</code> : 飽和度。 預設是 100%，越低越接近灰黑</li>
<li><code>Lightness</code> : 亮度。 預設是 50%。 有點像相機的曝光度，增加白色或黑色的量</li>
</ul>
<p>例 :  綠色  <code>hsl (120,100%,50%)</code></p>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol>
<li><a href="https://segmentfault.com/q/1010000004569689">伪类before/after中的图片大小是不是不能设置的? - SegmentFault 思否</a>   </li>
<li><a href="http://csscoke.com/2013/09/22/%E4%BD%BF%E7%94%A8before-%E8%88%87-after%E4%BE%86%E8%A3%BD%E4%BD%9C%E5%8F%AF%E5%88%97%E5%8D%B0%E7%9A%84logo%E5%9C%96%E7%89%87/">使用::before 與 ::after來製作可列印的logo圖片</a>  </li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSZeroToOneSeries</tag>
      </tags>
  </entry>
  <entry>
    <title>CSSZeroToOneSeries | 09 | 方塊酥版</title>
    <url>/Frontend/CSS/CSSSeriesZeroToOne-09/</url>
    <content><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/wvPYowG?editors=0100">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4mRHJR5nKjd7Mry0fH-Eevw_EuUBALAe_xSDwFAsLc-jhOf9MVukfDscCyR0aOVgn_lXXMo0TTA9P005lZ17bfeeA1u1cH1pUKDVEDHN8e9zgJptSKT1iav8eWY0i6YhYCS8uM0UuTvFQpSWlDK4sLzuIjHGVDA8aLixITKrKveAHX73wjxjTY1VgK64Xx19fM?width=1024&height=585&cropmode=none" alt="方塊酥版"></p>
<span id="more"></span>

<h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><p>子層設定 float 的時候，會脫離原本的排版序，會導致父層的高度錯誤或抓不到，就要清除浮動 (clearfix)，以免後面的元素不照順序擠上來。</p>
<h4 id="清除浮動-overflow"><a href="#清除浮動-overflow" class="headerlink" title="清除浮動 : overflow"></a>清除浮動 : overflow</h4><blockquote>
<p>父層消除 float </p>
</blockquote>
<p>父層 <code>overflow:hidden</code> ，讓父層可以抓到子層的高度。<br>overflow 是處理多餘的內容，hidden 隱藏起來</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>左邊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>右邊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我要在下面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span><span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> #fa0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.left</span><span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span>80%<span class="token punctuation">;</span>
  <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.right</span><span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span>20%<span class="token punctuation">;</span>
  <span class="token property">float</span><span class="token punctuation">:</span>right<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="清除浮動-多一個-clearfix-元素"><a href="#清除浮動-多一個-clearfix-元素" class="headerlink" title="清除浮動 : 多一個 clearfix 元素"></a>清除浮動 : 多一個 clearfix 元素</h4><blockquote>
<p>重點在於子元素，如果下一個想要按照自己的流向排，可以在前面加上 <code>clearfix</code> 斬斷 float 的排版</p>
</blockquote>
<p>在想要正常排版在子元素屁股後面，設定 <code>clear : both</code></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>float 左邊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>float 右邊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>按照老方法往下排<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.left</span><span class="token punctuation">&#123;</span>
 <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.right</span><span class="token punctuation">&#123;</span>
 <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.clearfix</span><span class="token punctuation">&#123;</span>
	<span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>按下開關可以看有無 float 的效果   </p>
<iframe height="300" style="width: 100%;" scrolling="no" title="float clearfix" src="https://codepen.io/shan473/embed/NWwObjj?default-tab=result&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/shan473/pen/NWwObjj">
  float clearfix</a> by YanShanHong (<a href="https://codepen.io/shan473">@shan473</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<h4 id="清除浮動-父層-after"><a href="#清除浮動-父層-after" class="headerlink" title="清除浮動 : 父層 :after"></a>清除浮動 : 父層 :after</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>左邊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>右邊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我要在下面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span><span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> #fa0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.box >div</span><span class="token punctuation">&#123;</span>
	<span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.box:after</span><span class="token punctuation">&#123;</span>
	<span class="token property">content</span> <span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">;</span>
	<span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span>
	<span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>偽元素一定要設定 <code>block</code>，讓寬度撐開  </p>
</blockquote>
<h3 id="波浪號選擇器"><a href="#波浪號選擇器" class="headerlink" title="~ 波浪號選擇器"></a>~ 波浪號選擇器</h3><p>波浪號是兄弟選擇器，在同一層的後面兄弟都選起來</p>
<p>常用 <strong>第一個  ~  到底的元素</strong> 都選起來，<a href="../CSSSeriesZeroToOne-08.md">08 篇</a> 的麵包屑除了 <code>(p + p)</code>，波浪號也可以使用</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>no.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>no.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>no.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>no.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p:first-child ~p</span><span class="token punctuation">&#123;</span>
	<span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>另一種是想選到同一層的某個東西(們)，除了直接選取外，也可以透過 波浪號</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是一段文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是 span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是 span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>我是連結<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>我是連結<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是 span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p~a</span><span class="token punctuation">&#123;</span>
	<span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="not-排擠你"><a href="#not-排擠你" class="headerlink" title=":not : 排擠你"></a>:not : 排擠你</h3><p>屬於逆向思考，如果要選取除了第一個以外的其他方框，除了用波浪號</p>
<ul>
<li>一般波浪號排擠  </li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>波浪號式排擠<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>一號走開<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>一號走開<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>一號走開<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p~p</span><span class="token punctuation">&#123;</span>
	<span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>:not</code> : 排擠，麻瓜翻譯機，要選到 <strong>非第一個的 p</strong></li>
</ul>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p:not(:first-child)</span><span class="token punctuation">&#123;</span>
	<span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="試著用-Grid"><a href="#試著用-Grid" class="headerlink" title="試著用 Grid"></a>試著用 Grid</h2><p>同樣的架構，把 float 去除，利用軌道線進行排版。<br><a href="https://codepen.io/shan473/pen/ZEvRByL?editors=0100">Codepen</a></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.wrapper</span><span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span>grid<span class="token punctuation">;</span>
  <span class="token property">grid-template</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>3<span class="token punctuation">,</span>1fr<span class="token punctuation">)</span> / <span class="token function">repeat</span><span class="token punctuation">(</span>4<span class="token punctuation">,</span>1fr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.item:first-child</span><span class="token punctuation">&#123;</span>
  <span class="token property">grid-area</span><span class="token punctuation">:</span> 1 / 1 / 3 / 3<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol>
<li><a href="https://medium.com/ui-ux%E7%B7%B4%E5%8A%9F%E5%9D%8A/%E8%A7%A3%E9%99%A4-float-%E5%B1%AC%E6%80%A7%E7%9A%84%E6%96%B9%E6%B3%95-5e29cc30777d">解除 float 屬性的方法. 使用 float 屬性一定要清除浮動，否則會有版面錯置或失去高度的情況</a></li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSZeroToOneSeries</tag>
      </tags>
  </entry>
  <entry>
    <title>CSSZeroToOneSeries  | 10 | 破格式設計</title>
    <url>/Frontend/CSS/CSSSeriesZeroToOne-10/</url>
    <content><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/QWOZgzP">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4mc1SNrsZu-Jd9u35WNRJfQgL79lh5rKUE-T708KZoUgmfj1e0iFbqwtXItGPmNayXFew5OcaISpno8uR1h5a0KOuWpfs9NvwytLMedU4ijzl-h2mJT3AKapQU7kA5rNBSPp_QOV-6viFwczOvlSgU65TDbCQlby6ccQSZ4Rvcith2HND8fQOqhBUHkD3FrJAo?width=1024&height=586&cropmode=none" alt="破格式設計"></p>
<span id="more"></span>
<h3 id="margin-值的數量"><a href="#margin-值的數量" class="headerlink" title="margin 值的數量"></a>margin 值的數量</h3><ul>
<li>兩個數值<br>  margin : &lt;上下&gt;  &lt;左右&gt;</li>
<li>四個數值<br>  margin : &lt;上&gt; &lt;右&gt; &lt;下&gt; &lt;左&gt;</li>
<li>三個數值<br>  margin : &lt;上&gt; &lt;左右&gt; &lt;下&gt;</li>
</ul>
<p>比較常用到置中 <code>margin : 0 auto</code>，auto 是把剩餘的空間分配給左右，因此才會置中。<br>實際上 margin : auto ，雖然是寫全部自動分配，但是 <a href="https://www.zhihu.com/question/21644198">上下並沒有作用</a>。  </p>
<p>css 的預設 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/writing-mode">write-mode (書寫模式)</a> 的方向是 <strong>水平</strong> 的，當我們用 margin-top : auto 或 margin-bottom : auto ，因為高度並無固定值，無法參照，剩餘空間也是 0 。</p>
<h3 id="line-height-單行垂直居中"><a href="#line-height-單行垂直居中" class="headerlink" title="line-height 單行垂直居中"></a>line-height 單行垂直居中</h3><p>如果是文字單行居中容器，可以把 <code>line-height</code> 設定跟容器高一樣  </p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span><span class="token punctuation">&#123;</span>
	<span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
	<span class="token property">line-height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="border-區塊位置計算-要記得扣掉"><a href="#border-區塊位置計算-要記得扣掉" class="headerlink" title="border 區塊位置計算 : 要記得扣掉"></a>border 區塊位置計算 : 要記得扣掉</h3><p>實作是 icon 的利用 <code>:before</code> 的 border 做圓框，粗度是 10 px。<br><code>top : 0、left : 0</code>，把版面定位到父層起始左上角一樣，此時 border 粗度上下左右都會增長 10px，如果要置中，必須把 border 多出來的在 top、left 扣掉，元素才能擺到中間填滿。  </p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.icon:before</span><span class="token punctuation">&#123;</span>
	<span class="token property">position</span> <span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
	<span class="token property">border</span><span class="token punctuation">:</span> 10px solid red<span class="token punctuation">;</span>
	<span class="token property">top</span><span class="token punctuation">:</span> -10px<span class="token punctuation">;</span>
	<span class="token property">left</span><span class="token punctuation">:</span> -10px<span class="token punctuation">;</span>
	<span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
	<span class="token property">width</span> <span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="border-上下左右的呈現方式"><a href="#border-上下左右的呈現方式" class="headerlink" title="border 上下左右的呈現方式"></a>border 上下左右的呈現方式</h3><p>以半圓框為例，我們知道 border 的切齊點是對角線 (下圖)，變成圓形的話，上下左右並不是剛好從 0 切齊到 90 度<br>如果想要得到半圓，必須是鄰近兩個 border 再做旋轉 45 度。   </p>
<ul>
<li>width、height 為 0 ，單純的 border  </li>
</ul>
<p><img data-src="https://dsm01pap006files.storage.live.com/y4mVu7eeg2awMupFoD5T_nq55dVmzodISxqWR8paqvV46NhzCf4-VPLWZ0Xlm_JLUFsOCEGTcqVb6SoH4icdXFX9V3ZLR39nFB5YYYyNr-ENP529_4MNud_lE-ksXUdUOblMf7y8cah3KcaOjNIgJr_9l8o-fXeE4FZotOCa1CSDMl5pHcz4tP-0UtZeuurM5DG?width=496&height=488&cropmode=none" alt="純 border 圓形">  </p>
<blockquote>
<p>正確的半圓是相鄰兩邊的 border 組合出來的<br>像是 <a href="../CSSSeriesZeroToOne-03/#%E8%A3%9C%E5%85%85-%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E9%99%B0%E5%BD%B1">03 篇</a>能出現陰影的三角形一樣的概念</p>
</blockquote>
<h3 id="子層物件整體高度超出父層-padding-擠回去"><a href="#子層物件整體高度超出父層-padding-擠回去" class="headerlink" title="子層物件整體高度超出父層 : padding 擠回去"></a>子層物件整體高度超出父層 : padding 擠回去</h3><p>因為 icon margin-top 是 -75 px，比原本父層凸出 75 px ，必須在整體的 padding 把多的補回去，把子容器的元素都包含在內。</p>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol>
<li><a href="https://www.zhihu.com/question/21644198">为什么「margin:auto」可以让块级元素水平居中？</a></li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSZeroToOneSeries</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - Closure 閉包(I) 基礎概念</title>
    <url>/Frontend/JavaScript/JavaScript-Closure-I/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Closure 是 JavaScript 很重要的基礎<br>藉由本篇幫助自己釐清 Closure 的概念  </p>
<span id="more"></span>

<h2 id="先認識-Scope-Chain"><a href="#先認識-Scope-Chain" class="headerlink" title="先認識 Scope Chain"></a>先認識 Scope Chain</h2><p><a href="https://blog.rosa.tw/Frontend/JavaScript/JavaScript-Hoisting-II/?highlight=scope#%E4%BD%9C%E7%94%A8%E5%9F%9F-Scope">Scope</a> 是變數生存的範圍，如果在自己層級找不到就會一層一層往外找，直到 Global 為止。  </p>
<p>這種行為就稱為「<strong>範圍鏈</strong>」(Scope Chain)。</p>
<blockquote>
<p>範圍鏈是在函式<strong>被定義的當下決定</strong> (lexical scope 來決定)的，不是在被呼叫的時候決定。</p>
</blockquote>
<h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'global'</span>
<span class="token keyword">function</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> a  <span class="token operator">=</span> <span class="token string">'change'</span>
	<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// change</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">//global</span>
<span class="token punctuation">&#125;</span>
<span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>一開始會以為 <code>test()</code> 在 change 裡面呼叫，取得的變數 a 是 change 對不對 ? </p>
<p>NO NO NO,再重複一次 !      </p>
<blockquote>
<p>範圍鏈是在函式<strong>被定義的當下決定</strong> 的，不是在被呼叫的時候決定。</p>
</blockquote>
<p><code>test</code> 函式在 Lexical Environments 是 gloabal 的下一層，Scope Chain 是根據 Lexical scope 決定，往上找是 gloabl 那層，所以結果才會是 <code>&#39;global&#39;</code></p>
<h2 id="為什麼要有-Closure"><a href="#為什麼要有-Closure" class="headerlink" title="為什麼要有 Closure ?"></a>為什麼要有 Closure ?</h2><blockquote>
<p>反問 👉 <strong>沒有 Closure 會怎樣 ?</strong></p>
</blockquote>
<p>我們知道 Execution Context 執行環境在執行完 function 後，Stack 會抽掉，有關這個 function 的一切變數也會被回收而且不可再使用。</p>
<ul>
<li>如果要使用 function 裡的變數呢 ? (<code>private variable</code> 的概念)</li>
</ul>
<p>直覺可能會丟到 <code>global</code> 進行宣告，但當專案結構逐漸龐大，久而久之會造成 <strong>全域變數汙染</strong>  </p>
<p><strong>那閉包的出現解決了…</strong> :</p>
<ul>
<li>自由變數 (free variable)，只有在 function 內部可讀取變數，在外部則無法讀取。</li>
<li>變數暫存，減少重複的複雜計算</li>
</ul>
<h2 id="Closure-的優缺點"><a href="#Closure-的優缺點" class="headerlink" title="Closure 的優缺點"></a>Closure 的優缺點</h2><ul>
<li><p>優點 : </p>
<ol>
<li>避免 <strong>全域變數汙染</strong></li>
<li>提供 <strong>自由變數</strong>，讓該 function 執行完後，變數的作用域不會因 function 結束被回收，而是會繼續存在。</li>
<li>避免重複執行龐大的計算<br> 可以記錄前一次計算的狀態，下一次再呼叫不用重算一次 (cache 的概念)。  </li>
<li>在多人協作的時候，有些隱密的資訊不想讓人去修改，可以使用封裝閉包的方式。<br> 別人必須依照固定的寫法來取得資料，且不能修改到內部的資訊。<br> 在開源資料或 API 的方法常使用這樣的方式，以免改動到內部數值。</li>
</ol>
</li>
<li><p>缺點 :</p>
<ol>
<li>可能保留到一些不必要的變數或資訊，造成資源多餘消耗。</li>
<li>只能使用涵式提供的方法，因為內部的資訊被隱蔽，在更動上較不彈性。<br>  (但是相反如果不想要被改動會是優點)  </li>
</ol>
</li>
</ul>
<h2 id="什麼是閉包"><a href="#什麼是閉包" class="headerlink" title="什麼是閉包 ?"></a>什麼是閉包 ?</h2><p>除了自己本身的程式碼外，也可以取得了<strong>內部函式「當時環境」的變數值</strong>，記住了執行當時的環境，這就是「閉包」。 </p>
<h2 id="簡單的-Closure-範例"><a href="#簡單的-Closure-範例" class="headerlink" title="簡單的 Closure 範例"></a>簡單的 Closure 範例</h2><ul>
<li><p>沒有使用閉包  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> rate <span class="token operator">=</span> <span class="token number">.75</span>
<span class="token keyword">function</span> <span class="token function">itmePrice</span><span class="token punctuation">(</span><span class="token parameter">price</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> price <span class="token operator">>=</span> <span class="token number">100</span> <span class="token operator">?</span> price<span class="token operator">*</span>rate <span class="token operator">:</span> price
<span class="token punctuation">&#125;</span>
rate <span class="token operator">=</span> <span class="token number">.1</span> 
<span class="token keyword">let</span> bag <span class="token operator">=</span> <span class="token function">itmePrice</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>可以透過直接修改數值 (👎)<br>任何人都可以在外部進行修改</p>
</blockquote>
</li>
<li><p>使用閉包</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">itmePrice</span><span class="token punctuation">(</span><span class="token parameter">price</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token comment">// 把 rate 變成私有變數</span>
	<span class="token keyword">var</span> rate <span class="token operator">=</span> <span class="token number">.75</span>
	<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> price <span class="token operator">>=</span> <span class="token number">100</span> <span class="token operator">?</span> price<span class="token operator">*</span>rate <span class="token operator">:</span> price
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> bag <span class="token operator">=</span> <span class="token function">itmePrice</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>只要呼叫需要的東西即可 (👍)<br>不會被外部修改</p>
</blockquote>
</li>
</ul>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol>
<li><a href="https://blog.huli.tw/2018/12/08/javascript-closure/">所有的函式都是閉包：談 JS 中的作用域與 Closure - Huli</a></li>
<li><a href="https://javascript.info/closure#lexical-environment">Variable scope, closure</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10193009">重新認識 JavaScript: Day 19 閉包 Closure</a></li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - Closure 閉包(II) 常見陷阱題</title>
    <url>/Frontend/JavaScript/JavaScript-Closure-II/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前學習閉包沒辦法很容易連結到<br>尤其 Function 有一堆名詞變異體<br>總會好奇實際的應用情境   </p>
<p>那發生什麼問題才會使用到 Closure 呢?<br>又怎麼在真正的專案解決問題 ?   </p>
<span id="more"></span>
<h2 id="問題-在迴圈中呼叫函式"><a href="#問題-在迴圈中呼叫函式" class="headerlink" title="問題 : 在迴圈中呼叫函式"></a>問題 : 在迴圈中呼叫函式</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
  arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> 
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>複習一下 :</p>
<blockquote>
<p><code>var</code> 的切分單位是 <code>function</code>  </p>
</blockquote>
<p>直覺來說會覺得 <code>i</code> 是會按順序列出<br>結果是 <code>5 5</code><br>因為 for 設立的 <code>i</code> 會存在 global 中  </p>
<p><strong>試著把運作拆開來</strong> </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>當迴圈跑完時， <code>i</code> 是 5，<code>var i  = 5</code><br>因為 5 不符合迴圈條件跳出<br>所以不管 <code>arr[?]()</code>，直接印出 <code>i</code> 是 5    </p>
<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><h4 id="閉包"><a href="#閉包" class="headerlink" title="閉包"></a>閉包</h4><p>把 function 獨立出來  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">logN</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//閉包，記住當下的 i</span>
<span class="token keyword">function</span> <span class="token function">logN</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//0</span>
arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="IIFE"><a href="#IIFE" class="headerlink" title="IIFE"></a>IIFE</h4><p>IIFE(Immediately Invoked Function Expression) 定義完就回傳的 function</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//拿到當下的 i</span>
  arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	 <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
	 <span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//0</span>
arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>把原本有名的函式改為匿名函式，用<code>()</code>包裹 function，尾巴是帶入參數<code>(參數)</code>，沒有的話為空</p>
<h4 id="ES6-的-let"><a href="#ES6-的-let" class="headerlink" title="ES6 的 let"></a>ES6 的 let</h4><p>上面出現的原因都是 <code>var</code> 的 scope 問題<br>ES6 的 let 將作用域限制在 block <code>&#123;&#125;</code>  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> 
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>只要 <code>var -&gt; let</code> ， 就解決問題了，離開之後就不會保留。</p>
</blockquote>
<h2 id="Closure-應用"><a href="#Closure-應用" class="headerlink" title="Closure 應用"></a>Closure 應用</h2><h3 id="Cache-暫存"><a href="#Cache-暫存" class="headerlink" title="Cache 暫存"></a>Cache 暫存</h3><p>計算量大的時候避免重新計算，預先把已算好的值存起來  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token comment">// 複雜計算</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'calculate'</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> num<span class="token operator">*</span>num<span class="token operator">*</span>num
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">cache</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token comment">// 查看是不是有算過</span>
  <span class="token keyword">var</span> ans <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//有的話回傳索引裡的值</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> ans<span class="token punctuation">[</span>num<span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 沒有的話才做重新計算</span>
    ans<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">[</span>num<span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> cacheComplex <span class="token operator">=</span> <span class="token function">cahe</span><span class="token punctuation">(</span>complex<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">cacheComplex</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 第一次計算</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">cacheComplex</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 從 cache 拿到的值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">cacheComplex</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 從 cache 拿到的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>用 <code>console.time</code> 計時執行的時間<br>比起直接用 complex 算再重新算<br>會發現第二次的計算的時間明顯縮短很多  </p>
<h3 id="隱匿資訊"><a href="#隱匿資訊" class="headerlink" title="隱匿資訊"></a>隱匿資訊</h3><p>想隱匿一些資訊，讓別人不可以直接更改。<br>把方法以及變數封裝在內部，別人要調用只能呼叫你規定好的方法。  </p>
<ul>
<li>以簡易計算機為例<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token parameter">initNum</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
 <span class="token keyword">var</span> sum <span class="token operator">=</span> initNum
 <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
	 <span class="token function-variable function">add</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	    <span class="token keyword">return</span> sum <span class="token operator">+=</span>num
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	 <span class="token function-variable function">minus</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	    <span class="token keyword">return</span> sum <span class="token operator">-=</span>num
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	 <span class="token function-variable function">mutiply</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		    <span class="token keyword">return</span> sum <span class="token operator">*=</span>num
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	 <span class="token function-variable function">divided</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		    <span class="token keyword">return</span> sum<span class="token operator">/=</span>num
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	 <span class="token function-variable function">getresult</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		    <span class="token keyword">return</span> sum
		<span class="token punctuation">&#125;</span>
 	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> counter1 <span class="token operator">=</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> counter2 <span class="token operator">=</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
counter1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
counter2<span class="token punctuation">.</span><span class="token function">mutiply</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter1<span class="token punctuation">.</span><span class="token function">getresult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter2<span class="token punctuation">.</span><span class="token function">getresult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
一個簡單的計算機 (?)🤔<br>counter1 跟 counter2 並不會影響到彼此<br>我們只能透過現有的方法來修改 sum 的值  </li>
</ul>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>閉包讓我感覺是很神奇的東西<br>看起來不熟悉，但實際上我們都用到了🤔     </p>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul>
<li><a href="https://lidemy.com/courses/enrolled/390599"> [JS201] 進階 JavaScript：那些你一直搞不懂的地方 </a></li>
</ul>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - 事件機制原理 &amp; 事件代理</title>
    <url>/Frontend/JavaScript/JavaScript-EventFlow-EventListener/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>事件是什麼 ? 為什麼要用事件代理呢 ?<br>在不了解事件的流程與運作機制，是不是遇過點一下元素<br>結果跑出兩次以上的結果<br>透過本篇幫自己釐清事件各種大小事</p>
<span id="more"></span>  

<h2 id="EventFlow-網頁元素接收事件的順序"><a href="#EventFlow-網頁元素接收事件的順序" class="headerlink" title="EventFlow : 網頁元素接收事件的順序"></a>EventFlow : 網頁元素接收事件的順序</h2><p><img data-src="https://dsm01pap006files.storage.live.com/y4m9V74R0Rbxh2VocqOo5K1vnxJNiyqAL1pr2Vw2o2yxenGxG5Uq3iMSm5n1bXDNs7hubkxY7rtnZfQtgz3tSNPDcX22k_WWBKKto5w_fnALPe1MSGDNDjlF11Yr7svwp8O0b8PmsLyMikVMa0Be3EWrsugI0ZsfWzkq9aYgX7R48Jm2YL0dJs6VWHvl3tqxowk?width=1208&height=1160&cropmode=none" alt="EventFlow"></p>
<ul>
<li><code>Capture phase</code> : 捕獲階段指由 <strong>上到下</strong> 傳下去的</li>
<li><code>Target phase</code> : 目標階段，本身被作用的目標才會在這個階段</li>
<li><code>Bubbling phase</code> : 冒泡階段 指由 <strong>下往上</strong> 傳去的</li>
</ul>
<p>透過 <code>e.eventPhase</code> 可以看見事件的階段<br>當我點下 link  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'link capturing'</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>eventPhase<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>
link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'link bubbling'</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>eventPhase<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'box capturing'</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>eventPhase<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>
box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'box bubbling'</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>eventPhase<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">box capturing <span class="token number">1</span>  <span class="token comment">// CAPTURING_PHASE</span>
link capturing <span class="token number">2</span> <span class="token comment">// AT_TARGET </span>
link bubbling <span class="token number">2</span> <span class="token comment">// AT_TARGET </span>
box bubbling <span class="token number">3</span> <span class="token comment">// BUBBLING_PHASE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>出現的代碼就是事件的不同階段  </p>
<h3 id="事件冒泡-Event-Bubbling"><a href="#事件冒泡-Event-Bubbling" class="headerlink" title="事件冒泡 (Event Bubbling)"></a>事件冒泡 (Event Bubbling)</h3><p>啟動事件的元素往上傳遞到 <strong>根節點</strong> (document)  </p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>TITLE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>CLICK<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>冒泡傳遞方向 :<br>CLICK 事件本身元素 👉 body 👉 html 👉 document   </p>
<h3 id="事件捕獲-Event-Capturing"><a href="#事件捕獲-Event-Capturing" class="headerlink" title="事件捕獲 (Event Capturing)"></a>事件捕獲 (Event Capturing)</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>TITLE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>CLICK<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>捕獲傳遞方向 :<br>document 👉html 👉 body 👉CLICK 事件本身元素  </p>
<h3 id="事件是哪種機制"><a href="#事件是哪種機制" class="headerlink" title="事件是哪種機制 ?"></a>事件是哪種機制 ?</h3><p>兩種都會，當我按下按鈕，如果外層元素也有綁定 <strong>事件</strong>，同時也會被觸發</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.outer'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.inner'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>結果</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">hello
hi <span class="token comment">// 冒泡而觸發</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>點擊 <code>inner</code> 時，同時出現 hello 跟 hi<br>因為冒泡的關係，outer 也被觸發。  </p>
<h3 id="事件的捕獲-amp-冒泡順序"><a href="#事件的捕獲-amp-冒泡順序" class="headerlink" title="事件的捕獲 &amp; 冒泡順序 ?"></a>事件的捕獲 &amp; 冒泡順序 ?</h3><ul>
<li><p>對於 <strong>非觸發事件</strong> 本身的元素</p>
<blockquote>
<p>先捕獲後冒泡</p>
</blockquote>
</li>
<li><p>事件本身<br>在以往的文章中都是 <strong>按照程式碼執行的順序</strong><br>當我試著執行後卻發現即使把冒泡放在前面，捕獲放後<br>一樣都是 <strong>先捕獲再冒泡</strong><br>仔細一查，才發現原來是 Chorme 89 以後的版本都會先捕獲再冒泡<br>89 之前的版本就會是看程式碼執行的順序    </p>
<blockquote>
<p>出現這樣的狀況是因為 shadow DOM 引起的，詳細原因請參考 <a href="https://juejin.cn/post/6965682915141386254#heading-2">這篇</a>  </p>
</blockquote>
</li>
</ul>
<p>所以，新版的瀏覽器不管是哪個都是 <strong>先捕獲再冒泡</strong>  </p>
<h2 id="事件的註冊綁定"><a href="#事件的註冊綁定" class="headerlink" title="事件的註冊綁定"></a>事件的註冊綁定</h2><ol>
<li><code>on-event</code> : 有 HTML 中 inline on-event；JS on-event 接 function</li>
<li><code>EventListener</code> : addEventListener、removeEventListener…等  </li>
</ol>
<h3 id="on-event"><a href="#on-event" class="headerlink" title="on-event"></a>on-event</h3><ol>
<li>Html <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> 
<span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>click 
me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
 目前很少這樣寫，其一原因是不好維護  </li>
<li>非 Html <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.btn'</span><span class="token punctuation">)</span>
btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<p>我們最常看見 <code>window.onload</code> 也是事件的 on-event</p>
<h3 id="EventListener"><a href="#EventListener" class="headerlink" title="EventListener"></a>EventListener</h3><h4 id="addEventListener"><a href="#addEventListener" class="headerlink" title="addEventListener"></a>addEventListener</h4><p>有三個參數</p>
<ol>
<li>事件名稱</li>
<li>事件處理器 (觸發時執行的 function)</li>
<li>Boolen ，以 「捕獲」 或「冒泡」 機制執行， <code>false</code> (不指定) 為 冒泡</li>
</ol>
<blockquote>
<p>第三個布林值，不是改變事件傳遞的方式，而是在 <strong>哪裡進行監聽</strong></p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 冒泡</span>
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'HI'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'HI'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 捕獲 </span>
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'HELLO'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="removeListener"><a href="#removeListener" class="headerlink" title="removeListener"></a>removeListener</h4><p>跟 addEventListener 一樣，如果要解除的話 handler 的 function 必須是同一個實體才行  </p>
<blockquote>
<p><strong>為什麼說是同一實體 ?</strong><br>回想這個例子 <code>&#123;&#125; === &#123;&#125; // false</code><br>function 也是 Object 的一種<br>匿名函式沒有指定給變數時，都是屬於不同的記憶體位址    </p>
</blockquote>
<p>事件監聽使用匿名函式的寫法，就像潑出去的水，回不來了 🤔  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'HI'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 移除事件，但是沒用</span>
btn<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'HI'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>解決此問題，把 handler 的 function <strong>獨立出來</strong>  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token function-variable function">clickhandler</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'HI'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>clickhandler<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 移除事件，ok!</span>
btn<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>clickhandler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="on-event-v-s-EventListener"><a href="#on-event-v-s-EventListener" class="headerlink" title="on-event v.s EventListener"></a>on-event v.s EventListener</h3><ul>
<li><p><code>EventListener</code> : 可以重複指定多個「處理器」(handler) 給同一個元素的同一個事件</p>
</li>
<li><p><code>on-event</code> : 只認一個，後面多寫的會覆蓋前面的事件</p>
</li>
<li><p>on-event</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi!'</span><span class="token punctuation">)</span> <span class="token comment">// 不會出現</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello!'</span><span class="token punctuation">)</span> <span class="token comment">// 會出現 hello</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>EventListener</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi!'</span><span class="token punctuation">)</span> <span class="token comment">// 出現 hi</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello!'</span><span class="token punctuation">)</span> <span class="token comment">// 再出現 hello</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="EventHandler-中的-“event”"><a href="#EventHandler-中的-“event”" class="headerlink" title="EventHandler 中的 “event”"></a>EventHandler 中的 “event”</h2><p>事件物件會依照 <strong>觸發的事件</strong>(click、change) ，內容會有稍微不同<br>通常看到 <code>event</code> 寫成 <code>e</code> 、<code>evt</code> 是為了方便，也可以自訂譯名稱<br>只是大家會選擇有意義的名稱且好記    </p>
<p>可以試著在事件觸發印出 <code>e</code>   </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  
常見的屬性   
-   </span><span class="token template-punctuation string">`</span></span>type<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> : 表示事件的名稱
-   </span><span class="token template-punctuation string">`</span></span>target<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> : 表示觸發事件的元素
-   </span><span class="token template-punctuation string">`</span></span>bubbles<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> : 表示這事件是否是在「冒泡」階段觸發 (</span><span class="token template-punctuation string">`</span></span><span class="token boolean">true</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> / </span><span class="token template-punctuation string">`</span></span><span class="token boolean">false</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">)
-   </span><span class="token template-punctuation string">`</span></span>pageX<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> / </span><span class="token template-punctuation string">`</span></span>pageY<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> : 表示事件觸發時，滑鼠座標在網頁的相對位置  

### 阻擋預設行為 event.preventDefault()
>並不會阻止事件向上傳遞 (事件冒泡) 

</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>javascript
<span class="token keyword">let</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.link'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span> <span class="token comment">// 依然會出現</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>on-event</code> 在 eventhandler function 的<strong>最後</strong>加上 <code>return false;</code> 也會有 <code>event.preventDefault()</code> 的效果  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.link'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 等於 e.preventDefault()</span>
link<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我'</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="應用範例一-表單-submit-前的檢查"><a href="#應用範例一-表單-submit-前的檢查" class="headerlink" title="應用範例一 : 表單 submit 前的檢查"></a>應用範例一 : 表單 submit 前的檢查</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>
        帳號
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>
        密碼
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用者按下 submit 按鈕會送出表單<br>前端可以先做驗證，確認使用者的輸入是不是符合   </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"form"</span><span class="token punctuation">)</span>
form<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//先阻止送出</span>
    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> username <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"[name='username']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value
    <span class="token keyword">let</span> password <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"[name='password']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value
    <span class="token comment">// 檢查欄位</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>username<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'請輸入使用者帳號'</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>password<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'請輸入密碼'</span><span class="token punctuation">)</span>
    <span class="token comment">// 都有輸入就送出</span>
    form<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="應用範例二-避免超連結造成網頁跳轉"><a href="#應用範例二-避免超連結造成網頁跳轉" class="headerlink" title="應用範例二 : 避免超連結造成網頁跳轉"></a>應用範例二 : 避免超連結造成網頁跳轉</h4><p>按下 <code>a</code> 的時候會找網頁的錨點，如果沒有的話會跳 <code>#</code> 井字號<br>如果不想要出現井字號呢 ?<br>有些是對外連結，有些是內連結使用，總不能阻擋每個吧 !</p>
<p>這邊用我使用 <code>class</code> 分開外部連結</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>www.example.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是普通超連結<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>gotoTop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 選沒有 link class 的 a 標籤</span>
<span class="token keyword">let</span> actionLink <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'a:not(.link)'</span><span class="token punctuation">)</span>
actionLink<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token parameter">a</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    a<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 判斷各個 actionLink 要做的事</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>這樣就可以分出哪些是外部連結，哪些是內網頁連結，而且不會出現 <code>#</code> 井字號 😃</p>
<h3 id="阻擋事件冒泡傳遞-event-stopPropagation"><a href="#阻擋事件冒泡傳遞-event-stopPropagation" class="headerlink" title="阻擋事件冒泡傳遞 event.stopPropagation()"></a>阻擋事件冒泡傳遞 event.stopPropagation()</h3><blockquote>
<p>阻止的動作，加在冒泡發生的元素上</p>
</blockquote>
<p>如果不要讓 box 出現，加在想停止冒泡的地方 <code>event.stopPropagation()</code></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.link'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 這裡會發生冒泡，要阻止上傳</span>
link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span> <span class="token comment">// 不會出現</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>你可以試著註解 <code>e.stopPropagation();</code> 會發現當你按下 link<br>因為 link 冒泡機制導致 box 的事件也觸發而印出 <code>&#39;box&#39;</code></p>
<h4 id="阻止任何的傳遞-event-stopImmediatePropagation"><a href="#阻止任何的傳遞-event-stopImmediatePropagation" class="headerlink" title="阻止任何的傳遞 event.stopImmediatePropagation()"></a>阻止任何的傳遞 event.stopImmediatePropagation()</h4><p>如果同一個元素有掛兩個 <code>addEventListener</code><br>點擊時兩個都會在 <code>Target phase</code><br>A 跟 B 事件一樣會觸發<br>在 A 加入 <code>stopImmediatePropagation()</code> 會把 B 停掉  </p>
<p>以上面的例子來說，link 掛兩個事件</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// A 事件</span>
link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  e<span class="token punctuation">.</span><span class="token function">stopImmediatePropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i am A'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">// B 事件</span>
link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i am B'</span><span class="token punctuation">)</span> <span class="token comment">//不會出現，在 A target pharse 阻止 B 冒泡階段發生</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span> <span class="token comment">// 不會出現，因為阻止了冒泡</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="應用範例-label-amp-input"><a href="#應用範例-label-amp-input" class="headerlink" title="應用範例 : label &amp; input"></a>應用範例 : label &amp; input</h4><p>label 跟 input 的組合需要多一個 id<br>為了不浪費 id，我們常常會用 label 把 input 包起來。  </p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
	開關
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 <code>label</code> 綁上監聽事件</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> labelone<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'label'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

labelone<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>神奇的是，hi 會出現兩次<br>checkbox 也會接收到 click 事件，改變了狀態<br>發生冒泡到 label 元素，再次觸發 label 的事件    </p>
<p><strong>重點複習</strong>  </p>
<blockquote>
<p><strong>阻止的動作，加在冒泡發生的元素上</strong></p>
</blockquote>
<p>冒泡發生的是 <strong>input</strong> ，所以 <code>stopPropagation</code> 是要加在 input 而非 label</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> labelone<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'label'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> inputone<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

labelone<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
inputone<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="事件-“本身”-指的是-target-v-s-currentTarget-this"><a href="#事件-“本身”-指的是-target-v-s-currentTarget-this" class="headerlink" title="事件 “本身” 指的是 ? target v.s currentTarget (this)"></a>事件 “本身” 指的是 ? target v.s currentTarget (this)</h3><p>我們知道在 function 當中是可以使用 <code>this</code><br>那這邊的 <code>this</code> 是指什麼呢 ?   </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> labelone<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'label'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

labelone<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tagName<span class="token punctuation">)</span> <span class="token comment">// LABEL</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p><code>this</code> 代表的會是「觸發事件的<strong>目標</strong>」元素<br>也就是 <code>event.currentTarget</code> 而不是 <code>e.target</code>。</p>
</blockquote>
<p>那 <code>e.target</code> 指的是 ?</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> labelone<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'label'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
labelone<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tagName<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> inputone<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
inputone<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tagName<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>點擊 label</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"LABEL"</span> <span class="token number">1</span> <span class="token comment">// e.target</span>
<span class="token string">"LABEL"</span> <span class="token number">1</span> <span class="token comment">// this</span>
<span class="token string">"INPUT"</span> <span class="token number">2</span> <span class="token comment">// e.target</span>
<span class="token string">"INPUT"</span> <span class="token number">2</span> <span class="token comment">// this</span>
<span class="token string">"INPUT"</span> <span class="token number">1</span> <span class="token comment">// checkbox 冒泡上來的而觸發 labelone，e.target</span>
<span class="token string">"LABEL"</span> <span class="token number">1</span> <span class="token comment">// checkbox 冒泡上來的而觸發 labelone， this</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p><code>e.target</code> 其實是「觸發事件的元素」</p>
</blockquote>
<p>如果不考慮事件傳遞的情況下，<code>this</code> 實質上就等同於 <code>e.target</code> 了。</p>
<h2 id="事件指派-Event-Delegation"><a href="#事件指派-Event-Delegation" class="headerlink" title="事件指派 (Event Delegation)"></a>事件指派 (Event Delegation)</h2><p>用 JavaScript 新增的元素並不會綁到事件  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> items <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.list-item'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 一個個手動加入</span>
items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	item<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> newItem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'LI'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> txt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">creatTextNode</span><span class="token punctuation">(</span><span class="token string">'new'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
newIten<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span>
list<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newItem<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>newItem</code> 不會有 click 事件<br>為避免每次新增要重新綁定事件，又要移除監聽，造成 memory leak 的嚴重問題<br><strong>事件指派</strong> 是比較好的做法。</p>
<p><strong>事件代理人</strong> 透過判斷 <strong>目標節點</strong>，再執行動作</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// list 直接看底下的子元素</span>
list<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> newItem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'LI'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> txt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">creatTextNode</span><span class="token punctuation">(</span><span class="token string">'new'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

newIten<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span>
list<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newItem<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>搭拉 ! <code>newItem</code> 就有點擊的效果</p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>事件是 JavaScript 的基本，當我們了解機制的運作<br>遇到奇怪的觸發多次時，記得想起事件的流程  </p>
<blockquote>
<p>先捕獲再冒泡  </p>
</blockquote>
<p>還有相關的  </p>
<ul>
<li>阻止預設行為 <code>preventDefault</code> </li>
<li>阻擋冒泡行為 <code>stopPropagtion</code></li>
</ul>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol>
<li><a href="https://ithelp.ithome.com.tw/articles/10191970">重新認識 JavaScript: Day 14 事件機制的原理</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10192015">重新認識 JavaScript: Day 15 隱藏在 “事件” 之中的秘密</a></li>
<li><a href="https://blog.techbridge.cc/2017/07/15/javascript-event-propagation/">DOM 的事件傳遞機制：捕獲與冒泡</a></li>
<li><a href="https://juejin.cn/post/6965682915141386254#heading-2">Chrome 89 更新事件触发顺序，导致99%的文章都错了（包括MDN）</a></li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - this (01) 基礎概念</title>
    <url>/Frontend/JavaScript/JavaScript-this-01/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在學習 JavaScript 時很多課程會建議不要急著先用 <code>this</code><br>因為 this 會跑出讓新手無法預期的結果<br>在某些情況下使用 this 反而更棘手<br>藉由本次來初步了解這個奇妙的 <strong>this</strong>! </p>
<span id="more"></span>

<h2 id="什麼是-this"><a href="#什麼是-this" class="headerlink" title="什麼是 this ?"></a>什麼是 this ?</h2><ul>
<li>關鍵字</li>
<li>function 執行時，自動生成的內部物件</li>
<li>隨 function 執行場合不同，this 指向的值也會不同</li>
<li>大多數情況，this 代表的就是呼叫 function 的物件 (Owner Object of the function)。</li>
</ul>
<p>總得來說 :   </p>
<blockquote>
<p>this 會因 <strong>執行的環境與上下文</strong> (context) 的不同，而有不同的結果<br>翻譯機 : <strong>跟 function 在哪裡呼叫有關</strong></p>
</blockquote>
<p>空說 this 有點難以了解，this 其實在哪裡都可以使用(非嚴格模式下)<br>JavaScript 並沒有特別限制 this 綁定在哪，所以 this 是會變來變去的<br>正因如此才顯得有點麻煩    </p>
<h2 id="不同情況下的-this"><a href="#不同情況下的-this" class="headerlink" title="不同情況下的 this"></a>不同情況下的 this</h2><h3 id="物件導向的-this"><a href="#物件導向的-this" class="headerlink" title="物件導向的 this"></a>物件導向的 this</h3><p>this 就是 <code>instance</code> 本身，被 <strong>實例</strong> 出來的那個。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">&#123;</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
	<span class="token punctuation">&#125;</span>
	<span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> toyota <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">'toyota'</span><span class="token punctuation">)</span>
toyota<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>這個例子就是 <code>toyota</code> 物件本身</p>
<h3 id="物件導向之外的-this"><a href="#物件導向之外的-this" class="headerlink" title="物件導向之外的 this"></a>物件導向之外的 this</h3><p>脫離 <code>class</code> 後，可以再細分成  </p>
<ol>
<li>一般 function 中的 this</li>
<li>DOM 事件中的 this</li>
<li><code>object</code> 的 this</li>
<li>arrow function 的 this <strong>(特別)</strong> ⭐</li>
</ol>
<blockquote>
<p>殺手鐧 : 可以用 <code>.call()</code> 來知道 this 的意義</p>
</blockquote>
<p><code>.call()</code> 是執行 function 另一種方式<br><code>.call(context,args[0],args[1])</code></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">p1<span class="token punctuation">,</span>p2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// undefined 1 2</span>
<span class="token function">test</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// undefined 1 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>這兩個是一樣的，會發現原來一般呼叫 function 會少了 this<br>而這個 this 就是看執行的環境與上下文 (context) 而來的  </p>
<p><strong>物件中的 function 呢 ?</strong>     </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">p1<span class="token punctuation">,</span>p2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	func <span class="token operator">:</span> test
<span class="token punctuation">&#125;</span>
obj<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>根據上面說的</p>
<blockquote>
<p><code>this</code> 代表的就是呼叫 function 的物件 </p>
</blockquote>
<p>物件呼叫，呼叫的 method 前面是 obj<br>所以 call 裡面的 this 位置是 <code>obj</code>     </p>
<h4 id="一般-function-中的-this"><a href="#一般-function-中的-this" class="headerlink" title="一般 function 中的 this"></a>一般 function 中的 this</h4><p>根據環境不同，結果不同<br>但是都是 global 的物件<br>在 <strong>非嚴格模式</strong> 下</p>
<ul>
<li>node.js : <code>this = global</code><br>![[Pasted image 20220110110801.png]]</li>
<li>瀏覽器 : <code>this = window</code><br>![[Pasted image 20220110141911.png]]</li>
</ul>
<blockquote>
<p><strong>嚴格模式</strong> 下的 this 指向全域物件是 <code>undefined</code><br>因為 this 沒有綁定誰，所以會是 <code>undefined</code>。</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>
<span class="token comment">// 轉成 call</span>
<span class="token function">test</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// undefined ,沒有帶入東西，嚴格模式下是 undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="DOM-事件中的-this"><a href="#DOM-事件中的-this" class="headerlink" title="DOM 事件中的 this"></a>DOM 事件中的 this</h4><p>對應到事件觸發的 <strong>元素</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.btn'</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>以 click 為例， <code>this</code> 會導向被按到的 <strong>元素</strong> 本身  </p>
<p>但是在事件裡 <strong>呼叫其他 function</strong> 時就要特別注意了<br>由於內部的 function 沒有綁定物件， this 會是全域物件  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token comment">// ajax 的 this 是 window 全域物件</span>
	$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>textContent<span class="token punctuation">,</span>res<span class="token punctuation">)</span> 
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以透過其他變數將 <code>this</code> 先存起來，直接在內部呼叫的函式替換。 </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token comment">// 把這邊的 this 存起來，指向的是元素本身</span>
	<span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
	<span class="token comment">// ajax 的 this 是 window</span>
	$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token comment">// 把 元素本身的 this 帶進來</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>textContent<span class="token punctuation">,</span>res<span class="token punctuation">)</span> 
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下一篇會提到如何用函式的方式綁定 this  </p>
<ul>
<li>轉成 <code>.call</code><br><code>el</code> 是 document 子結點取得的，這邊也可以看做一個物件<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>handler<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>
el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'type'</span><span class="token punctuation">,</span><span class="token function">handler</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// 放入的是 元素 本身</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ul>
<h4 id="object-的-this"><a href="#object-的-this" class="headerlink" title="object 的 this"></a>object 的 this</h4><p>指 obj 本身。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
	<span class="token function-variable function">test</span> <span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 1</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// obj</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 轉成 call</span>
obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="arrow-function-的-this"><a href="#arrow-function-的-this" class="headerlink" title="arrow function 的 this"></a>arrow function 的 this</h4><blockquote>
<p>arrow function 沒有自己的 this<br>而是用外部的 this  </p>
</blockquote>
<p>箭頭函式之所以在 this 表現奇怪<br>跟其他狀況的 this 不同的是 <strong>不是哪裡被呼叫有關</strong><br>而是 <strong>在哪定義</strong> 有關<br>如果前面已定義了，就會用那個值<br>來看看例子  </p>
<ul>
<li>一般 function<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">hello</span><span class="token punctuation">&#123;</span>
 <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
 	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
 	<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
 		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
 	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
a<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
很明顯的 <code>new</code> 建構出來的物件<br>前面有提到是 <strong>實例</strong> 本身<br>但是裡面呼叫 function 的  this 呢 ?<br>是指 <strong>全域物件</strong><br>setTimeout 並沒有透過其他物件呼叫<br>就像在外部呼叫 <code>setTimeout</code>  </li>
</ul>
<p>既然是 hello 這個物件的東西<br>我們希望 <code>this</code> 指向的是 hello 本身建構出來的物件<br><code>arrow function</code> 就派上用場了  </p>
<ul>
<li>用 <code>arrow function</code><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">hello</span><span class="token punctuation">&#123;</span>
 <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
 	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// hello&#123;&#125;</span>
 	<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
 	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// hello&#123;&#125;</span>
 	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
a<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
arrow function 本身沒有 this<br>而是根據定義在哪，this 就是那個值<br>通常也是指箭頭函是外部的 this  </li>
</ul>
<h2 id="this-與前後文本-context-的綁定基本原則"><a href="#this-與前後文本-context-的綁定基本原則" class="headerlink" title="this 與前後文本 (context) 的綁定基本原則"></a>this 與前後文本 (context) 的綁定基本原則</h2><p>this 綁定原則大概可以分四大種  </p>
<ul>
<li><strong>預設綁定</strong> (Default Binding)</li>
<li><strong>隱含式綁定</strong> (Implicit Binding)</li>
<li><strong>顯式綁定</strong> (Explicit Binding)</li>
<li>「<strong>new」關鍵字綁定</strong>  </li>
</ul>
<h3 id="預設綁定"><a href="#預設綁定" class="headerlink" title="預設綁定"></a>預設綁定</h3><p>宣告在 global scope 的變數，跟全域物件屬性是相同的。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// 直接讀</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 1 </span>
<span class="token comment">// 透過全域物件底下的屬性讀取</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span>  <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>因為預設綁定，當 function 被呼叫的當下如果沒有值或是在 <code>func.call(null)</code> 或 <code>func.call(undefined)</code> 此類的情況下，此時裡面的 <code>this</code> 會<strong>自動指定至全域物件</strong>。</p>
<p>如果是嚴格模式， this 綁定全域物件是 <code>undefined</code></p>
<h3 id="隱含式綁定"><a href="#隱含式綁定" class="headerlink" title="隱含式綁定"></a>隱含式綁定</h3><p>function 被宣告的地方是在 global scope 中，只要它 <strong>成為某個物件的參考屬性</strong> (reference property)，在那個 function 被呼叫的當下，該 function 即被那個物件所包含。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a  <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  a<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  foo<span class="token operator">:</span> func <span class="token comment">// 引用 global 的 function</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2 , this是 obj 本身</span>
<span class="token keyword">var</span> func2 <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>
<span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// undefined ， 這邊的 func 是 global 的，this 是 window，a 是找不到的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>決定 this 的關鍵不在於它屬於哪個物件，而是</p>
<blockquote>
<p>在於 function「呼叫的時機點」  </p>
</blockquote>
<p>透過物件呼叫某個方法 (method) 的時候，此時 this 就是那個物件 (owner object)。</p>
<h3 id="顯式綁定"><a href="#顯式綁定" class="headerlink" title="顯式綁定"></a>顯式綁定</h3><ol>
<li><code>.bind()</code>  </li>
<li><code>.call()</code> </li>
<li><code>.apply()</code> </li>
</ol>
<p>這類直接指定 this 的 function 都可被歸類至顯式綁定的類型。</p>
<h3 id="new-關鍵字綁定"><a href="#new-關鍵字綁定" class="headerlink" title="new 關鍵字綁定"></a>new 關鍵字綁定</h3><p>當一個 <code>function</code> 前面帶有 <code>new</code> 被呼叫時，會發生： </p>
<ul>
<li> 會產生一個新的物件 (物件被建構出來)</li>
<li> 這個新建構的物件會被設為那個 function 的 <code>this</code> 綁定目標，也就是 <code>this</code> 會指向新建構的物件。</li>
<li> 除非這個 function 指定回傳 (return) 了他自己的替代物件，否則這個透過 <code>new</code> 產生的物件會被自動回傳。</li>
</ul>
<p>關於 <code>new</code>，參考 : <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new#description">MDN 對 new 的說明</a>   </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span> <span class="token number">123</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> obj<span class="token punctuation">.</span>a <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="this-的應用-Cascade-組合技"><a href="#this-的應用-Cascade-組合技" class="headerlink" title="this 的應用 : Cascade 組合技"></a>this 的應用 : Cascade 組合技</h2><p>Cascade 也有人稱作 <strong>「Fluent Interface」</strong><br>可以讓 method 串串樂   </p>
<p>JavaScript 允許函式 <code>return undefined</code><br>那改成 <code>return this</code> 呢 ?  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">calNum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newNum</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">+=</span> newNum<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token keyword">this</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sub</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newNum</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">-=</span> newNum<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token keyword">this</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">multi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newNum</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">*=</span> newNum<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token keyword">this</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">division</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newNum</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">/=</span> newNum<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token keyword">this</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// 透過 new 建立實體，this 是 calNum本身</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">calNum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 分開呼叫</span>
a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a<span class="token punctuation">.</span>num <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 150</span>
a<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a<span class="token punctuation">.</span>num <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>當回傳 this 時，指的是物件本身，可以往後串在一起，  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a<span class="token punctuation">.</span>num <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>JQuery 中的也是用 method chain (方法鏈) 這樣的方式  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'is-active'</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'is-hide'</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>或者 <code>Array</code> 的內建函式<br>是可以串聯不同的方法<br>而且回傳的都是 <strong>同類型</strong> 的陣列</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">el</span> <span class="token operator">=></span> e<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>
	   <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">el</span> <span class="token operator">=></span> el <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// [4,6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>除了轉成 <code>.call()</code> 來判斷 this<br>對於 this 也可以朝幾種方向來判斷  </p>
<ol>
<li>function 的呼叫，是透過 <code>new</code> 進行的嗎？<br> 如果是，那 this 就是被建構出來的物件。</li>
<li>function 是以 .call() 或 .apply() 的方式呼叫的嗎？ 或是 function 透過 .bind() 指定？<br> 如果是，那 this 就是被指定的物件。</li>
<li>function 被呼叫時，是否存在於某個物件？<br> 如果是，那 this 就是那個物件。</li>
<li>如果沒有滿足以上條件，此 function 裡的 this 就一定是全域物件<br>在嚴格模式下則是 undefined。</li>
</ol>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol>
<li><a href="https://blog.huli.tw/2019/02/23/javascript-what-is-this/">淺談 JavaScript 頭號難題 this：絕對不完整，但保證好懂 - Huli</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23804247">this 的值到底是什么？一次说清楚</a>  </li>
<li><a href="https://ithelp.ithome.com.tw/articles/10193193">重新認識 JavaScript: Day 20 What’s “THIS” in JavaScript (鐵人精華版)</a></li>
<li><a href="https://zh.javascript.info/object-methods">对象方法，”this”</a></li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - this (02) call、appaly、bind</title>
    <url>/Frontend/JavaScript/JavaScript-this-02/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>除了透過執行環境與上下文來綁定之外<br>this 是可以改變的<br>改變 this 有三種方式  </p>
<span id="more"></span>

<h2 id="call-amp-apply"><a href="#call-amp-apply" class="headerlink" title="call &amp; apply"></a>call &amp; apply</h2><p>上一篇有簡略提過 <code>.call()</code><br>等同於 function 直接執行<br>而且是有帶 <code>this</code><br>第一個參數是指定 <code>this</code>，後面及是 <code>arguments</code></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 這樣是一樣的</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">test</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">test</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>這兩個執行是差不多的<br>差在後面的參數類型</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> test <span class="token operator">=</span><span class="token punctuation">&#123;</span>
	a <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
	<span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span>num<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span><span class="token punctuation">&#123;</span>
	a<span class="token operator">:</span> <span class="token number">5</span>
<span class="token punctuation">&#125;</span>
test<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 1 , 5</span>
<span class="token comment">// 改變 this </span>
test<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 5 , 5</span>
test<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 5 , 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>call</code> : 後面都用逗號隔開<br>   <code>.call(thisValue,args[0],args[1])</code> </li>
<li><code>apply</code> : 前面為 this，後面參數為類陣列。<br>  <code>.apply(thisValue,[args[0],args[1]])</code></li>
</ul>
<h3 id="call-跟-apply-為什麼同時存在"><a href="#call-跟-apply-為什麼同時存在" class="headerlink" title="call 跟 apply 為什麼同時存在 ?"></a>call 跟 apply 為什麼同時存在 ?</h3><p>例子是來自 <a href="https://blog.huli.tw/2020/04/18/javascript-function-is-awesome/">覺得 JavaScript function 很有趣的我是不是很奇怪</a><br>這篇也探討很有趣的 JS 問題  </p>
<ul>
<li>Math.max 的參數可以吃隨意數值</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果我們要從陣列中找出最大值呢 ?<br>直接呼叫會導致錯誤<br>可以運用 apply 的參數是 <strong>陣列</strong> 的方式帶入<br>或者用 ES6 展開  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 6</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 6 , 展開 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>總是會有不同的情境可以使用</p>
<h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p>把 this 的值先綁死，不管後面怎麼 call<br>都不會變動。</p>
<blockquote>
<p>bind 回傳的是一個 <strong>function</strong></p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	a<span class="token operator">:</span><span class="token number">10</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
	<span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token comment">// function</span>
<span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 10</span>
<span class="token function">b</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// 依舊是 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>非嚴格模式底下，無論是用 call、apply 還是 bind<br>傳進去的如果是 primitive 都會被轉成 <strong>object</strong>  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
  
<span class="token function">hello</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token comment">// [Number: 123]</span>
<span class="token keyword">const</span> myHello <span class="token operator">=</span> <span class="token function">hello</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">'my'</span><span class="token punctuation">)</span>
<span class="token function">myHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// [String: 'my']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="箭頭函式-v-s-bind"><a href="#箭頭函式-v-s-bind" class="headerlink" title="箭頭函式 v.s bind"></a>箭頭函式 v.s bind</h2><p>初學時會認為 arrow funciton 有指向自己，綁定的意味<br>但兩者有很大的區別    </p>
<ul>
<li><code>.bind(this)</code> : 呼叫之前就先綁定，讓被呼叫的都有固定的 <code>this</code>。  </li>
<li>arrow function this : 箭頭函式沒有建立任何的 this，簡單來說是根本沒有自己的 this。<br>在箭頭函式使用 this，會像變數一樣，往外部尋找。   </li>
</ul>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol>
<li><a href="https://blog.huli.tw/2019/02/23/javascript-what-is-this/">淺談 JavaScript 頭號難題 this：絕對不完整，但保證好懂 - Huli</a></li>
<li><a href="https://blog.huli.tw/2020/04/18/javascript-function-is-awesome/">覺得 JavaScript function 很有趣的我是不是很奇怪</a></li>
<li><a href="https://zh.javascript.info/arrow-functions">深入理解箭头函数</a>  </li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 紀錄 ⟭ Foresea畢業專題(II) ─《菜雞在Unity裡的漫長旅程》</title>
    <url>/bookreport/Foresea-bookreport-II/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>若你在專題團隊裡擔任 <strong>遊戲程式設計</strong>，可以留步<br>若你在專題團隊裡擔任 <strong>美術設計</strong> 負責遊戲素材<br>可以直達 <strong>問題大雜燴</strong><br>我將會分享 製作畢業專題一年學習程式的資源<br>希望這些資訊可以幫助任何人的專題運作更順利  </p>
<span id="more"></span>  

<h2 id="正式開始前的準備"><a href="#正式開始前的準備" class="headerlink" title="正式開始前的準備"></a><strong>正式開始前的準備</strong></h2><p>我不會講到遊戲企劃架構等等的，網路上文章大神非常多<br>可以用Google大神找到參考。<br>這篇著重在一個程式菜雞(非理工背景)從短期學習程式到完成一個專題的經驗分享。<br>在我的畢業專題 《Foresea》中，我是擔任遊戲程式設計<br>如果你/妳和我一樣，是程式小白(程式基礎薄弱)，可以參考我的經驗。  </p>
<h3 id="與時間賽跑"><a href="#與時間賽跑" class="headerlink" title="與時間賽跑"></a><strong>與時間賽跑</strong></h3><h4 id="正在做專題的人"><a href="#正在做專題的人" class="headerlink" title="正在做專題的人"></a><strong>正在做專題的人</strong></h4><p>又剛好只有在課堂上碰過Unity，沒有更多的接觸<br>但你的程式理解力 <del>看到程式碼不會頭痛</del> 是組內還不錯的人🤟<br><strong>我會建議:</strong><br>專題主題想好後，類型會決定「以什麼方式呈現」<br>進而決定你要有什麼樣的「功能」<br>並且透過重新組合排列來完成專題。  </p>
<p>你可以試著… :  </p>
<ol>
<li><strong>拆解功能</strong><br>例如 : 我想做 <font color=teal><strong>3D 第一人稱 射擊遊戲</strong></font>，那你會要有<ul>
<li>瞄準</li>
<li>子彈庫</li>
<li>敵人 …等等功能</li>
</ul>
</li>
</ol>
<blockquote>
<p>功能詳細分解，以 <strong>瞄準</strong> 為例    </p>
<ol>
<li>啟動準心要透過<strong>按鍵</strong>來觸發  </li>
<li>透過<strong>射線</strong>來偵測物體的位置  </li>
<li><strong>確定</strong>你瞄準到的是<strong>目標</strong>   </li>
</ol>
</blockquote>
<ul>
<li>綜合起來你這個功能裡會需要的技術  <ul>
<li>按鍵偵測  </li>
<li>物理射線  </li>
<li>碰撞  </li>
</ul>
</li>
</ul>
<p>很多教學其實都有一次到位，但如果你在某些功能想要追加時，拆解就可以清楚需要的技術<br>2. <strong>做穩定功能的延伸</strong><br>   例如: 拼圖 + 抽卡系統…等等<br>   創意不一定要全部無中生有，結合也是種創意  </p>
<h4 id="準備做專題的人"><a href="#準備做專題的人" class="headerlink" title="準備做專題的人"></a><strong>準備做專題的人</strong></h4><ol>
<li>可以動手做小project ，如果你有idea可以先規劃遊戲框架、基礎功能等等。  <ul>
<li><strong>試著練習小專案</strong><br>之前花了一天隨興做的劇情小遊戲<br>主要練習 <strong>整合應用</strong>與<strong>滑順換場</strong><br>當中對話框是用Assest store的資源後來就忙畢業專題，就沒繼續了…🥴    </li>
<li>要是懶的製作美術素材，可以使用Unity 商店提供的一堆素材包來組合成自己的遊戲。<br>可參考這位youtuber <strong><a href="https://www.youtube.com/channel/UCaoqVlqPTH78_xjTjTOMcmQ">Miziziziz</a></strong><br>四人以同一包資源，做出四種不同玩法的遊戲    </li>
</ul>
</li>
<li>多看Devlog(開發日誌)，作者製作中會記錄心得與技巧<br>像是這位靠遊戲製作起家的<a href="https://www.youtube.com/channel/UCIabPXjvT5BVTxRDPCBBOOQ"><strong>Dani</strong></a><br>創作的遊戲也有在steam上，也有將製作與心得做成影片。  </li>
</ol>
<h3 id="認清自己"><a href="#認清自己" class="headerlink" title="認清自己"></a>認清自己</h3><p>學習基礎的開始，你將會碰到大量的英文跟一些數學(?)  </p>
<ol>
<li>如果你本身超討厭英文，那很可惜，你的學習資源將會被侷限   </li>
<li>如果你本身超討厭數學，那更可惜，程式運用邏輯判斷與數學相輔相成，做起來更快速        <strong>Q:</strong>  我怎麼知道自己英文好到可以看國外的教學學習?        <strong>A:</strong>  如果你聽1分鐘的英文非常很吃力了，我就建議你就用中文資源學習<br>不然你會變<strong>練英文聽力</strong>，而不是學習程式。  </li>
</ol>
<ul>
<li>Try it ! 試試看<br>看這支<a href="https://youtu.be/1aGjMIUgVTU">影片</a>，如果你能聽得懂大多語句，就代表你還OK啦!<br>不能接受兩點，其實你還是能做遊戲，目前中文教學資源越來越多了  </li>
<li>若遇到問題，可以發問到<ol>
<li>👍 <strong><a href="https://www.facebook.com/groups/UnityFrontier/">Unity 應用領域</a></strong></li>
<li><strong><a href="https://forum.gamer.com.tw/B.php?bsn=60602">巴哈Unity3D引擎版</a></strong><br>最近網路上也出現很多新興論壇與討論群也可以加入</li>
</ol>
</li>
<li>寫程式超級苦手<br>可以用視覺化程式工具來打造整個專案，這邊列舉三個常見的  </li>
</ul>
<table>
<thead>
<tr>
<th align="center"><strong>Fungus</strong></th>
<th align="center">PlayMaker</th>
<th align="center">bolt</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img data-src="https://chi01pap001files.storage.live.com/y4mkfhN24Lbc49rFFaLHFFlzmnSh8Zuv_hBQBnX5bhf6ZoUfuBitk2LWvZUjoddAfWinO0xPJYmKcHxLLGjdv2G4Xj5P7vCeelxUtd8_RKjbOnPqi9VBJ08QPkF-1kA-8Oc46pNIWtvN8hmOtUvc9BXtvDG3w1z00ZouUJeOYgIfV_7oqXYzX4LcWlDHyi5Rrpf?width=64&height=128&cropmode=none" alt="Fungus"></td>
<td align="center"><img data-src="https://chi01pap001files.storage.live.com/y4mpgpEnb_uv7folt3ZpcsTYMtqqqo_T-YoEybEGKP-ksmMLfyqSVXZH9O9Cd-2p63exqjtaF2SZLiNfMoXubHQj2J1rtZ3dL50WWsfF_noVQBHUYv8vqGRddYj38E2e34HdSNFHpuS7QWnihbJpD9gsWrzymekydAhcbJhQeTOlsaXYugV_4-RpTR0BA70KTD-?width=64&height=128&cropmode=none" alt="PlayMaker"></td>
<td align="center"><img data-src="https://chi01pap001files.storage.live.com/y4m7J5a0UmNmKPGIrzwNoo0oWBDVkMBy2o939beWfQ_ap7zSKutxnKgq8T0qFZ52LDHmBzGOp8LCLQ_gOGS0-X-yEDv8_40WWvDM3k191Jm5AVXLSohQQOkwNyvqT2bUidkRnAeL_MWXGFBaeFW4ch-JzZbTZ49Q4Dhv5jNgYJN6zXvlgr6Agn6iX8AISstt0F8?width=64&height=128&cropmode=none" alt="bolt"></td>
</tr>
<tr>
<td align="center"><strong>不需要撰寫任何程式</strong></td>
<td align="center">不需要撰寫任何程式</td>
<td align="center">不須撰寫程式，但也可以混著C#寫</td>
</tr>
<tr>
<td align="center"><strong>免費</strong></td>
<td align="center">必須<strong>氪金</strong>💵</td>
<td align="center"><strong>免費</strong></td>
</tr>
<tr>
<td align="center"><strong>⭐歷屆最常用</strong></td>
<td align="center">教學資源豐富</td>
<td align="center">教學資源算豐富</td>
</tr>
<tr>
<td align="center">很方便的對話系統</td>
<td align="center">中文學習資源不少</td>
<td align="center">近年發展快速</td>
</tr>
<tr>
<td align="center">缺點是有點制式</td>
<td align="center"><strong><a href="https://hutonggames.com/showcase.html">用過都說讚</a></strong></td>
<td align="center">Unity官方有教學</td>
</tr>
</tbody></table>
<ul>
<li><p><strong><code>至於我推不推視覺化工具呢?</code></strong><br>  其中 <strong><a href="https://www.youtube.com/watch?v=OqHM0ZNtZ_4">&lt;PlayMaker?bolt?&gt;</a></strong> 影片留言區提到，我覺得非常中肯。      </p>
<blockquote>
<p>If you are an artist without coding experience, visual scripting is a bliss but if you are a coder, visual scripting could be a curse.  </p>
</blockquote>
<p>  我有試用過bolt，對我來說簡直災難，直接用C#寫舒服多了。<br>  如果寫腳本算順，建議就不要載bolt，會適應不良🤢。</p>
</li>
</ul>
<h3 id="其他製作引擎的選擇"><a href="#其他製作引擎的選擇" class="headerlink" title="其他製作引擎的選擇"></a>其他製作引擎的選擇</h3><p>如果你是大三以下，上過課覺得 Unity 介面超難懂很複雜<br>可以試著使用Godot或Construct 2(3)等引擎<br>如果你是要做純RPG遊戲，也可以使用 RPG製作大師  </p>
<table>
<thead>
<tr>
<th>應用程式</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://godotengine.org/">Godot</a></td>
<td>近年興起的開源遊戲引擎， 也有不少人從Unity 跳槽到這裡</td>
</tr>
<tr>
<td><a href="https://www.construct.net/en">Construct 2 (3)</a></td>
<td>可以線上編輯。據我所知有些國內大學是使用這個。</td>
</tr>
<tr>
<td><a href="https://store.steampowered.com/app/363890/RPG_Maker_MV/">RPG製作大師</a></td>
<td>下載要<code>$$</code>，發展悠久網路上資源很豐富，但就是只能做純正的RPG啦。</td>
</tr>
</tbody></table>
<h2 id="正篇"><a href="#正篇" class="headerlink" title="正篇"></a>正篇</h2><p>我進步的不二法門，<strong>多看 多學 多實作</strong>。</p>
<h3 id="第一步-大問題拆解小問題"><a href="#第一步-大問題拆解小問題" class="headerlink" title="第一步 : 大問題拆解小問題"></a><strong>第一步 : 大問題拆解小問題</strong></h3><p>很廢話I Know~，不論是哪個領域，拆解都是遇到問題的第一步<br>網路上通常不會有現成剛好你要的功能，你要達成的功能就要自己組合運用。<br>功能拆好後，做不出來的就是 <strong>學習觀摩 ⇒ 實作 ⇒ 修改</strong></p>
<h4 id="推薦我常學習的管道"><a href="#推薦我常學習的管道" class="headerlink" title="推薦我常學習的管道"></a>推薦我常學習的管道</h4><p>網路上學習資源非常多，這邊稍微列舉我常看的  </p>
<table>
<thead>
<tr>
<th align="left"><strong>Youtube</strong></th>
<th align="center">中/英</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.youtube.com/channel/UCzmz_uFDw73m0JDI5ILmA3A">阿空的遊戲部屋</a></td>
<td align="center">中</td>
<td>多為2D，概念從頭講起，非常清楚</td>
</tr>
<tr>
<td align="left"><a href="https://www.youtube.com/channel/UCbZ34gnooSIHXAZUW1_wvgQ">yasuHs</a></td>
<td align="center">中</td>
<td>功能重點教學，操作非常清楚</td>
</tr>
<tr>
<td align="left"><a href="https://www.youtube.com/c/%E9%99%B3%E9%96%93%E6%99%82%E5%85%89%E5%B7%A5%E4%BD%9C%E5%AE%A4/videos">陳間時光</a></td>
<td align="center">中</td>
<td>有教學Fungus，C#基礎概念等等，講解非常清楚，影片略長</td>
</tr>
<tr>
<td align="left"><a href="https://www.youtube.com/c/%E7%99%BD%E7%B1%B3%E9%A3%AF/videos">白米飯</a></td>
<td align="center">中</td>
<td>有bolt教學以及應用教學</td>
</tr>
<tr>
<td align="left"><a href="https://www.youtube.com/c/MStudioUnity/featured">M Studio</a></td>
<td align="center">中</td>
<td>教學種類繁多，講解清楚</td>
</tr>
<tr>
<td align="left"><a href="https://www.youtube.com/user/Brackeys">Brackeys</a></td>
<td align="center">英</td>
<td>內容含 2D&amp;3D、Unity功能，講解非常詳細，首推! <del>可惜他不做影片了</del></td>
</tr>
<tr>
<td align="left"><a href="https://www.youtube.com/c/CodeMonkeyUnity/featured">Code Monkey</a></td>
<td align="center">英</td>
<td>很多功能性教學，非常推薦，講解非常詳細</td>
</tr>
<tr>
<td align="left"><a href="https://www.youtube.com/c/AlexanderZotov/featured">Alexander Zotov</a></td>
<td align="center">英</td>
<td>功能重點教學，操作清楚，省時間學習大推👍</td>
</tr>
<tr>
<td align="left"><a href="https://www.youtube.com/channel/UC9Z1XWw1kmnvOOFsj6Bzy2g">Blackthornprod</a></td>
<td align="center">英</td>
<td>2D為主，單功能性教學，講解詳細，也有很多Devlog</td>
</tr>
<tr>
<td align="left"><a href="https://www.youtube.com/c/samyam/videos">samyam</a></td>
<td align="center">英</td>
<td>以單功能教學為主，講解非常清楚。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>論壇</strong></th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://stackoverflow.com/">Stack Overflow</a></td>
<td>所有難題都在這裡解決，踏入程式圈一定要知道的</td>
</tr>
<tr>
<td><a href="https://forum.unity.com/">Unity官方論壇</a></td>
<td>可以更精準找到跟你有一樣問題的串。</td>
</tr>
<tr>
<td><a href="https://forum.gamer.com.tw/B.php?bsn=60602">巴哈 Unity3D 遊戲引擎哈拉版</a></td>
<td>你懂得。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left"><strong>網頁</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://godstamps.blogspot.com/">胡亂說‧隨便寫</a></td>
</tr>
<tr>
<td align="left"><a href="https://jerrard-liu.blogspot.com/">【Unity遊戲製作】勇者拉德小酒館</a></td>
</tr>
<tr>
<td align="left"><a href="http://sammaru.blogspot.com/search?updated-max=2017-11-25T21:14:00+08:00&max-results=10#PageNo=2">山姆遊戲</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.douduck08.com/">鴨仔開發日記</a></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">FB社團</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.facebook.com/groups/UnityFrontier/">Unity 應用領域</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.facebook.com/groups/IndieGameDevs/">Indie Game Developers IGD</a></td>
</tr>
</tbody></table>
<blockquote>
<p><strong>C#基礎加強</strong>  </p>
</blockquote>
<table>
<thead>
<tr>
<th align="left"></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.youtube.com/channel/UCmumrs_hb9s6eoVI29gLBgA/featured">小山的教學平台</a></td>
<td>C#好幫手，對於基礎加強可以從這裡開始</td>
</tr>
</tbody></table>
<h4 id="加強搜尋力"><a href="#加強搜尋力" class="headerlink" title="加強搜尋力"></a>加強搜尋力</h4><p>若剛好都沒你要的，請發揮強大的搜尋力，尤其是用「英文」，破英文也可以👌</p>
<ul>
<li><p><strong>我怎麼搜尋</strong><br>有時候不太知道正確的關鍵字，但可以從搜尋出來的字眼<code>**找連結詞**</code>，幫助增加搜尋速度<br><strong>例如</strong> :   </p>
<blockquote>
<p>我想讓<code>角色滑順地移動</code>，可能會在搜尋列打 <em><code>&quot;How to move smoothly in Unity?&quot;</code></em>  </p>
</blockquote>
<p><img data-src="https://chi01pap001files.storage.live.com/y4mC4TPIW5ABZI0G8jx_cv7O63vukxuNZ1UUvYIU4WD1iT2BD2YT7V_rwCMWbzaYJg4KO22LTIs5xieCtIllnDhceGNTzC5Ecquhvi9dM0pjOE9oClra7APf8e-zPcyR_m5xwOrCuERV34OMhdsSeJNCj1eQWcuVH5E4s_Wi7TE6F371Q1UiogCuVmmphND0CAF?width=660&height=516&cropmode=none">  </p>
</li>
<li><p>你會發現有人不少人跟你問一樣的問題，<strong>關鍵字你有發現什麼嗎?</strong></p>
<ul>
<li><strong>解析搜尋到的關鍵字</strong><br>移動的主體<strong>是誰</strong>?例如 : Player、Enemy 或是 UI物件。下方圖片出現 </li>
<li>using Vector Lerp <code>**看起來是種&quot;方法&quot;**</code><br>沒錯!這正是要的答案，恭喜你找到<strong>Lerp</strong>這個重要的關鍵字，接著就能更精準的搜尋  <blockquote>
<p>Player move using lerp in Unity  </p>
</blockquote>
</li>
</ul>
<p>  會找到相關Unity Scripting API 的說明，以及 lerp的相關應用教學<br>  推回用中文找 <strong>Unity lerp 教學</strong> 也是可以  </p>
</li>
</ul>
<h3 id="第二步-讓程式昇華"><a href="#第二步-讓程式昇華" class="headerlink" title="第二步 : 讓程式昇華"></a><strong>第二步 : 讓程式昇華</strong></h3><p>程式基礎都修過，最基礎的<code>Array</code> 、<code>if-else</code> 、<code>for</code>、<code>foreach</code> 、<code>while-do</code> 、 <code>switch(case break)</code> 等等的都很夠用<br>在Unity裡遇到看不懂的東西，除了直接google，也可到<a href="https://docs.unity3d.com/ScriptReference/">官方文件</a>搜尋<br>很推薦官方給的範例，清楚明瞭。    </p>
<blockquote>
<p>Unity版本的差異會影響一些方式的寫法，記得先找到自己開發的版本</p>
</blockquote>
<h4 id="程式基礎-amp-Unity功能-快速補帖"><a href="#程式基礎-amp-Unity功能-快速補帖" class="headerlink" title="程式基礎&amp;Unity功能 快速補帖"></a><strong>程式基礎&amp;Unity功能 快速補帖</strong></h4><p>一些我覺得能加速製作的好概念 ，下面我提的都只是冰山一角，有興趣可以再自己Google  </p>
<blockquote>
<p> <strong>C#</strong></p>
</blockquote>
<ul>
<li><strong>List</strong><ol>
<li>📄 <a href="https://docs.microsoft.com/zh-tw/dotnet/api/system.collections.generic.list-1?view=net-5.0"><strong>List<T> 類別</strong></a></li>
<li>📺 <a href="https://www.youtube.com/watch?v=EOnWTaN472g"><strong>Unity C# 程式 教學 情場教戰手冊 (Array + List + Foreach)</strong></a></li>
<li>📺 <a href="https://www.youtube.com/watch?v=0WdWiF_Si4I"><strong>C# Lists and Dictionaries in Unity! - Intermediate Scripting Tutorial</strong></a>  <blockquote>
<p>📕<strong>延伸閱讀</strong><br>📄 <a href="http://sharecoder.blogspot.com/2012/10/arraylist.html"><strong>Array與List</strong></a> ⇒非常清楚解釋兩者差異<br>📺 <a href="https://www.youtube.com/watch?v=uWI3JEBRMiA"><strong>Data Structures For Game Devs: Arrays vs. Lists | Unity Tutorial (Part 1)</strong></a>⇒泛型類別解說  </p>
</blockquote>
</li>
</ol>
</li>
<li><strong>Dictionary</strong>  <ol>
<li>📄<a href="https://docs.microsoft.com/zh-tw/dotnet/api/system.collections.generic.dictionary-2?view=net-5.0"><strong>Dictionary&lt;TKey,TValue&gt; 類別</strong></a>  </li>
<li>📺 <a href="https://www.youtube.com/watch?v=3wbDx90A9T4"><strong>2020輕鬆學Unity做遊戲: Dictionary &amp; List — 11</strong></a>  </li>
</ol>
</li>
<li><strong>Singleton (單例模式)</strong><ol>
<li>📄 <a href="https://kendevlog.wordpress.com/2018/08/14/unity%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98%EF%BC%9A%E5%A6%82%E4%BD%95%E5%AF%A6%E7%8F%BEsingleton/">Unity學習筆記：如何實現Singleton</a> ⇒非常詳細👍  </li>
<li>📄 <a href="https://douduck08.wordpress.com/2017/05/08/difference-of-four-singleton-practicing/"><strong>[C#/Unity] 回顧所使用過的 Singleton 實作方式</strong></a>  <blockquote>
<p>📕<strong>延伸閱讀</strong><br>📺<a href="https://www.youtube.com/watch?v=SpuqhqoiheM&t"><strong>Unity 切換場景 保留物件不被刪掉 DontDestroyOnLoad + SceneManager 教學 場景切換</strong></a>  </p>
</blockquote>
</li>
</ol>
</li>
</ul>
<blockquote>
<p><strong>Unity</strong>  </p>
</blockquote>
<ul>
<li><p><strong>Coroutine (協程) (必知👍)</strong></p>
<ul>
<li><strong>教學資源</strong></li>
</ul>
<ol>
<li>📄 <a href="https://medium.com/feis-studio/%E6%B7%BA%E8%AB%87-unity-coroutine-%E7%9A%84%E9%81%8B%E8%A1%8C%E6%96%B9%E5%BC%8F-c3d5b52e1a0d">淺談 Unity Coroutine 的運行方式</a></li>
<li>📄 <a href="https://dev.twsiyuan.com/2017/05/unity-coroutine.html"><strong>Unity Coroutine 使用筆記</strong></a></li>
<li>📺 <a href="https://www.youtube.com/watch?v=z1myiS1z7Ek"><strong>【阿空】Unity 協程Coroutine！？大解析！</strong></a></li>
<li>📺 <a href="https://www.youtube.com/watch?v=5L9ksCs6MbE">C# Coroutines in Unity! - Intermediate Scripting Tutorial</a>  <blockquote>
<p>📕<strong>延伸閱讀</strong><br>📄 <a href="https://medium.com/feis-studio/%E5%9C%A8-unity-%E8%A9%B2%E7%94%A8-coroutine-%E9%82%84%E6%98%AF-update-654cce35737e"><strong>在 Unity 該用 Coroutine 還是 Update() ?</strong></a><br>📺 <a href="https://www.youtube.com/watch?v=O_rya8qmQkw"><strong>Unity3D - 2 Ways to Start &amp; Stop Coroutines (the good &amp; bad ways)</strong></a>  </p>
</blockquote>
</li>
</ol>
<blockquote>
<p><strong><code>你可能會覺得</code></strong>   </p>
</blockquote>
<ul>
<li>😯<strong>阿移動為什麼不用動畫呢? 不是比較快嗎?</strong><br>如果是<code>複雜性</code>高的動作就使用動畫，相對來的簡單可以用程式來達成<br>如果今天有上百個東西需要動畫，動畫就會讓效能會降低，更白話來講就是會掉楨  </li>
</ul>
</li>
<li><p><strong>ScriptableObject (必知👍)</strong></p>
<ul>
<li><strong>教學資源</strong><br>ScriptableObject的用途非常廣，網路非常多例子，也有些缺點  </li>
</ul>
<ol>
<li>📄 <a href="https://blog.csdn.net/candycat1992/article/details/52181814"><strong>【Unity】ScriptableObject的介绍</strong></a></li>
<li>📄  <a href="https://kendevlog.wordpress.com/2017/11/10/unity%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%988-scriptable-object%E4%BD%BF%E7%94%A8%E9%A0%88%E7%9F%A5/">**Unity學習筆記#8 : Scriptable Object使用須知</a>** </li>
<li>📺 <strong><a href="https://www.youtube.com/watch?v=0nW5PhQTWbQ">【阿空】Unity的可編程物件：ScriptableObject！</a></strong>  </li>
<li>📺  <strong><a href="https://www.youtube.com/watch?v=aPXvoWVabPY">SCRIPTABLE OBJECTS in Unity</a></strong>  </li>
</ol>
</li>
<li><p><strong>ObjectPool (物件池) (需要複製多物件必知👍)</strong></p>
<ul>
<li><strong>教學資源</strong></li>
</ul>
<ol>
<li>📄 <a href="https://learn.unity.com/tutorial/introduction-to-object-pooling#">Introduction to Object Pooling</a></li>
<li>📄 <a href="https://douduck08.wordpress.com/2017/08/01/practicing-of-object-pool/"><strong>[Unity] 物件池的實現 – Practicing of Object Pool</strong></a></li>
<li>📺 <a href="https://www.youtube.com/watch?v=tdSmKaJvCoA"><strong>OBJECT POOLING in Unity</strong></a></li>
<li>📺 <a href="https://www.youtube.com/watch?v=7UswSdevSpw"><strong>Unity3D Object Pooling - How to use them &amp; why you should</strong></a>  <blockquote>
<p>📕<strong>延伸閱讀</strong><br>📄 <a href="https://www.raywenderlich.com/847-object-pooling-in-unity">Object Pooling in Unity</a><br>📄 <a href="https://harrison-dev.github.io/2018/08/17/Game%20Programming/Object%20pooling/">Object pooling - 基本物件池與應用</a>  </p>
</blockquote>
</li>
</ol>
<blockquote>
<p><strong><code>你可能會覺得</code></strong>    </p>
</blockquote>
<ul>
<li>😯<strong>使用生成(Instantiate)不好嗎 ?</strong><br>⇒生成一個物件再摧毀，Destory 並不代表完全刪除，依然會占用記憶體<br>當你生成越多，效能會更卡頓 ⇒ 可以參考上方延伸閱讀的地方  </li>
</ul>
</li>
<li><p><strong>Lerp (線性插值)</strong></p>
<ul>
<li><strong>教學資源</strong>  </li>
</ul>
<ol>
<li>📄 <strong><a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8F%92%E5%80%BC">線性插值，維基百科，自由的百科全書</a></strong>  </li>
<li>📄 <a href="https://docs.unity3d.com/ScriptReference/Vector3.Lerp.html">**Unity官方api Vector3.Lerp</a>**   </li>
<li>📄 <strong><a href="http://www.victsao.com/blog/97-unity/426-unity-script-lerp">Unity腳本：使用Lerp 線性插值製作滑順效果</a></strong>   </li>
<li>📺 <a href="https://www.youtube.com/watch?v=cD-mXwSCvWc"><strong>Modulating values with Lerp - Unity Official Tutorials</strong></a>  </li>
<li>📺 <a href="https://www.youtube.com/watch?v=WNoizdtEPA4"><strong>[Unity] The Essence of Lerp</strong></a>  <blockquote>
<p>📕<strong>延伸閱讀</strong><br>📄 <a href="https://gamedevbeginner.com/the-right-way-to-lerp-in-unity-with-examples/"><strong>The right way to Lerp in Unity (with examples)</strong></a>  </p>
</blockquote>
</li>
</ol>
</li>
</ul>
<h3 id="問題大雜燴"><a href="#問題大雜燴" class="headerlink" title="問題大雜燴"></a><strong>問題大雜燴</strong></h3><p>製作中我也磕磕撞撞的，遇到不少問題，分享一下    </p>
<h4 id="美術素材"><a href="#美術素材" class="headerlink" title="美術素材"></a><strong>美術素材</strong></h4><ul>
<li><p><strong>圖片規則 (For 美術)</strong> </p>
<ol>
<li><strong>命名好習慣</strong><br>讓開發者更好去搜尋需要的東西，不要 <strong><code>&quot;圖層1&quot;、&quot;圖層2&quot;</code></strong><br>設計者快速方便，但對於輸出應用的人<strong>簡直是悲劇</strong>。(甚至是做動畫的)  </li>
<li><strong>整合</strong><br>如果是要做動畫，會建議製成連續圖，丟到Unity 去切<br>如果是很多相同大小的物件或UI，也可以這麼做，減少GPU耗能的問題<br>給程式之前，要想好哪些要切，哪些不切。  <blockquote>
<p> <strong><code>跟買雞排一樣，先講</code></strong>   </p>
</blockquote>
</li>
</ol>
</li>
<li><p><strong>保持乾淨</strong>      </p>
<ol>
<li><p><strong>減少多餘空白</strong><br>刪除多餘的空白，減少體積。<br>開發時Unity也會算入渲染裡，甚至會遮蔽其他東西，如果有射線問題，可能會無法偵測到  </p>
<blockquote>
<p>參考<br>📕 <a href="https://forum.gamer.com.tw/C.php?bsn=60602&snA=2268"><strong>Unity輸出後檔案過大的問題</strong></a>   </p>
</blockquote>
</li>
<li><p><strong>建立管理的資料夾</strong><br>在程式製作時，常常會為了方便而塞入Assest最外層資料夾<br>別怕因為要一直好幾層而懶得建資料夾<br>合宜的管理，在找素材替換時就會很方便  </p>
</li>
</ol>
</li>
<li><p><strong>善用工具 (For 程式)</strong>   </p>
<ul>
<li><a href="https://youtu.be/b2bIh8WPsi4"><strong>Psd Importer</strong></a><br>最近整合到Unity插件中，可以直接使用PS檔案  偶爾需要微調圖檔可以快速使用，避免跳出視窗一張張抓到PS修改而浪費時間<blockquote>
<p>📕<strong>關於美術&amp;程式的延伸閱讀</strong><br> 1.<a href="https://www.itread01.com/content/1547481793.html">Unity專案中UI同學需知的程式相關要點</a><br>2.<a href="https://home.gamer.com.tw/creationDetail.php?sn=4469955">[Unity] 停止摧毀你家美術的像素風素材 - 巴哈姆特</a></p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h4 id="腳本執行序"><a href="#腳本執行序" class="headerlink" title="腳本執行序"></a><strong>腳本執行序</strong></h4><ul>
<li><p><strong>編輯時沒有Bug，執行時一堆Null</strong> 😵<br>  ⇒ 腳本執行順序，導致某些腳本順序被排在後，結果沒有吃到值<br>  可以先了解 Unity 基本的執行順序 <a href="https://docs.unity3d.com/Manual/ExecutionOrder.html"><strong>Order of execution for event functions</strong></a><br>  對於在寫判斷時也非常有幫助。</p>
<blockquote>
<p><strong>延伸閱讀</strong><br>📕 <a href="https://kendevlog.wordpress.com/2018/09/26/unity%E9%96%8B%E7%99%BC%E7%AD%86%E8%A8%98%EF%BC%9A%E8%85%B3%E6%9C%AC%E7%9A%84%E9%A0%86%E5%BA%8F-execution-order/"><strong>Unity開發筆記：腳本的順序 (Execution Order)</strong></a>   </p>
</blockquote>
<ul>
<li><code>解決方式</code><br><strong>功能列 : <code>Edit</code>  &gt; <code>Project Setting</code> &gt;  <code>Script Execution Order</code></strong><br><a href="https://www.youtube.com/watch?v=JyxqvaUeXeQ" title="Quick Tip: Script Execution Order (Unity Tutorial)"><img data-src="https://res.cloudinary.com/marcomontalbano/image/upload/v1627186371/video_to_markdown/images/youtube--JyxqvaUeXeQ-c05b58ac6eb4c4700831b2b3070cd403.jpg" alt="Quick Tip: Script Execution Order (Unity Tutorial)"></a>  </li>
</ul>
</li>
</ul>
<h4 id="程式耦合"><a href="#程式耦合" class="headerlink" title="程式耦合"></a><strong>程式耦合</strong></h4><p>新手最常犯的錯，不外乎我也犯了😢。<del>(展覽前我幾乎將所有腳本重寫過)</del><br><code>腳本之間依賴性過高</code>，出Bug簡直悲劇<br>因此在下手打程式前你可以思考一下這個問題，<code>**不要踏上我的路了**</code>  </p>
<blockquote>
<p><strong>延伸閱讀</strong><br>📕<a href="https://rstargames.com/2021/04/19/unity-%E8%A7%A3%E8%80%A6%E5%90%88%E8%A8%AD%E8%A8%88-%E4%BA%8B%E4%BB%B6%E9%A9%85%E5%8B%95%E6%9E%B6%E6%A7%8B/">Unity 解耦合設計 - 事件驅動架構</a></p>
</blockquote>
<h4 id="輸出-amp-編輯-差異"><a href="#輸出-amp-編輯-差異" class="headerlink" title="輸出 &amp; 編輯 差異"></a><strong>輸出 &amp; 編輯 差異</strong></h4><ul>
<li><p>編輯執行OK，但執行正式應用程式時沒有跑出預期的效果</p>
<ul>
<li><p><strong>關於Bug</strong></p>
<blockquote>
<p><strong>延伸閱讀</strong><br>📕 <a href="https://kendevlog.wordpress.com/2018/10/19/unity%E9%96%8B%E7%99%BC%E7%AD%86%E8%A8%98%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AA%8Clogging/"><strong>Unity開發筆記：如何使用日誌”Logging”</strong></a>  </p>
</blockquote>
<p>輸出的時候，可能是<code>執行序</code>的問題導致物件是null值或是…<br>我也不知道的問題，但如果有Bug執行檔是不會出現…  </p>
</li>
<li><p><strong>我的解決方式</strong>  </p>
<p>我們需要透過log找出到問題點，把<strong>Development Bulid</strong>按下去<br><img data-src="https://chi01pap001files.storage.live.com/y4mz9QW-N4NHpMk3cbWWor8rYraRJueHkzgvQcuUkdgkx8iCsvk4sLTOY7xVWa2wV1tg8QS6qcVa3g9yvM3ZFKmh_-0FJoHRT7fnnn5wNcekYF8VrFU3VCu6sfMUMk753P4qacEoupSeR0rPGjupEPnZzWWSosqIP2cukIA-3KJTqEP2AguAcWDhgmFvVMqh-FO?width=660&height=638&cropmode=none"><br>⇒接著在遊戲視窗內如果有bug就會出現在**左下角訊息視窗<code>Open Log file</code>下去，就會看到報告，接著就是跟在editor一樣了<br><img data-src="https://chi01pap001files.storage.live.com/y4m9CANqW-2u-0M4-EPZJl5B1gBEZ0loUt27RU1fCzqw8QhyQAQGWQyaJNzPWFbpbjQCCBZsT1S07DyhKnx-8br6ZfJUKYZ4bUB509-BFQ7q7VQbqN12Xkh4EJTw-D7WlnHp9iwCKl8vPPvNvcnwmrV7sQgFl1MCSMio7fMsnA3uEbOMxy9gZ1Q3odwUXtDt9nb?width=256&height=202&cropmode=none"><br><strong>接著開始歡樂的修Bug~</strong> 🤧  </p>
</li>
</ul>
</li>
<li><p><strong>Editor與輸出顯示差異</strong><br>尤其是Canvas裡的UI，如果你是開發手機遊戲<br>你就得考慮不同比例下的UI顯示問題，所幸Unity官方有一個解方<br><a href="https://www.youtube.com/watch?v=PLQ4ywB13eg" title="Creating adaptive UI in Unity with Device Simulator! | Unite Now 2020"><img data-src="https://res.cloudinary.com/marcomontalbano/image/upload/v1627187330/video_to_markdown/images/youtube--PLQ4ywB13eg-c05b58ac6eb4c4700831b2b3070cd403.jpg" alt="Creating adaptive UI in Unity with Device Simulator! | Unite Now 2020"></a></p>
</li>
</ul>
<h3 id="知識補充"><a href="#知識補充" class="headerlink" title="知識補充"></a><strong>知識補充</strong></h3><blockquote>
<p><strong>Design Patterns (設計模式)</strong>  </p>
</blockquote>
<p>可以探索一下，<a href="https://zh.wikipedia.org/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_(%E8%AE%A1%E7%AE%97%E6%9C%BA)">設計模式</a> 並非只有在開發遊戲，在軟體設計上是非常重要的概念<br>google上有非常多資源，有興趣的話可以多搜尋一下  </p>
<ol>
<li>📕<a href="https://douduck08.wordpress.com/2016/08/10/when-i-first-time-use-design-pattern/">初探 23種 設計模式 - when I first time use design pattern</a>  </li>
<li>📺<a href="https://www.youtube.com/watch?v=hQE8lQk9ikE">The 6 Design Patterns game devs need?</a>  </li>
</ol>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>每當寫一篇分享，時間，咻! 一下子就過了😌<br>本來的篇幅只有短短學習管道的部分<br>但一寫起來回想起這一年好多事，就都寫上了🥴<br>謝謝你閱讀完<br>如果有幫助到你，那我會很開心的<br>一年下來，我依舊覺得自己是菜雞<br>越學越覺得自己不懂的太多<br>雖然好幾次很想放棄<br>但坎跨過之後，收穫都是自己的了🎉 </p>
<blockquote>
<p>題外  </p>
</blockquote>
<p>還記得我大二的時候，一位大四學長來分享VR的製作技術<br>隨後我問起他怎麼學的，那麼厲害<br>他淡淡地回答 : <code>**時間到你就會了**</code><br><del>大四的我，是悟出那句話了</del>  </p>
]]></content>
      <categories>
        <category>bookreport</category>
      </categories>
      <tags>
        <tag>畢業專題</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 紀錄 ⟭ Foresea畢業專題(III)─《Finalfinal.docx》</title>
    <url>/bookreport/Foresea-bookreport-III/</url>
    <content><![CDATA[<h2 id="閱讀前注意"><a href="#閱讀前注意" class="headerlink" title="閱讀前注意"></a>閱讀前注意</h2><p>文長慎入，純心得，就當作看一個很長的故事吧。<br>我的文筆也沒有很好，若看不下去請自行左上角離開<br>其中個人主觀意識較重，若不喜勿入<br>如果你只想知道校外展我遇到了什麼事，可以到<strong>開花時刻</strong>這個快速連結<br>6/6 是表定的畢業典禮日期，疫情打亂了所有秩序😵，一年前誰能想到如此情況呢?<br>在家寫寫最後一篇廢文，這篇是大學的最後一篇。  </p>
<span id="more"></span>  

<h2 id="正篇"><a href="#正篇" class="headerlink" title="正篇"></a>正篇</h2><p>將分享我從 <strong>找組員 ⇒ 專題期間 ⇒ 專題結束後 ⇒ 校外展覽</strong> 的心路歷程。  </p>
<h3 id="播下美好的理想種子"><a href="#播下美好的理想種子" class="headerlink" title="播下美好的理想種子"></a>播下美好的理想種子</h3><p>團隊合作理想上是件美好的事，實際上是非常要命的。<br>除了有共同的目標，後續的團隊經營更是關鍵，相信大家都有體會過。<br>畢業專題，就是個魔王大挑戰。一年下來，情誼不是更加牢固，就是散掉👿   </p>
<blockquote>
<p>還有 <strong>專案管理</strong> 請好好學</p>
</blockquote>
<h4 id="落地生根的地方"><a href="#落地生根的地方" class="headerlink" title="落地生根的地方"></a>落地生根的地方</h4><p>說到分組，我想大家<code>**&quot;預設&quot;**</code>應該是自己的好朋友，這是最正常不過的答案了<br>不管能力、共識默契，都無須重新培養，是最佳的選擇。<br>而我，眾所皆知是個邊緣人🤪，預設是 null (空值)，只有兩條路 被撿 跟 自己找。  </p>
<h4 id="栽種的實力"><a href="#栽種的實力" class="headerlink" title="栽種的實力"></a>栽種的實力</h4><p>我認知自己的能力是普通且算平均的，在遊戲程式、網頁、動畫這些方面還堪用<br>加上當時想法只有 <strong>我想做一個互動作品</strong>。<br>起初我有向一些人談論過我的想法，但從未正式談論”成組”這件事。<br>因為一開始我在消極被動等待，等待有人撿我🥺<br>但最終…沒人撿😵，所以我自己成組去尋找人了。  </p>
<blockquote>
<p><strong>題外</strong> | 有時候我會好奇，大家會怎麼選擇…  </p>
</blockquote>
<ul>
<li>🙉 現是蔡逼八，左看有潛力<del>但戰力還不穩</del>  </li>
<li>🕵️‍♂️現有點實力與戰力<del>但是會吃老本</del><br>考量的中間因素有很多，例如 專案時程、個人特質、團隊性質等等，並沒有一個正確答案。  </li>
</ul>
<h4 id="鋪上土壤"><a href="#鋪上土壤" class="headerlink" title="鋪上土壤"></a><strong>鋪上土壤</strong></h4><p>慶幸的是，在升大三的暑假結束時，我順利找到3位組員。<br>當時不少人對我找的人有點疑惑，連組員們各自也不例外，都覺得很奇妙。  </p>
<blockquote>
<p>為什麼會找她呢 ? 而不是…  </p>
</blockquote>
<p>這三位確實是沒什麼合作過，4人也完全沒有在同一組過<br>如果問我當時在想什麼，可能是被附身了吧。  </p>
<ul>
<li>沒啦 ! 我當然是有跟3位好好說清楚找他們的原因。<br>我的專案所需的職位，分別是 <ul>
<li>遊戲程式</li>
<li>網頁</li>
<li>美術</li>
<li>動畫  </li>
</ul>
</li>
</ul>
<p>企劃則是所有人共寫，找人的標準來自上面的<strong>題外話</strong></p>
<ul>
<li>潛力者*2 + 戰力者*2  </li>
</ul>
<p>當然我是潛力者🥴，程式菜逼八。<br>綜合起來，需要在各方面是有互補的。<br>目標一致，但各自思考的面相是非常獨立的<br>不會太常出現<code>毫無理由</code>或<code>附和通過意見</code>的問題。  </p>
<p>實際上到成組這期間，我等待回覆是非常煎熬。<br>當時最大的困難，是讓<strong>兩兩好友</strong>拆在不同組這個問題。  </p>
<p>無時不刻，讓我覺得自己像卡通裡的個反派🕵️<br>如我上面所說的，普遍的<strong>預設值</strong>是好朋友。我並不是刻意將其拆散，單純是找符合我需求的<br>在邀請第一個人的時候，我意識到這個問題，並去詢問多個局外人，有的人說 :  </p>
<blockquote>
<p>「很不道德，你應該找兩個人討論，找一個這麼做是在破壞人家的友誼」<br>「為什麼兩個都不找進來 ? 問題不就解決了 ?」  </p>
</blockquote>
<p>也有人說 : </p>
<blockquote>
<p>「即使是朋友，目標也可能各自不同，選擇是個人自由，沒什麼問題」  </p>
</blockquote>
<p>中間，我不斷地告訴其中兩位，希望各自可以跟好朋友談談，要拒絕我也沒關係。<br>這個問題，在理想跟愧疚之間，糾結我整個暑假🥴。  </p>
<h4 id="種子驚喜包"><a href="#種子驚喜包" class="headerlink" title="種子驚喜包"></a>種子驚喜包</h4><p>壞事是這樣的全新團隊需要磨合的點更多，只能祈禱這樣的組合一路順利。<br>好事是這裡將 從0共同成長，0偏頗、0規則，可塑性更高(我不確定是不是這樣講)<br>傳統來說就是新活力新氣象🥴<br>我想這3位都應該有預設心理:  </p>
<blockquote>
<p>投資一定有風險，<strong>團隊組成有凱也有雷</strong>，組成前應詳閱公開說明書。  </p>
</blockquote>
<p>很抱歉，我沒有給3位詳閱說明書的機會，不過非常謝謝她們答應當時的我<br>票選出主題、決定好指導老師，大家抱著美好的理想起步了<br>不過卻也是另一個噩夢的正式開始…  </p>
<blockquote>
<h5 id="分組題外話-綜觀大學生涯"><a href="#分組題外話-綜觀大學生涯" class="headerlink" title="分組題外話 | 綜觀大學生涯"></a><strong>分組題外話 | 綜觀大學生涯</strong></h5></blockquote>
<p>坦白講，每次組隊就像是在玩踩地雷，但我踩得蠻歡樂的<br>不過記住同時<strong>自己對別人也是顆地雷</strong>。<br>每一堂的團體作業，我的組員組成都不會一樣。<br><del>如果不喜歡驚喜，建議不要這樣。</del><br>大學團體作業很多，可以跟朋友、跟能力強的、跟混分的等等，但先取決於自己的角色定位<br>四年裡，我加入過許多不同的團體組合裡，很好玩也很刺激<br>不談”合作愉不愉快”，跟平時不同群的人交流，讓我知道更多不同面向需要思考。<br>如果還有團體作業，我蠻建議跳脫平時的組，不過後果請自行負責。  </p>
<h3 id="發育不良的樹"><a href="#發育不良的樹" class="headerlink" title="發育不良的樹"></a>發育不良的樹</h3><blockquote>
<p><strong>理想很美滿，現實很骨感。</strong></p>
</blockquote>
<p>樹苗的成長，沒人保證能長得又大又直<br>專案的時程，沒人有十足把握在準確的時間完成😭</p>
<h4 id="陸上颱風警報"><a href="#陸上颱風警報" class="headerlink" title="陸上颱風警報"></a>陸上颱風警報</h4><p>除了專題外，同時還有畢業展覽的事務正在進行。<br>我與組內的另一位組員分別擔任總、副召，要讓工作跟專題達平衡非常困難 😵<br>展覽籌備前期有很長時間都在討論與規劃，更棘手的是事務涉及多個組。<br>溝通與合作在磨合期是相當花費時間的。<br>若有重大事件，幾乎是要將我的專題停擺，先將另一邊止血。<br>這樣的問題，發生不少次，但也沒辦法，該解決就需要解決。<br>但每次專題一停擺，我很想跟專題組員切腹謝罪去了  </p>
<h4 id="瘦弱的樹苗"><a href="#瘦弱的樹苗" class="headerlink" title="瘦弱的樹苗"></a><strong>瘦弱的樹苗</strong></h4><p>在升大四的暑假，我就已經陸續在寫遊戲中的程式<br>組內的大家也如火如荼的進行各自的進度。<br>偶爾會與指導教授定期的專案進度討論，但每每到這個環節，我很緊張也很尷尬。<br>因為我總是 是那個 <code>進度沒有達標</code> ，而且會說「<strong>相信我會完成</strong>」的人。<br>(什麼熱血笨蛋啦!)<br>說這句話的同時，我想讓大家安心，另外也是在為自己打氣，雖然聽起來很唬爛。  </p>
<blockquote>
<p>結果是什麼呢?  </p>
</blockquote>
<p>當然是我成了投資中最大的風險，成了團隊之雷，更成了一個打臉自己的人😰  </p>
<center>

<p><img data-src="https://chi01pap001files.storage.live.com/y4mKsiKYyPeJlzwV7CX1cucK-W1yrWxB7UMDdHDDRZ1YUtZ4HVTwKmHqplY8i1LM4m-9jWGwMSJO8A-XZvQowN4_RitKSKr4D6sUklWxjrpStu0ymf0kn31zDMszPG5XJIQUjkx9hwR6-tJdUGqZmjZAZH-af_d3QALcqKdlENtWz44OYMugCHgCwDamgAVDaGz?width=256&height=256&cropmode=none"> </p>
</center>   

<p>當看到其他組員拿出一堆的進度，而我有時候因為程式問題卡住很長一段時間<br>大家不斷地在成長，只有我還在原地。我心裡開始迷惘，不知所措。<br>因為程式會寫就是會寫，按下執行就知道了，跑不出來就是寫的人的問題。<br>無疑地，當時超級菜雞般的程式能力，是完全無法支撐起整個專案。<br>即使我學習再學習，練習再練習，常常還是跑出令人絕望的 Error 與 BUG。 </p>
<center>  

<p><img data-src="https://chi01pap001files.storage.live.com/y4mQV5G4B0IOVO5ESIMw1byLnoLNxteeWCaJpbfiH1hHi7iDWytdwQYwbyABQ2PXAWiEVgqJ80W68t8faBQDfnovvsaEMli2KKblFrMKmXVdC4rOykE9L3wG-TbgtKga_ZUweHjd7g8DpnqRfHcjXX83f4shg4axqWnYSc4B-2vw2cz82eoKUqmWGC0MisIoka8?width=256&height=174&cropmode=none"> </p>
</center> 
大家非常包容，知道我身兼畢展總召與擔任程式的部分比較繁重，都說沒關係  
老實說，到最後我已經不知道大家是真的相信我，還是被我逼到不得不相信我了。  
不論如何，專案時程不能變成無底洞，所以我告訴自己，一刻都不能怠惰。  
至此，我開始跟日出報到:D...。  

<h4 id="不間斷的夏秋季颱風"><a href="#不間斷的夏秋季颱風" class="headerlink" title="不間斷的夏秋季颱風"></a><strong>不間斷的夏秋季颱風</strong></h4><p>之前聽做專題的學長姊都說好幾天會做到日出。<br>我思考了一下🥴，Umm…年輕人，我還行啦👍<br>第一次做到看日出，我心想 :<br>「真感動，我認真到日出，程式修好就順了吧，日出再見了」  </p>
<blockquote>
<p><strong>沒想到，這一再見，真的每天再見面。</strong></p>
</blockquote>
<p>製作專題的當年9至12月，我每天都在看日出，少說也有3.5個月<br>日夜顛倒加上畢展總總事務，心理與生理狀況都開始亮起了紅燈。<br>我的焦慮值<strong>MAX</strong> ! 躁鬱值<strong>MAX</strong> ! 體重<strong>MAX</strong> !<br>生理期直接Bang不見🎉 !<br>經歷幾次的狂風暴雨，盆栽倒了，而我也被吹倒了🥀</p>
<h4 id="長歪的樹"><a href="#長歪的樹" class="headerlink" title="長歪的樹"></a><strong>長歪的樹</strong></h4><blockquote>
<p><strong>早上八點，晚安</strong>🌑<strong>；早上十一點，早安</strong>⛅</p>
</blockquote>
<p>不僅是專題的程式的問題，畢展的事同時也讓人心煩。<br>日復一日的熬夜，我開始對專題變得有點消極。<br>會對組員說 :<br>「<strong>我們可以提出概念性的東西，做出一兩關就好，不一定要完全做完…blabla</strong>」<br>到了專案進度討論，大家會告訴我，先去完成其他的關卡比較重要，小東西之後再細修<br>很不巧，A關卡與B關卡中間機制需要連動。當我完成A，再去完成B，換成A有問題了  </p>
<p>◢▆▅▄▃ 崩╰(〒皿〒)╯潰 ▃▄▅▆◣  </p>
<p>寫不出來，崩潰挾帶氣憤，我就會說「不然你來寫啊 !」<br><del>阿…容我回到過去揍自己一拳</del><br>氣憤中更多的是對自己做不到目標而感到失望。<br>最不幸的大概是家裡的娃娃們，全變成我的出氣筒，橫屍遍野。<br>早期對專題懷抱的熱情，已經被消磨成灰了。  </p>
<h3 id="滿地枯葉"><a href="#滿地枯葉" class="headerlink" title="滿地枯葉"></a>滿地枯葉</h3><p>ˍ(:з」∠) 我…想…躺著休息</p>
<h4 id="用力吸收水分的根"><a href="#用力吸收水分的根" class="headerlink" title="用力吸收水分的根"></a><strong>用力吸收水分的根</strong></h4><p>專題總共有4次報告，我一共上台3場。<br>最後2場，都是前一天熬滿夜把程式硬是弄出來，勉強弄好3-4關(但我們一共有6個關卡哦🥴)<br>組員們在報告前10分鐘，都還在幫忙我弄報告的大大小小事，非常感激不離不棄😭<br>因為遊戲進度是掌握在我手上，其他人是不太好說明遊戲新產出的部分<br>所以我報告是最適合的，我知道我才能把這邊的進度好好說明。<br>我想最緊張的不是我，而是指導教授跟組員們，每次都是在現場打開驚喜包🎁  </p>
<center> 

<p><img data-src="https://chi01pap001files.storage.live.com/y4mMZgrK4sHXixsgQLTeCBVabRw0CPchkWizOj7WWxq8hivFiGPteNC2fxfW-aEwaNQRsJpNZ_3jTnNrvpZNDEpPrU4xQRYmNtUID4Y33HzwB_ERuYEA_RV7f9Z7xmA4wN7cCQQykhpTXWMXU-ad9tHCJzHY4Zv0rvX0mY3FbsjTkpwAsEJGtRSUs0E_oVPTjJv?width=256&height=145&cropmode=none">  </p>
</center> 

<ul>
<li>大家心臟有沒有越變越大顆呢?  </li>
</ul>
<p>報告的結果，想當然爾，非常之差💩。<br>有一場，回想起來我都覺得很尷尬，因為沒有獲得什麼新回饋。<br>都是之前提過的，「美術很棒」、「網頁很棒」。<br>當下我在想我的部份是 <strong><code>無藥可救</code></strong> 了? 還是 <strong><code>出乎意料</code></strong> 呢?<br>不管怎樣，我知道我搞砸了。<br>無聲的回饋，間接說明我努力的還不夠。<br>最後一場更是慘不忍睹😢，因為遊戲沒有做完，僅有4關的試玩的影片片段。<br>組內成品還好還有網頁跟動畫。  </p>
<center>   

<p><img data-src="https://chi01pap001files.storage.live.com/y4m0Uxbx4G-Qpga3ZmbeaieLwy7-KWgS1l-MkPwVvICU2jdhRXq8vuWpHkHRPg29sHCKulQ0Vcd8Pv4aI1wc9ryicXDknqIKfMGUa2BdRJIW5lS-PURXmhp0KTGLAryvaLWU-BWd_sdZeBX60cGbjnKBpnt7tUz65KkyaA00OM8n5DTQNC6bM-lDhTIsxucS7FQ?width=256&height=256&cropmode=none">  </p>
</center>   

<ul>
<li>當時被問到我是回答 :<br>黑丟，還沒做完 🙈 ，瞬間冷場。  </li>
</ul>
<h4 id="溺死的根"><a href="#溺死的根" class="headerlink" title="溺死的根"></a><strong>溺死的根</strong></h4><blockquote>
<p><strong>努力≠有結果</strong></p>
</blockquote>
<p><img data-src="https://chi01pap001files.storage.live.com/y4mKcfCrbkRMCaopIkNsDbQIgg1Y4-ezX4RFUSL8PRkmzz18gtPLsYpxpI5RRizytEQIuJFHEkGxfY2q_lInJdVmNvpJtlNPZW945yANIIg3PSRhqodcgqONnhsdSwrBTFvaEh2eFhXZz3VzPrjWjiDOljlKrhdOEQQ8dg5untwmPzQLLsqFGaNVfLAlcvNmnSA?width=660&height=440&cropmode=none"></p>
<ul>
<li>學習經驗曲線 </li>
</ul>
<p>大家都懂這個曲線，學習最難的，就是一開始陡~~~到攀不過的顛坡。<br>投入大量的時間與努力，獲得的成果卻是不如預期。<br>從我寫程式開始，毫無意外也遇到這個問題。<br>越寫不是越有成就，而是失望。  </p>
<p>每天熬夜讀文件、看教學、反覆修修改改，執行後卻還是出BUG。<br>順利的話，1天可以寫出一關。遇到問題時，都可能要修到1個禮拜，甚至更久。<br>隨著時間，坐在電腦前已經不知道自己在做什麼了，會覺得這有什麼意義呢?<br>期間我推掉很多的社交活動，窩在家學習、學習、還是學習。  </p>
<p>以前開電腦，很開心。現在開電腦，我只會想砸壞電腦。<br>一開機，我會問自己還要繼續嗎 ? 隨時放手，就一路爛也沒人能奈何了我💩  </p>
<center>

<p><img data-src="https://chi01pap001files.storage.live.com/y4mpRtrZKORO9rXvUtd4tm5-jhN5j27y0fiZAbcWEnbwsTKbGTNh2x16j3cKHajzxBTbvgtdZJlmClfnS0s8EjZJFXAebjHx0QnIxB48IlSgtecYllYxC9e0Kmi3obDdeEFRcMi2YHJXg6QMq5SaODO5i2VDIcigQDG-zASVtanwEvgEfgrtvlR5LHRETy5wo9L?width=256&height=256&cropmode=none">   </p>
</center>

<p>大家也爛 d(`･∀･)b  </p>
<blockquote>
<p><strong>要，當然要繼續。責任心告訴我不能就這樣。</strong>  </p>
</blockquote>
<p>堅持這樣的心情，一路到校內展，讓我做出第一版的  Foresea<br>不過是歪七扭八的Foresea<br>如果你在校內展玩到，我跟你說聲抱歉，你玩到一個非常失敗的遊戲。<br>當時的Foresea是一個跑不順，機制上一堆bug，架構鬆散的作品。  </p>
<ul>
<li><p><strong>關於Foresea ver1.0</strong><br>  美術、動畫、網站這些產出可以說相當的好。  </p>
<p>  我會覺得校內展Foresea遊戲失敗的原因，<br>  在於我的能力沒辦法完好地展現企劃中的玩法與流程<br>  在11月的時候，我就做不下去了  </p>
<p>  因為心裡始終無法認同自己做出來的作品<br>  更覺得自己浪費了這些美術圖，組員辛苦畫出來，而我沒有能力去展現出來。      </p>
</li>
</ul>
<h4 id="軟爛的泥土"><a href="#軟爛的泥土" class="headerlink" title="軟爛的泥土"></a><strong>軟爛的泥土</strong></h4><p>因某些因素，當時有討論到<strong>要不要將專題報告延長兩周</strong>左右<br>但我知道再怎麼延，我還是無法完好地呈現出來<br>加上我的精神上非常抗拒，我想把報告結束、展覽結束，結束長久下來的熬夜。<br>當最後一場報告結束，  </p>
<blockquote>
<p><strong>「結束了，成品怎樣也沒關係吧?」<br>「即使有BUG，或瑕疵，再修也不會有什麼改變」</strong>  </p>
</blockquote>
<p>這些想法不斷湧現<br>但結果是我又一路從報告結束修到校內展，至少讓展覽可以順利展出幾關的原型。<br>校內展覽結束，本是專題的終點。<br>但對我來說，卻只是中繼點。    </p>
<h3 id="新芽"><a href="#新芽" class="headerlink" title="新芽"></a>新芽</h3><p>一個新開始，不難；中斷的重新開始，更難。  </p>
<h4 id="殘枝"><a href="#殘枝" class="headerlink" title="殘枝"></a><strong>殘枝</strong></h4><p>五月初是校外展，四月中旬是競賽報名截止，代表我必須在這之前將作品完成。<br>另外，我還有展覽總召的身分，越快到展日，這段期間是也是不能閒的🤯。<br>這幾個月，我每天都會打開電腦，開啟Unity，接著跑去躺在床上，看著娃娃，對自己說 :    </p>
<blockquote>
<p><strong>你這廢物，去工作，快去電腦前坐好</strong>  </p>
</blockquote>
<p>這是我每天的例行公事，我不是對自己喊加油、喊要堅持下去<br>我也不是斗M，沒有喜歡被罵的癖好。<br>一番精神喊話後，我會把Unity關掉，開啟Youtube開始看迷因，讓自己開心點。<br>我知道自己腦袋亂糟糟的，沒有動力做下去，也不知道從哪裡下手。  </p>
<center>

<p><img data-src="https://chi01pap001files.storage.live.com/y4menHF2FwISc3qcsoKFfru0O3K4WnXG2sKH7YQf3DlgWHz7e7vX9SKqmkEnHWGlCtag_KgxWQlTRtH2XnB1jvSzoS4Ok0sdQW0MRaT45C72HUxmz8glJtmb0gRNeJaaRAMDnZli5MFocePYBkPNCmz6ZmaF6TB4i3h7oceMwtn5LqHfmaSOX9An81-M3Kwf80y?width=371&height=660&cropmode=none">  </p>
</center>

<center>Indeed. ┐(´д`)┌ 阿還真的就打出來了。</center>
  

<p>3月，這個模式還是繼續，只是對自己說的話更狠了。<br>期間我不只看大量的迷因，之前訂閱很多程式教學跟遊戲開發者的頻道，我也看了不少<br>偶爾看完，靈感一來就會重新釐清思緒，將遊戲的內容文件重新整理、修改<br>卡住了，又返回到床上，說一樣的話，再滾回到電腦前執行例行公事  </p>
<h4 id="養分"><a href="#養分" class="headerlink" title="養分"></a><strong>養分</strong></h4><p>吸收新的知識，我的程式能力有逐漸成長，實際上到3月我還沒正式修改到遊戲的程式<br>大多是開新檔案練習。  </p>
<p>準備的差不多後，我下定決心把遊戲中的程式碼全都砍了<br>就是把遊戲互動的部份全都歸零。這時候離競賽截止點還有一個月半。<br>我知道風險很高，況且我沒有多大的把握能做完，但我知道我必須做。  </p>
<p>如果你還記得上一篇分享提到的<strong>程式耦合問題</strong>，我正是要解決這個問題<br>否則這個作品還是會中途運作崩潰、遊玩不順利，總總都會影響遊玩體驗。<br>更別說展覽3天，每天8小時。除了基本求能運作外，更要兼顧穩定。</p>
<h4 id="重新發芽"><a href="#重新發芽" class="headerlink" title="重新發芽"></a><strong>重新發芽</strong></h4><p>一天天的特殊精神喊話，老實說也不是沒用處。<br>越喊會對自己的能力很氣憤，氣憤到很不甘心，不想只有這樣結束😠。<br>帶著這份不甘心，我每天瘋狂打著鍵盤，從早打到晚  </p>
<p>因為住在家裡，要照顧好家裡的大小事，所以天天見日出的模式是不行的<br>4月初，我把原本的進度補回。(這麼快速的原因，回想一下學習經驗曲線)<br>因為要上繳競賽成品，一邊請組員幫我試玩，當然還是少不了很多的Bug。<br>平時學習的反饋在我製作上的錯誤，是越來越少，程式運作也變更流暢  </p>
<h4 id="豪雨後的蟲災"><a href="#豪雨後的蟲災" class="headerlink" title="豪雨後的蟲災"></a><strong>豪雨後的蟲災</strong></h4><p>離繳件剩兩個禮拜，這時候，不幸的事情發生了。<br>在家準備晚飯，接到一通家人出車禍的電話，雖然沒有大礙，我依然失落了好幾天。<br>低落的心情，也影響我在製作上的速度，但我的手還是沒有停止。  </p>
<p>直到繳件當日傍晚，剩餘一個關卡的BUG還沒修完，其餘的都能正常運作，<del>正當我以為。</del><br>我稍微放心地收拾書包，從圖書館騎車回家，趕緊洗完澡完成剩下的部分。<br>除了主程式外，還有企畫書，我事先有準備好文件，剩下一些急忙委託組員協力完成<br>晚上十點組員試玩到有出現嚴重的BUG，我不斷地測試，但始終想不到問題。    </p>
<blockquote>
<p>可怕的BUG，在第一關出現了。  </p>
</blockquote>
<p>總不能剛開始玩就出現BUG吧 !!!<br>我拋棄維修另一個關卡，瘋狂般的不斷測試與修改第一關的BUG<br>幾經測試都行不通，我開始崩潰了，發給組員 : <strong>我好想放棄</strong> 的訊息  </p>
<center>

<p><img data-src="https://chi01pap001files.storage.live.com/y4myqNuZwO1Lkh-WrEskpxQv17jgiR4x_fseebiLuEFCoZXz_2mkLLVm0F24iRaZiIyQyFzcyX6TB9MeN9Bv2Zd-9E8Y5Vi6wd0ehxgB0ZbLnj4RRaVBsQthX_pimMOTACjvdd9IaxvMYdUuwFASPwAA1LWwJ4BpCFkt3mopbP3DDhd7d8TF9X-ORT7kTny-JyJ?width=256&height=144&cropmode=none"><br>WTF  </p>
</center>

<p>後來冷靜了一會，終於把該死的BUG解決了。<br>其實Foresea這時依然不是完整的，我還是將它打包繳件去了<br>其中放視企畫書有一項可說明<code>未完成的部分</code>我詳實填上。<br>組內的其他作品都已經登陸完成，只剩遊戲的部分。  </p>
<h4 id="雨後陽光"><a href="#雨後陽光" class="headerlink" title="雨後陽光"></a><strong>雨後陽光</strong></h4><p>最後一天，晚上十一點五十五分，最後一步了，我將企畫書上傳，始終無法成功<br>原因是官方的伺服器被塞爆了，最後一刻，全台各地的同學也正拼命地上傳。 </p>
<p>五十八分，還是<strong>失敗</strong>。<br>五十九分，依然是<strong>失敗</strong>。<br>整點十二點，<strong>失敗</strong>。  </p>
<p><img data-src="https://chi01pap001files.storage.live.com/y4mKkIyZW8L8QaxhJSAjyR3MCYMR6YOK9vVc7n-ynHVNkNmhG3QHv01S3hEWWvux-r1RmoOXRvuFprp0HNqeo5HH9i-LJmuPSlzH-ikDLolCXkWF4ExQ0a6dBdi4zqY28mkZeZWm5EwAsY4JUQk_7YsAeB4shfxGQ5cp9ST-Esl-w46aoICsoY8hkCDDuuvgxZe?width=600&height=338&cropmode=none"></p>
<center>絕望ing</center>  

<p>我跟組員告訴這壞消息，遊戲組的項目是沒有參加了，我非常抱歉。<br>同時我也不放棄的將瀏覽器切到上一頁<br>反覆重試繼續上傳<br>直到十二點零五分  </p>
<blockquote>
<p>???? ，我發現上傳%數還會動  </p>
</blockquote>
<p>沒多久，上傳成功。<br>我急忙按送出，看見欄位狀態是完成的。  </p>
<p>以為我累壞眼花了，我又反反覆覆刷新頁面20次，看到狀態依舊是完成。<br>我告訴組員，好像…報成功了。<br>關上電腦，我安心的吃起晚餐。<br>這一餐即使冷掉，還是很美味😌   </p>
<h3 id="往更高處"><a href="#往更高處" class="headerlink" title="往更高處"></a><strong>往更高處</strong></h3><p>樹枝不會乖乖挺直往上生長，<br>可能躺得長、坐者長、趴著長，還是<del>八仙…</del><br>總之，一切就是出乎意料的發生。  </p>
<h4 id="特級肥料"><a href="#特級肥料" class="headerlink" title="特級肥料"></a><strong>特級肥料</strong></h4><p>很匆忙又不完整的狀態下，我知道得獎或入圍機率很低<br>但我還是沒有停止修改Foresea。<br>繳件讓我獲得短暫的休息，隔天起床我還是跟往常一樣，嘎啦嘎拉地打著鍵盤<br>把握在展覽前完成Foresea，包含一些細節上的優化。  </p>
<p>四月底，組員第一時間貼出我們入圍消息，我不敢置信，<del>因為我被暴雷了</del>。<br>完全出乎我意料之外，網頁入圍就很棒了，我不敢相信的是遊戲竟然也入圍。  </p>
<p>開心了幾小時，我又回到電腦面前繼續修改。<br>這個消息把修BUG到快沒電的我，換上新的強勁電池，滿電開始運作。  </p>
<h3 id="開花時刻"><a href="#開花時刻" class="headerlink" title="開花時刻"></a><strong>開花時刻</strong></h3><p>展覽前3日，扛著行李到高雄，準備展前布置。<br>白天到展場幫忙，傍晚我馬上回到旅館，打開電腦又敲起鍵盤<br>一敲又是到早上六點，八點又趕到會場布置。  </p>
<p>直至展覽前一天，我還是沒睡，除了修遊戲之外，也在準備來客導覽的內容。<br>完成主程式輸出後，把預備用的電腦充飽電，等待著明天上戰場。  </p>
<p>展覽第一天，我的電腦中邪了。<del>絕對不是毒。</del><br>前一天檢查還好好的電腦，早上拔掉充電線重新檢查檔案<br>電腦開機卻不斷進入藍屏，修復作業也無用，眼看都要八點了<br>我緊急叫上組員的預備機，才解決這件事。展覽前組內就有準備2-3台電腦  </p>
<p>好消息是<br>我以為要幫服役5年的電腦舉辦喪禮了，經過CPR(重灌作業)起死回生了🥴  </p>
<p>God，能讓我稍微輕鬆一些嗎OTZ。  </p>
<p>第一天，首發導覽是我，為了提神，灌了咖啡就上陣了<br>展覽這段期間，遇見很多有趣的人，像是 </p>
<ul>
<li>👨‍🎓同樣是學生，會交流製作心得與校際之間的差別等等</li>
<li>👨‍💻遇到開發者，會給予很有用的回饋建議，解惑我的問題</li>
<li>👾遇到遊戲論壇廠商，提供後續成品的發展建議</li>
</ul>
<blockquote>
<h4 id="關於學生"><a href="#關於學生" class="headerlink" title="關於學生"></a><strong>關於學生</strong></h4></blockquote>
<p>遇到科系性質很像的學校，像是中教大的數位<br>非常活潑的跑來交流，說著我們系的教程是他們的基底😆<br>互相吐槽著學習遇到的好笑的事<br>後來還來個校際外交，邀請對方去的攤位做客XDD。<br>也有遇到很多厭世大學生，看著看著就會開始談心的也很多😆  </p>
<p>既然是性質很像，不免去逛逛，交流一下。<br>中教大的作品目標導向非常明確，通常是專注在某種議題上去發想<br>成品也蠻完整的，種類也很多，有桌遊、電腦遊戲、網頁、平面等等<br>結合議題延伸的成品，讓內容很充實。<br>如果未來有什麼聯展，我覺得也是不錯的經驗。  </p>
<blockquote>
<h4 id="關於開發者"><a href="#關於開發者" class="headerlink" title="關於開發者"></a><strong>關於開發者</strong></h4></blockquote>
<p>當時被問到 : </p>
<ul>
<li>製作這個專題對你的意義是什麼 ? 遇到最困難的是什麼 ?</li>
<li>作品往後的發展你們是怎麼想的 ?</li>
<li>議題只是為專題而生? 還是有什麼企圖心 ?</li>
</ul>
<p>我知道可以很滑溜的說，會將作品提供給某某單位做教學使用、更新成手機板供大眾用等等的<br>但我卻誠實地說 : </p>
<p><strong>「對，專題一結束，這個作品也走向終點了。」</strong></p>
<p>因為我也想知道 <strong>同屆學生裡之間的差別</strong> 到底在哪。  </p>
<blockquote>
<p>講解得很詳細，專題也很完整，但就是少了 <strong>商業化</strong> 的思考</p>
</blockquote>
<p>對方舉例了很多他自己怎麼將作品商業化的例子，<br>像是 推出季更DLC 、找網紅推廣試玩等等<br>這邊比較像是行銷面，開發方面就不細講了，比較吃團隊創意😵。  </p>
<p>後來我才知道 他也是個學生同時也是個開發者。<br>但不難看出，在各展覽競賽獲獎的作品，行銷面確實也做得不錯，<br>甚至很早就覺得 <strong>這一定會得獎</strong>  </p>
<p>很快的一天就結束了，展覽過程中也少不了BUG的存在😵<br>導覽時幾乎都被我搞笑地呼攏過去。整體來說導覽很好玩，甚至我都忘了我沒睡這件事。 </p>
<p>這幾天嗑了很多的咖啡因，都是處在完全亢奮的狀態<br>其中一天我意識到我快不行了，於是就休息了一下。<br><del>就跟著跑去唱卡拉OK桑一下，主要讓自己的精神緩緩😵</del><br>每天回到旅館後，第一件事就是坐在床上修起BUG。<br>沒錯，又熬到天荒地老。<br>在展覽最後一天，修到剩下不影響運作的小BUG🥳  </p>
<h3 id="高處"><a href="#高處" class="headerlink" title="高處"></a><strong>高處</strong></h3><p>最後一天，因為有入圍，下午就前往頒獎典禮看開獎。<br>如果你是未來想創業、想獲得獎項、獲得廠商青睞，我非常建議你去看頒獎典禮，是自由參加  </p>
<p>頒獎時，會請不同領域的專家以及公司創始人來頒獎<br>同時也會講解 <strong>評比的方向、目前市場所需、以及他們最想要看見的(現今作品欠缺的是什麼)</strong><br>不少獎項是有從缺的，代表當屆是沒有到水準的，但就是會有那一兩個脫穎而出無疑是金獎的  </p>
<p>這裡，會聽到 <strong>自己跟別人有多大的差別OTZ</strong>，不會只有是校系問題，有很多小校系也是有得獎<br>總之大家都是有機會的，取決於 <strong>你是不是有做到那些面向。</strong>  </p>
<p>評審最常講到<strong>商業化</strong>這件事，以<a href="https://gnn.gamer.com.tw/detail.php?sn=214633"><strong>遊戲組金獎</strong></a>為例好了<br>劈頭說 <strong>這直接可以賣了</strong>，除了完整度很高，架構穩，Idea也是不可少的，更重要的是發展性<br>這類型的遊戲性高，往後更新的方向是非常廣的。  </p>
<p>當然，不同類型有他獨特的地方，我想教育遊戲也是有自己的一片天，看要怎麼發展而已。<br>有興趣的話可以查查看歷屆獲獎作品。  </p>
<p>這天，我覺得自己的能力很弱，看著頒獎，比不上這些優秀的同學，我很失落<br>但我也知道自己欠缺了什麼，之後會更加地努力💪。<br>三天的展覽，跟著回程搭的末班車一同結束了。  </p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>完整看完的人給你拍拍手👏👏👏<br>雖然沒有100%將時間投入製作，因為同時3-4月我在考駕照，還有準備5月初的多益<del>(職場預備用)</del><br>製作Foresea幾乎占滿我大學最後一年的生活，不過幸好我活過來了。<br>還好駕照過了，可惜英文最後近乎裸考上陣，考了個不是很滿意的分數，應該夠用啦🥴。<br>但我還是不會後悔啦。  </p>
<p>沒有這些歷程，就不會有第二篇的程式分享文<br>更不會有雙入圍或校外評分獲獎那些結果。<br>最主要的還是組員們非常可靠，才有這些成就👍，危難時都能立即神救援。  </p>
<p>雖然很多時刻，我只能跟別人說</p>
<blockquote>
<p><strong>抱歉，我真的笑不出來</strong>  </p>
</blockquote>
<p>很多心情，並沒有告訴組員、朋友、甚至是父母<br>我不太想讓人去跟著操心，這些 <strong>需要從自己改變的事</strong>。<br>這不是好方法，我知道😕，但這就是我。<br>有人告訴我，這種什麼都沒講的人很容易出事<br>放心啦我還在貼 memes 代表我沒事0v0b  </p>
<p>曾經有人問我為什麼所有事情都要拼命做到100分 ? 有些事情根本不值得。 </p>
<blockquote>
<p><strong>是啊。我也很想知道到底是什麼驅使我這麼做。</strong></p>
</blockquote>
<p>有些一看，就知道我拼命的結果不會是滿意的，但我還是會做。<br>像是繪畫這件事，並不是我的專長，我曾熬夜花好幾天去完成一個作業<br>結果理所當然還是比設計強項的同學差個十萬八千里<br>但如果不做，我就不會知道自己極限到哪裡，也看不清楚自己。  </p>
<p>還記得某堂課有抽彩虹卡，我抽到  </p>
<blockquote>
<p> <strong>「I am Me,and I am okay.」</strong>  </p>
</blockquote>
<center>

<p><img data-src="https://chi01pap001files.storage.live.com/y4mdzIhAuXcAQuWuA69j7sXX5tId3C6_zCrp6xIZ8bwjmO423wbh6Sz5b3wrPDifwBIRIScg0_O61AXgf5TRJLBIIG0GpL3nH1xCK3Ng3awd1jnGLyvEWolPX8uhGaWK1NLmjNxuByu7AvEKEQRG9EJoq2aVWD3OixoT7oLPhBLq7_eIxRA9yxMNuMo4riMW1X0?width=256&height=172&cropmode=none">  </p>
</center>

<p>網路上的圖，我的忘記收在哪了<br>但我一直記得這句話<br>現在再看到真是一言難盡。 </p>
<p>分享這些事，希望你也別遇到同樣的問題<br>要是遇到時也別氣餒，至少還有我這個<strong>廢出新高度</strong>的極端例子<br>讓你不會那麼快放棄🥴<br>好的，各位，掰掰了~ (´◓Д◔`)  </p>
]]></content>
      <categories>
        <category>bookreport</category>
      </categories>
      <tags>
        <tag>畢業專題</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 筆記 ⟭ 初探 Git</title>
    <url>/program/LearnAboutGit/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>新增一個新檔案的時候<br>你會好好命名放進資料夾理嗎?<br>還是就<code>「未命名-1」</code>先放著在桌面呢?  </p>
<span id="more"></span>  
<p>檔案或資料夾囤積幾乎是習慣了<br>久而久之硬碟容量還不夠用<br>即使命名了，也可以透過內建搜尋找到檔案<br>所以索性就不整理了<br>想想這還真是個壞習慣  </p>
<p>我還在大學時，是設計與程式雙併行的情況下<br>每個人的電腦都是從final~final-final…一直下去<br>桌面或資料夾在期中、期末不用講就是…</p>
<blockquote>
<p>塞爆它!  </p>
</blockquote>
<p><img data-src="https://i.imgur.com/T5ftLuH.gif">  </p>
<p>然後期末結束才再整理<br>想起之前真是可怕<br>光是程式專案，複製來複製去<br>想呈現在網頁上<br>又只會開 github 網頁版把東西先打包丟上去<br>感覺非常沒效率   </p>
<p>回到程式，版本控制無所不在<br>可以加強團隊合作的問題<br>使開發效率更加快速<br>這麼好用的東西，不學嗎？   </p>
<h3 id="檔案囤積症"><a href="#檔案囤積症" class="headerlink" title="檔案囤積症"></a>檔案囤積症</h3><p>來看看常發生的問題：   </p>
<ul>
<li>不想每次都重新打包再上傳  </li>
<li>不想覆蓋掉舊版本，之後又瘋狂按ctrl Z</li>
<li>產生超多個版本檔案，導致很畫面雜亂    </li>
</ul>
<p>4 年間，我曾經遇過好幾位同學跟我說<br>「為什麼硬碟容量又爆了呢 ?」  </p>
<p>其實繪圖軟體的檔案容量也是不容小覷<br>一堆 Final 丟桌面，也沒定時清理磁碟暫存<br>休怪程式丟給你 :<br>    「安安，這裡裝不下我了，跟你 saygoodbye 了」 </p>
<p>既然一直 copy paste ，都只是同個檔案上的小變更  </p>
<blockquote>
<p>可不可以像多線存檔一樣<br>在不同時刻存個檔呢?  </p>
</blockquote>
<p>彼時我還不知道 git 怎麼用…</p>
<h2 id="手動式的版本控制"><a href="#手動式的版本控制" class="headerlink" title="手動式的版本控制"></a>手動式的版本控制</h2><p>發現問題之後，來看看之前是怎麼做的<br>這樣才知道用 git 有什麼幫助   </p>
<ul>
<li>個人<br>想要一個新變更又保留之前的舊檔案<br>會這麼操作：  <ol>
<li>複製 <code>01.txt</code></li>
<li>貼上 <code>01(copy).txt</code>，並更改名稱為 <code>02.txt</code></li>
<li>以此類推  </li>
</ol>
<blockquote>
<p>久而久之，檔案流水號編號下去  </p>
</blockquote>
</li>
<li>團隊<br>透過一包一包的傳送檔案  <ol>
<li>A同事把所有檔案共同打包成壓縮檔  </li>
<li>上傳到共同空間  </li>
<li>B 同事下載下來，覆蓋或者手動替換變更的地方  </li>
<li>以此類推</li>
</ol>
</li>
</ul>
<p>不管哪種，我們可以看到做法步驟變得蠻多的<br>尤其是團隊的處理，非常不俐落     </p>
<h2 id="為什麼要用到-Git"><a href="#為什麼要用到-Git" class="headerlink" title="為什麼要用到 Git ?"></a>為什麼要用到 Git ?</h2><p>從個人專案來觀察<br>或許使用手動更改版本號好像還好<del>(?)</del><br>常常也會忘記哪個才是真正要的<br><img data-src="https://pbs.twimg.com/media/DOLGOOoUMAA8RRj.jpg">  </p>
<p>但如果是團隊合作呢？<br>檔案在本地，但在遠端要同步時  </p>
<ul>
<li>誰才是正本呢？  </li>
<li>誰修改了檔案？  </li>
<li>修改前修改後長怎樣？  </li>
<li>臨時想修改，可不可以不要動到原本的檔案？  </li>
</ul>
<p>Git 就是幫我們解決這些問題<br>當然很多都是用在程式上<br>多屬文字上的變更<br>不過 PS、AI 等等設計軟體最近也有支援<br>感覺快到 <strong><code>凡是皆可Git</code></strong> 的境界了  </p>
<h2 id="認識Git"><a href="#認識Git" class="headerlink" title="認識Git"></a>認識Git</h2><p>Git 是一個版本控制的軟體<br>在 git 中，被儲存的是檔案的 <strong><code>狀態</code></strong><br>不是被建立新的地方或真的複製一個檔案來存放<br>網路上我看了看有不同的說法<br>個人覺得 <strong><code>狀態</code></strong> 我比較理解 XD<br>偷懶拿別人的圖 QQ<br><img data-src="https://zlargon.gitbooks.io/git-tutorial/content/file/status/git_file_status.jpg"><br>圖來自這個<a href="https://zlargon.gitbooks.io/git-tutorial/content/file/status.html">網頁</a>  </p>
<p>簡單來說 : </p>
<ul>
<li>加入版本追蹤 前後 (untracked)  <ul>
<li><code>新檔案</code>產生會在這，沒有加入追蹤的。</li>
<li>透過 <code>git add</code> 就會到 staged </li>
</ul>
</li>
<li>該版本修改 後  (staged)<ul>
<li>已經追蹤過的檔案，修改過後的會出現在這  </li>
<li>這裡等著被推往下一個版本  </li>
</ul>
</li>
<li>推往下一個版本   (commit) <ul>
<li>已經是最新的版本狀態</li>
</ul>
</li>
</ul>
<p>透過 <code>git status</code> 查看，介面上 git 會告訴你是什麼樣的狀態  </p>
<p>這個是我理解，如有誤，煩請在留言區指教  </p>
<h2 id="git常用指令"><a href="#git常用指令" class="headerlink" title="git常用指令"></a>git常用指令</h2><p>一些常用指令，當然指令是要實際看狀況而用<br>網路大神常在講 Git </p>
<blockquote>
<p>易學難精，有用到再去查就好  </p>
</blockquote>
<p>把握基本的指令，在工作上應該綽綽有餘了  </p>
<table>
<thead>
<tr>
<th>指令</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td><a href="#init">init</a></td>
<td>初始化。告訴這個專案加入git的版控功能</td>
</tr>
<tr>
<td><a href="#status">status</a></td>
<td>查看狀態。沒事有事可以點一下</td>
</tr>
<tr>
<td><a href="#add">add</a></td>
<td>加入版本控制的行列。新檔案一定要打一下</td>
</tr>
<tr>
<td><a href="#commit">commit</a></td>
<td>建立新的版本。</td>
</tr>
<tr>
<td><a href="#log">log</a></td>
<td>查看歷史紀錄。</td>
</tr>
<tr>
<td><a href="#checkout">checkout</a></td>
<td>查看指定的檔案版本狀態，或是切到該分支</td>
</tr>
<tr>
<td><a href="#branch">branch</a></td>
<td>開一個新分支</td>
</tr>
<tr>
<td>merge</td>
<td>把別的分支 <strong><code>合併進來</code></strong> 所在的分支</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="名詞解釋"><a href="#名詞解釋" class="headerlink" title="名詞解釋"></a>名詞解釋</h2><p>會遇到git相關的單詞，這邊由 git 麻瓜(我)來稍稍解釋   </p>
<h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><blockquote>
<p>a.k.a 不用理的邊緣人  </p>
</blockquote>
<p>  可以新增一個<code>.gitignore</code>檔案<br>  裡面可以放與專案相關性較低的資料。   </p>
<ul>
<li><strong><code>.gitignore</code></strong> 是一個文字檔</li>
<li>輸入想被忽略的檔案名稱  </li>
</ul>
<blockquote>
<p>看看ignore實際運作 :<br>  註 : <code>vi</code> 是進入 vim 編輯器  </p>
</blockquote>
  <figure class="video_container">
  <video controls="true" allowfullscreen="true" poster="">
    <source src="https://zxbleg.ch.files.1drv.com/y4pcK5d35Bg18fyUs7mGnIELhvWO2MmTFGJX65VNnd0KOUL7wEhZ7t5aLFIJgT4E55iGaKlTvc8APUqKmLuOg7XoR5y_clL2JBJ6jd26vz_9emSQSxlyvhT_m2jIyaxgSmXWY-7BGqQe-gG53lB4LIzylocCKxz57_JzO3-QCpka9qBoE5JZazennqxUpgqLZUimv-aa8LNfjumx25vxOW_H9wpLUGgU-pH9nTlfK_mQsg/ignore.webm?psid=1" type="video/webm">
  </video>
</figure>  

<blockquote>
<p>我在做什麼 :   </p>
<ol>
<li>新增一個檔案 <code>456.txt</code> <blockquote>
<p>這個檔案即將要拿來被忽略  </p>
</blockquote>
</li>
<li><code>status</code> 一下，被 git 列入 <code>Untracked</code> 行列   </li>
<li>新增一個 <code>.gitignore</code> 檔</li>
<li>打開 ignore 文字檔案中，加入想無視的 <code>456</code> <blockquote>
<p>跟 git 說 : 「不要理 456 啦」。</p>
</blockquote>
</li>
<li>又 <code>status</code> 一下，發現 <code>456</code> 不見了  </li>
</ol>
</blockquote>
<p>這就是被忽略的過程(泣)<br>想要通通忽略某種檔案<br>可以加入 <code>*.檔名</code> ，一次就通通忽略掉了。  </p>
<h3 id="branch-分支"><a href="#branch-分支" class="headerlink" title="branch (分支)"></a>branch (分支)</h3><blockquote>
<p>a.k.a 平行宇宙  </p>
</blockquote>
<p>  一般在新增版本號通常是<code>單支線</code><br>  透過 branch 可以在不影響原本版本的狀況<br>  多支線去開發其他功能<br>  最後在 merge 在一起成最後的公布版本 </p>
<ul>
<li>例子 :<br>假如 清單 APP 已經有    <ul>
<li>新增任務</li>
<li>刪除任務 等等功能</li>
</ul>
</li>
</ul>
<p>  但是我想加入 <code>日期</code> 與 <code>提醒</code> 功能<br>  那就會新開一個 branch 開發這些新功能<br>  在完成時，和原本穩定的清單 APP merge 起來 </p>
<ul>
<li>圖解 :<br><img data-src="https://chi01pap001files.storage.live.com/y4m0UdMQjFtoRYCvGBx9YvCgFCGujZ60DBR_LBjubAY_iNDvK5f-9pkgSCgzO9I8lTb8183venzbc5LGjSEJwaU5JbNvauYgIn5BGmXPRsME6dkAZxZXnA0quPROTtshUPLXX0qk2bkT39Cr46wMLxL8Xkhz0-xcYH_Q1_7PMcYGGa0m7mRS9YIp0AgNOwRmi37?width=660&height=372&cropmode=none">  </li>
</ul>
<p>要注意的一點是，**<code>New branch</code>** 並不是完全空的<br>像是 <code>複製</code> &gt; <code>貼上資料夾繼續動作</code><br>New branch 出去的，是上一個版本的狀態延續</p>
<blockquote>
<p>練習操作 : </p>
</blockquote>
  <figure class="video_container">
  <video controls="true" allowfullscreen="true" poster="">
    <source src="https://licczq.ch.files.1drv.com/y4pdYb64sLm5R__suIWW6WYGTVIYRP17RAxfr8CHfDVoICyNokREw2wJkRH8knYqyfO2zZ07FcSAzFONymigmmdoWRaXEGy-84aOFOLJeUxg7pTi7xRJbL2gG_XfRBzkCY-VbUnkXmA-9ylARw0fsbfK30A_FiJaNqAVIbLJ7c8mYnvC_IBy2ZbfTVLlWer-FHbPYqS-zyaonuxdtUezjeebnU-BQ-biKOn-fxtIFf36AY/Screen%20Recording%20-%20Made%20with%20RecordCast.webm?psid=1" type="video/webm">
  </video>
</figure>  
  
<p>  旁邊是小抄 XD，我怕思考拖長影片了<br>  預先想好指令運作</p>
<blockquote>
<p>我在做什麼 :   </p>
<ol>
<li>用 <code>git branch -v</code> 來查看現在有多少分支<blockquote>
<p>一開始只有master </p>
</blockquote>
</li>
<li>用 <code>git log</code> 來知道 master 的版本狀態<blockquote>
<p>先前 commit 了一次，有一個紀錄   </p>
</blockquote>
</li>
<li>接著我新增了一個檔案 <code>456.txt</code>  </li>
<li>新增了一個 branch 叫 <code>Newfeature</code>  </li>
<li><code>git checkout Newfeature</code> 切換到這個分支底下操作</li>
<li>查看 Newfeature 的 <code>log</code>  <blockquote>
<p>這邊可以知道是把 master 的版本套過來<br> commit 記錄依然保留  </p>
</blockquote>
</li>
<li><code>git add 456.txt</code> 加入控制行列 </li>
<li><code>git commit -m &quot;456&quot;</code> 紀錄訊息456這個更新  </li>
<li>接下來是看 branch 之間的差異  </li>
</ol>
</blockquote>
<ul>
<li>注意 : 新檔案要<code>add</code>哦，不然不能 commit<br>到這邊還沒 marge 哦哦!   </li>
</ul>
<h3 id="conflict-衝突"><a href="#conflict-衝突" class="headerlink" title="conflict (衝突)"></a>conflict (衝突)</h3><blockquote>
<p>a.k.a 來決定最後存活者    </p>
</blockquote>
<ul>
<li><p>為何有衝突？</p>
<blockquote>
<p>合作時，如果 A、B 改了同一份文件<br>  涵蓋的範圍又一樣的時候<br>  回傳時，電腦要判定誰是正確的？</p>
</blockquote>
<p>  這時候我們必須 <strong><code>手動</code></strong> 去解決衝突<br>  Git 會告訴你 : 「哦!這裡有一個衝突!」<br>  這時候把檔案打開解決就行了  </p>
</li>
<li><p>圖解<br><img data-src="https://chi01pap001files.storage.live.com/y4m9Da_EJ6sKwLc097hF5pHF5m7tZkXD55mMJ4G7lFeQg4tRCXamb4Q8oO25f2KLV1zCCIejRWwdABSJNZhNA2N5KZBpIPUaZfzDv-ICw7xuAZr6SnfBGE2sG0nLcpbp0SPR7YSXH3G8r5w-Ob3ZBoVGrz8Lzi-3KpTAt6y-cdHTGHL0cn9R1laBXLTOqM8GXkm?width=660&height=372&cropmode=none"></p>
</li>
</ul>
<blockquote>
<p>練習操作 : </p>
</blockquote>
<p>  老實說我也沒遇過衝突，這是小小的範例而已  </p>
  <figure class="video_container">
  <video controls="true" allowfullscreen="true" poster="">
    <source src="https://zxbleg.ch.files.1drv.com/y4pLco_Ji8QyZ8Y0L_CI1_LEj6VX4T0lgGx8WZPxX5ThUSkcuCrOKYsboPTQkDfDPv7DVmpR8OnY_wAgPD72Obmk-KdlqOl3tF6KxnSiROxKlEfl4PFwNbI1tOFlqDS1IoNOBKmRoU6cLdrOkE7fojQB7F23MRxJ6hMVuf50IbHM3SkAxWNaoiMWqlq423_3V3Tm0TWRUjWxUl2ySXqG2dQBkl3wOe_aqgMOaHjy9eWuBg/conflict.webm?psid=1" type="video/webm">
  </video>
</figure> 
    
<p>可以發現我在兩個 branch 同時都改動了 第二行<br>在 merge 時，git 顯示這邊有 <code>conflict</code><br>把衝突的檔案打開來修正就OK囉!<br>另外我們可以發現其實 commit 出去的都還在<br>還多一個 merge 處理 conflict 的 commit 。  </p>
<h2 id="Git-指令應用"><a href="#Git-指令應用" class="headerlink" title="Git 指令應用"></a>Git 指令應用</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><ul>
<li>你要使用 git 的功能，對著要版本控制的資料夾  <ul>
<li><code>git init</code>  </li>
</ul>
</li>
</ul>
<p>目錄下會新增一個叫 <code>.git</code> 的資料夾<br>代表你要開始版本控制囉！<br>.git 裡有很多設定，這邊就先不談了 </p>
<h3 id="status"><a href="#status" class="headerlink" title="status"></a>status</h3><ul>
<li>當你想知道檔案的狀態，就可以輸入一下  <ul>
<li> <code>git status</code>  </li>
</ul>
</li>
</ul>
<p>git 會告訴你需不需要 add ，哪些 modify 了。  </p>
<h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><ol>
<li>加入檔案至 <strong><code>tracked</code></strong> 狀態<ul>
<li><code>git add [檔案名稱]</code> </li>
</ul>
</li>
<li>加入所有檔案(好用)  <ul>
<li><code>git add .</code> </li>
</ul>
</li>
</ol>
<ul>
<li><input checked="" disabled="" type="checkbox"> 記住，加入版本控制，新檔案必須先 <code>add</code> 再 <code>commit</code></li>
</ul>
<h3 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h3><ol>
<li>新增檔案版本，把檔案推到 <strong><code>Staged</code></strong> 狀態<ul>
<li><code>git commit -m &quot;訊息&quot;</code><br><code>-m</code> 是 message ，後面接你想打的紀錄訊息  </li>
</ul>
</li>
<li>一次新增(好用)<ul>
<li><code>git commit -am &quot;訊息&quot;</code><br> <code>a</code> 是 ALL 的意思  </li>
</ul>
</li>
<li>改變 commit 出去的訊息  <ul>
<li><code>git commit --amend</code><br>通常改最後 commit 的那個 </li>
</ul>
</li>
<li>後悔 commit 想刪掉或更改<br> 有三個方法，但各自的代表不同意思<ul>
<li><code>git reset Head^ --[不同模式] </code> <blockquote>
<p>HEAD 指向現在所在的版本<br>^ 是指上一個；上上個是 <code>~</code> 波浪號   </p>
</blockquote>
</li>
</ul>
</li>
</ol>
<ul>
<li>mixed<br>  預設模式。刪掉上一個 commit 與 add<br>  **<code>但保留修改的內容</code>**。    <ul>
<li>退回 <code>add</code> 與 <code>commit</code>的狀態<br>版本的內容一樣是新版的</li>
</ul>
</li>
<li>soft<br>  回到 commit 前，但版本的內容一樣是新版的  <ul>
<li>退回已經 <code>add</code> 但<code>尚未 commit </code>的狀態<br>這邊會看到檔案標示 <code>modified</code> </li>
</ul>
</li>
<li>hard<br>  版本跟上一版一樣，新版的修改就沒有保留了。  <ul>
<li>退回 commit、add 與 modified 的狀態<br>完全回到上一個版本 </li>
</ul>
</li>
</ul>
<p>有點霧沙沙 XD<br>可以參考 <a href="https://ithelp.ithome.com.tw/articles/10187303">這篇文章</a>  </p>
<h3 id="log"><a href="#log" class="headerlink" title="log"></a>log</h3><ul>
<li>你到底 commit 了什麼，來看一下詳細的歷史紀錄  <ul>
<li><code>git log</code>  </li>
<li>想要離開 log ，就輸入 <code>q</code> 代表 quit。  </li>
</ul>
</li>
<li>顯示更精簡的內容  <ul>
<li><code>git log --oneline</code>  </li>
</ul>
</li>
</ul>
<p>這就是歷史紀錄<br><img data-src="https://chi01pap001files.storage.live.com/y4mxhyPRSBSJ0DtpgC6pOq09kdav9fsPm3WfcjzKSj8geWtNRX-gR6Br7WliZ1aWMeFI7I2qp2BV0FreSN1AARa8gJgMMLRtowBzA14TESysuilfRhqIzI-f68bbLWGnmS1HOt4F8x4ECIlVSA6MjxnG-POOI3CiB_KewZC0OaZGHIDySbUc8VZymK5uE108gux?width=660&height=456&cropmode=none">  </p>
<blockquote>
<p>解析 :   </p>
</blockquote>
<ol>
<li>commit 後面有一串自動產生的亂碼<br>代表版本號，每一個版本都有獨特對應的字串<br>這樣也不會出現重疊的情形<br>想查詢該版本的內容，可以複製字串 <code>checkout</code> 一下  </li>
<li><code>Author</code> 可以看見是誰建立了這個版本  </li>
<li><code>Date</code> 建立的時間 </li>
<li><code>(HEAD -&gt; master)</code> 指目前所在分支、目前的版本   </li>
</ol>
<h3 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h3><ol>
<li>查看某個版本內容<ul>
<li><code>git checkout [版本號]</code></li>
</ul>
</li>
</ol>
<ul>
<li>看看版本運作  <figure class="video_container">
<video controls="true" allowfullscreen="true" poster="">
<source src="https://zxbleg.ch.files.1drv.com/y4pkzvhn1h7ZuS5j0vNxDkzGaM-oHG7DxjPInp-KNn7m89w_1hrhVr57OMoHxNDfn-nPvk8Q4rpT8cWgQlN6bkPFMXGXmEnZCFvOotKL9zNhSSlmtbEH-qgfxuZL00dDOgpeKf6E1FEX5Y2qidEcQJrfOjf405CSAc10XLgIM_wLICilUblq_IQsISmfUD-mr3wqd15AhTv2MiNaspONR3snvkGGJHdPC0mI5jWHaYclJE/checkoutOrder.webm?psid=1" type="video/mp4">
</video>
</figure> </li>
</ul>
<p>  是不是很奇異~<br>  到這邊就可以知道 git 有多好用了:D</p>
<ol start="2">
<li>切換到某某分支 <ul>
<li><code>git checkout [分支名]</code> </li>
</ul>
</li>
</ol>
<p>checkout 的用途蠻廣的。     </p>
<h3 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h3><ol>
<li>創建新分支<ul>
<li><code>git branch [新的分支名稱]</code></li>
</ul>
</li>
<li>刪除分支<ul>
<li><code>git branch -d [分支名]</code> </li>
</ul>
</li>
<li>改變分支名稱<ul>
<li><code>git branch -m [重新命名的分支名]</code>  </li>
</ul>
 <strong>要先到那個分支哦!</strong>  </li>
<li>抓遠端的 branch<br>比如遠端這邊有 branch 叫 <code>Newfeature</code><br>本地端沒有，透過 <ul>
<li><code>git checkout [你想要的branch]</code>  </li>
</ul>
</li>
</ol>
<p>就會自動有這個 branch 了。  </p>
<p>一般預設的會是 <code>master</code><br>其他 branch 是從主分支在延伸<br>回到現在最新版本 checkout 回去就行了  </p>
<h2 id="Git-與-Github"><a href="#Git-與-Github" class="headerlink" title="Git 與 Github"></a>Git 與 Github</h2><p>Git 跟 Github 兩個並不相同<br>前者是是版本控制的「軟體」<br>後者是平台    </p>
<ul>
<li><input checked="" disabled="" type="checkbox"> Github 一定要配 Git  </li>
<li><input disabled="" type="checkbox"> Git 一定要配 Github   </li>
</ul>
<p>大概是這樣的感覺<br>平台提供 Resposity (儲存庫)<br>透過 git push 來把資料同步上去<br>當然也可以把最新檔案 pull 下來</p>
<p>大家常聽到 Github ，此外也有其他類似的平台<br>像是 <code>Gitlab、Bitbucket</code><br>不管是哪個平台，在 Git 的操作是一樣的<br>所以你學會了 Git ，遊走江湖至少不會重練啦      </p>
<h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>這邊解釋一些常見的東西，以及與 git 相關的指令  </p>
<h3 id="repository"><a href="#repository" class="headerlink" title="repository"></a>repository</h3><p>又稱「<code>儲存庫</code>」，可以放檔案用<br>也可以用 <code>靜態網站</code> 的方式顯示專案結果<br>github 的 repository 有分 public 、 private  </p>
<ul>
<li>private 要錢，有的公司會購買來使用，畢竟專案不能亂公開  </li>
<li>public 一般大家都在使用，大家都看的到專案內容    </li>
</ul>
<h3 id="如何開始"><a href="#如何開始" class="headerlink" title="如何開始?"></a>如何開始?</h3><p>新建完 repository，頁面下面會有告訴你怎麼連接<br>通常我用第二個，將原有的檔案上傳上來<br><img data-src="https://chi01pap001files.storage.live.com/y4mKwQ_9Ir3-1Nas5uX9KqnYrlk8lp1g-Ms1T8f3_LHOrScO4NvLTpVAeY-n9gDVxTqvYzASVonAt0K1rIPsdCIcyk0ADYJGhdJYsLEnxfLsetdFgVh_uReUK_pVVWg4KcYQplpvjuF2LvUKszBI3O1roTxFD2ambTOKJ4IK15vU1_OFY9WSPI6OzE2ilfcoVJp?width=660&height=378&cropmode=none">  </p>
<p>在 GitBash 直接複製上去那幾行就行了~</p>
<h3 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h3><ul>
<li>目前本地沒有檔案，想下載遠端的資料<br>在 github ，按下這個綠綠的<br><img data-src="https://chi01pap001files.storage.live.com/y4mg80z42pM_kRWFRbweTgcM1_Ymn1ZniDkb1V2m4lfkWBiprmR8zJU9PiQ1vvpSP8M5zqdmF4hWylJHhiAFtPiDCKF42BEbUWYlVvqbH2oFPaqjSGFAM1kdVkPkOa2G1WJd2yss4jTfxliwxG1IkPjktJLLzM-dGSCFj4sHbHM2AOan59kGo3CEXo-HnEZ73xb?width=256&height=38&cropmode=none"><br>會有不同的方式，通常有 <code>https</code> 跟 <code>ssh</code><br>看自己想用哪個。       <ul>
<li> <code>git clone [github給的路徑]</code>  </li>
</ul>
在目錄底下就會看見檔案了  </li>
</ul>
<h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><ul>
<li>把 <strong><code>本地</code></strong> 的資料同步到 repository 裡  <ul>
<li><code>git push origin [分支名]</code>   </li>
</ul>
* <code>origin</code> 通常在 clone 時會自動幫你建立。<br>指向的地方就是 <code>伺服器</code> 那端。  </li>
</ul>
<p>稍微查了一下，原來這個原樣貌長這樣<br><code>git push origin [本地分支名]:[在那端新建立的分支名]</code><br>翻譯機 :<br>上傳 branch 至伺服器 (origin) 後建立新的 branch 儲存。<br>我這個麻瓜非常需要翻譯機 QQ。</p>
<h3 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h3><ul>
<li>已經有遠端的資料，但本地不是最新的<br>所以把遠端的 <code>repository</code> 同步到自己的資料<ul>
<li><code>git pull origin [遠端的分支]</code>  </li>
</ul>
</li>
</ul>
<h3 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h3><p>把 <code>A repository</code> 複製到 <code>B repository</code><br>可以 fork 別人的專案，再來修改<br>也可以 pull resquest 去詢問原專案作者是否要 merge<br><img data-src="https://chi01pap001files.storage.live.com/y4m06-A5i7dDD3CNkWRriRtSmcLbOKtnGgip0Po34L7zWkdMs51ciCFISJglLCfB4I8m_XwtsvkoHDPKWeA3KlkQBSjGh84iLD8Ks6HNuxOVIBm7uta4SW_3x3J16PjyiiLFlPYX4U_qvab0ODWu2WjwesV8xfTPY7u8fDoia6hNuSa8uxObNLJbo4accwWgRS6?width=660&height=364&cropmode=none">  </p>
<h3 id="pull-resquest"><a href="#pull-resquest" class="headerlink" title="pull resquest"></a><strong>pull resquest</strong></h3><p>umm… 因為我也還沒用到，也有點模糊    </p>
<p>意思是請求合併，在開源的專案會互相貢獻很常見<br>github 上可以看見很多專案有不少的 resquest<br>如果我們想要貢獻，可以發 <code>pull resquest</code><br>專案的擁有者會收到請求，作者可以決定要不要 merge</p>
<p>如果是所屬的同一個團隊，發出 resquest<br>可以讓團隊裡的其他人一起討論<br>確定後再 <code>merge</code>  </p>
<p>常常看到 <code>PR</code> 這個字，現在稍微理解一點了 XD<br>可以閱讀 <a href="https://github.com/twtrubiks/Git-Tutorials/tree/master/pr-tutorial#github-pr-pull-request-%E6%95%99%E5%AD%B8">這篇文章</a> 詳細了解   </p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>經過學習後再到 <a href="https://learngitbranching.js.org/?locale=zh_TW">這個網站</a> 使用模擬<br>就清楚多了<br>git 雖然知道怎麼用<br>實戰上還是有使用到才比較了解<br>不過個人專案懂指令後也是超方便的 XD </p>
<p>這次資訊算蠻多的<br>不過現在學到的都只是冰山一角<br>路還長(ㄔㄤˊ)著咧 QQ<br>為自己加油 !</p>
<blockquote>
<p><strong>補充資料</strong> :   </p>
<ol>
<li><a href="https://www.slideshare.net/pokaichang72/git-42427674">很棒的簡報</a>    </li>
<li><a href="https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1?fbclid=IwAR2qlaZYCG1mXsdy2aoUYvtHJN8UtG7VCFI-LZ7P81Z1eQghflKVpoXJI6I">很酷的圖解 git</a>  </li>
<li> <a href="https://gitbook.tw/interview">git 常見問題</a></li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>program</category>
      </categories>
      <tags>
        <tag>CommandLine</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - 宣告提升(II) - 跟著 JavaScript 引擎發動</title>
    <url>/Frontend/JavaScript/JavaScript-Hoisting-II/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>從上一篇 <a href="https://meitung473.github.io/RosaBlog/Frontend/JavaScript/JavaScript-Hoisting/">⟬ 筆記 ⟭ JavaScript - 宣告提升(I) - 我以為的以為</a><br>知道有三種東西會做宣告提升<br>但是不太清楚如何運作<br>為了瞭解如何宣告提升之前<br>要問自己為什麼 <strong>需要</strong> 宣告提升？<br>如果沒有宣告提升，JavaScript 不能做到那些事？  </p>
<h2 id="如果沒有宣告提升-Hoisting-？"><a href="#如果沒有宣告提升-Hoisting-？" class="headerlink" title="如果沒有宣告提升 (Hoisting) ？"></a>如果沒有宣告提升 (Hoisting) ？</h2><ol>
<li>變數必須先宣告再使用 </li>
<li>函式必須先宣告再使用<br>在設計階段，會希望將預執行函式名先寫出來，再來補齊函式中間的運作，對於執行的脈絡會更加清晰，如果沒有宣告提升，必須先等完成函式再呼叫，版面上可能就會有凌亂。</li>
<li>函式做不到互相呼叫 <strong>(非常重要)</strong><br>A 要呼叫 B 時 ，B 根本還沒被創造  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">average</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> a<span class="token operator">+</span>b
<span class="token punctuation">&#125;</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//1.5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
 若沒有宣告提升，是不能執行的<br> 在 <code>average</code> 呼叫 <code>add</code> 時就會出錯  </li>
</ol>
<h2 id="JavaScript-的宣告提升怎麼運作？"><a href="#JavaScript-的宣告提升怎麼運作？" class="headerlink" title="JavaScript 的宣告提升怎麼運作？"></a>JavaScript 的宣告提升怎麼運作？</h2><p>了解宣告提升非常重要<br>接下來要了解如何運作？<br>可以來看看 ECMAScript 怎麼說 JavaScript 的運作方式    </p>
<blockquote>
<p>ECMAScript 是 JavaScript 的實作守則<br>可以先參考底層是如何被定義的  </p>
</blockquote>
<p>主要跟兩個東西有關連<br>一是執行環境 (Execution contexts)<br>二是作用域 (Scope)  </p>
<h2 id="執行環境-Execution-contexts"><a href="#執行環境-Execution-contexts" class="headerlink" title="執行環境 (Execution contexts)"></a>執行環境 (Execution contexts)</h2><p>Execution contexts 執行環境(以下簡稱 EC)<br>ECMA 的解釋是:  </p>
<blockquote>
<p>Evaluation of global code or code using the eval function (15.1.2.1) establishes and enters a new execution context. Every invocation of an ECMAScript code function (13.2.1) also establishes and enters a new execution context, even if a function is calling itself recursively.</p>
</blockquote>
<p>剛開始執行前也會生成 global 的 EC<br>每當呼叫函式時也會生成一個新的 EC  </p>
<p>所以 EC 有兩種  </p>
<ol>
<li><strong>Global Execution contexts</strong><br> 全域物件會在這邊產生<br> 產生的有包含最外層的宣告變數、函式、還有<code>this</code><br> 而 this 在不同的環境會有不同的值  <ul>
<li>在瀏覽器上，是 <code>window</code></li>
<li>在 node.js 上， 是一種 global 物件   </li>
</ul>
</li>
<li><strong>Function Execution contexts</strong><br> 呼叫 function 時形成，除了內部中宣告變數、函式會產生外，如果有參數的話，<strong>參數</strong> 也會被算進儲存物件中。<br> function 中的儲存物件叫 <strong>Arguments Object</strong>，function 執行完後都會消失。 <blockquote>
<p>閉包除外，閉包更像是回收的機制，雖然已經執行完畢，但是儲存的物件仍然存在且外部可以使用。   </p>
</blockquote>
</li>
</ol>
<p>EC 會層層堆疊 (Execution contexts stack)，最上層的是 <strong>正在執行</strong> 的函式，函式執行結束後就會被 pop 掉。</p>
<p>因為 JavaScript 是單線程(同步)，在執行時會一行行往下跑，跑完的 function 就會釋放記憶體空間。  </p>
<ul>
<li>堆疊 (EC stack)<br><img data-src="https://i.imgur.com/cUWijRw.gif" alt="function 包 function EC 示意圖">  </li>
</ul>
<h3 id="EC-儲存的狀態物件"><a href="#EC-儲存的狀態物件" class="headerlink" title="EC 儲存的狀態物件"></a>EC 儲存的狀態物件</h3><p>上面不斷提到儲存物件，到底是存在哪裡？<br>又存了什麼？   </p>
<p>EC 會包含三種的狀態物件  </p>
<ol>
<li><code>Lexical Environment</code> (詞語環境): 在 <strong>創造</strong> 階段就已經宣告的變數或函式陳述式所存放的環境，看的是程式碼的物理位置。</li>
<li><code>Variable Environment</code> (變量環境): 跟 Lexical Environment 很像，已經宣告的變數或函式陳述式在 <strong>執行</strong> 階段所存放的環境，這個環境跟實際在執行程式的物理位置也有關係。</li>
<li>ThisBinding : <code>this</code> 關鍵字。   </li>
</ol>
<p>ECMAScript 新版的定義更不一樣 @@ ，這邊先已 ECMAScript 262 5.1 為主。  </p>
<p>可以注意到 </p>
<blockquote>
<p>The LexicalEnvironment and VariableEnvironment components of an execution context are always Lexical Environments.<br>When an execution context is created its LexicalEnvironment and VariableEnvironment components initially have the same value.</p>
</blockquote>
<p>在最初還沒跑程式碼的時候這兩個是一樣的， <code>Lexical Environment = Variable Environment</code><br>這邊其實我有點搞混了，既然是一樣的，那複製母體是誰 ?<br><a href="http://dmitrysoshnikov.com/ecmascript/es5-chapter-3-2-lexical-environments-ecmascript-implementation/#lexical-environment">這篇文章</a> 給了很好的解釋  </p>
<blockquote>
<p>Variable Environment 是 Lexical Environment 的複製藍圖。<br>這也會解釋到 Scope Chain 的原理</p>
</blockquote>
<h3 id="Lexical-Environments"><a href="#Lexical-Environments" class="headerlink" title="Lexical Environments"></a>Lexical Environments</h3><p><code>10.2 Lexical Environments</code>  </p>
<blockquote>
<p>A Lexical Environment consists of an <code>Environment Record</code> and a possibly null reference to an outer Lexical Environment.     </p>
</blockquote>
<p>這段可以知道完整的 Lexical Environments 其實還有一個外部參考環境。<br>這個外部環境，其實跟 scope 很有關係，後面會提到為什麼有 <code>scope chain</code> 的概念，正是因為還有外部參考環境，在內部找不到的值，可以往外部尋找。  </p>
<p>根據這段可以來看 <strong>外部參考環境</strong> 的定義  </p>
<blockquote>
<p>The outer environment reference is used to model the logical nesting of Lexical Environment values. The outer reference of a (inner) Lexical Environment is a reference to the Lexical Environment that logically surrounds the inner Lexical Environment.</p>
</blockquote>
<p>簡單來說外部參考 (reference) 是 Lexical Environment 指向的鄰近的 Lexical Environment。<br>對 global 來說是最外層，所以是外部參考環境是 <code>null</code>。   </p>
<p>再說一次 Lexical Environment 指的是程式碼物理的位置。<code>這邊的外部參考環境跟函式在哪裡呼叫無關，跟程式碼放在哪裡關。</code></p>
<p>往下繼續看…</p>
<blockquote>
<p>An <code>Environment Record</code> records the identifier bindings that are created within the <code>scope</code> of its associated Lexical Environment.</p>
</blockquote>
<p>從這邊可以知道 Scope 是包含 Environment Record 紀錄宣告的綁定的值，而且跟 Lexical Environments 有相關。<br>(恕我的破破英文翻譯)    </p>
<p>不過這個 <code>Environment Record</code> 是什麼咧？ </p>
<h3 id="Environment-Records"><a href="#Environment-Records" class="headerlink" title="Environment Records"></a>Environment Records</h3><p><code>10.2.1 Environment Records</code>  </p>
<blockquote>
<p>For specification purposes Environment Record values can be thought of as existing in a simple object-oriented hierarchy where Environment Record is an abstract class with two concrete subclasses, <code>declarative environment record</code> and <code>object environment record</code>. </p>
</blockquote>
<p>在 ECMAScript 262 5.1 是叫  <code>Environment Record</code> 可以想像成一般的 object，會記錄不同類型的變數以及函式<br>。<br><code>declarative environment record</code> 是宣告環境紀錄來仔細看一下包含哪些東西。</p>
<h3 id="Declarative-Environment-Records"><a href="#Declarative-Environment-Records" class="headerlink" title="Declarative Environment Records"></a>Declarative Environment Records</h3><p><code>10.2.1.1 Declarative Environment Records</code></p>
<blockquote>
<p>Each declarative environment record is associated with an ECMAScript program scope containing variable and/or function declarations. A declarative environment record binds the set of identifiers defined by the declarations contained within its <code>scope</code>.  </p>
</blockquote>
<p>在定義的部分，scope 跟 Declarative Environment Records 紀錄的變數以及函式陳述式有關。<br>我們把關係一層層剝開，發現 scope 指的是 EC 中的環境紀錄宣告變數與函式的總和範圍。</p>
<p>我試著描出上面說的架構  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">.</span><span class="token constant">EC</span><span class="token punctuation">&#123;</span>
	Lexical Environments<span class="token operator">:</span><span class="token punctuation">&#123;</span>
		Environment Records
	<span class="token punctuation">&#125;</span>
	<span class="token punctuation">[</span><span class="token punctuation">[</span>ref<span class="token punctuation">.</span>outerEnv<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
		surroundEC<span class="token punctuation">.</span>Lexical Environments<span class="token operator">:</span><span class="token punctuation">&#123;</span>
			Environment Records
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	Variable Environment<span class="token operator">:</span><span class="token punctuation">&#123;</span>
		Environment Records
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>不過新版已經不再是以 Lexical Environments 來說明，而是 Environment Records。(這有待專研 @@)    </p>
<h2 id="作用域-Scope"><a href="#作用域-Scope" class="headerlink" title="作用域 (Scope)"></a>作用域 (Scope)</h2><p>作用域 (Scope) 也就是 <strong>變數生存的範圍</strong><br>外部的不能取內部的值，內部可以取外部的值<br>會依循作用域鏈 (Scope Chain) 一層層往上找 </p>
<p>Scope 有兩種</p>
<ol>
<li>Global Level Scope : 全域作用域<br>這邊的值在哪裡都可以存取，也是最外層的。</li>
<li>Local Level Scope : 區域作用域<ol>
<li>Function Level Scope<br><code>var</code> 的變數生存範圍就是以 function 為限，如果在 function 以外來取得在 function 宣告的 var 變數，會錯誤。</li>
<li>Block Level Scope<br> 在 ES6 中，<code>let</code> 跟 <code>const</code><br> 的生存範圍是以 <code>&#123; &#125;</code>為限，也就是大括號括起來的 block，脫離 block 要取得值就會失敗。  </li>
</ol>
</li>
</ol>
<p>這邊先不討論 let 跟 const。<br>回到 scope chain 上，我們知道跟 <code>外部參考環境</code> 有關，上面有提到 <code>外部參考環境</code> 其實就是鄰近的 Lexical Environment。  </p>
<p>綜合上面的概念， 在 function 中的外部環境 Lexical Environment 又是從<br>Variable Environment 複製過來的，所以 function 呼叫時的 scope 其實就是來自正在上一層 EC 傳入的 Variable Environment  </p>
<p>在 <code>13 Function Definition</code> 這個定義中可以找到結果    </p>
<blockquote>
<p>Return the result of creating a new Function object as specified in 13.2 with parameters specified by FormalParameterListopt, and body specified by FunctionBody. <code>Pass in the VariableEnvironment of the running execution context as the Scope.</code> Pass in true as the Strict flag if the FunctionDeclaration is contained in strict code or if its FunctionBody is strict code.</p>
</blockquote>
<p>講起來真的蠻抽象的，來看看例子。</p>
<h3 id="範例一"><a href="#範例一" class="headerlink" title="範例一"></a>範例一</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//2.</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> c<span class="token operator">=</span><span class="token number">2</span>
	<span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//3.</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//1.</span>
<span class="token keyword">var</span> c<span class="token operator">=</span><span class="token number">3</span>
<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>答案是多少呢？</p>
<p>答案是 </p>
<ol>
<li><code>undefined</code></li>
<li>3</li>
<li>2</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">b<span class="token punctuation">.</span><span class="token constant">EC</span><span class="token punctuation">&#123;</span>
	Lexical Environments<span class="token operator">:</span><span class="token punctuation">&#123;</span>
		Environment Records<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token punctuation">[</span><span class="token punctuation">[</span>ref<span class="token punctuation">.</span>outerEnv<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		global<span class="token punctuation">.</span><span class="token constant">EC</span><span class="token punctuation">.</span>Variable Environment
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	Variable Environment<span class="token operator">:</span><span class="token punctuation">&#123;</span>
		Environment Records<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
a<span class="token punctuation">.</span><span class="token constant">EC</span><span class="token punctuation">&#123;</span>
	Lexical Environments<span class="token operator">:</span><span class="token punctuation">&#123;</span>
		Environment Records<span class="token operator">:</span>
		<span class="token punctuation">&#123;</span>
			c<span class="token operator">:</span> <span class="token keyword">undefined</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token punctuation">[</span><span class="token punctuation">[</span>ref<span class="token punctuation">.</span>outerEnv<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		global<span class="token punctuation">.</span><span class="token constant">EC</span><span class="token punctuation">.</span>Variable Environment
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	Variable Environment<span class="token operator">:</span><span class="token punctuation">&#123;</span>
		Environment Records<span class="token operator">:</span>
		<span class="token punctuation">&#123;</span>
			c <span class="token operator">:</span> <span class="token number">2</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
global<span class="token punctuation">.</span><span class="token constant">EC</span><span class="token punctuation">&#123;</span>
	Lexical Environments<span class="token operator">:</span><span class="token punctuation">&#123;</span>
		Environment Records<span class="token operator">:</span>
		<span class="token punctuation">&#123;</span>
			b <span class="token operator">:</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			a <span class="token operator">:</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			c <span class="token operator">:</span> <span class="token keyword">undefined</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token punctuation">[</span><span class="token punctuation">[</span>ref<span class="token punctuation">.</span>outerEnv<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	Variable Environment<span class="token operator">:</span><span class="token punctuation">&#123;</span>
		Environment Records<span class="token operator">:</span>
		<span class="token punctuation">&#123;</span>
			c <span class="token operator">:</span> <span class="token number">3</span> 
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>第一個 console 是 <code>undefined</code>，因為 global EC 建立時，環境 (Lexical Environments) 將變數、函式陳述式的宣告先存放起來，會長這樣   </p>
<ol>
<li>b : func()</li>
<li>a : func()</li>
<li>c : undefined  </li>
</ol>
<p>Variable Environment 跟 Lexical Environments 還沒執行時是一樣的，執行後 Variable Environment 就會有變化。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">global<span class="token punctuation">.</span><span class="token constant">EC</span><span class="token punctuation">&#123;</span>
	Lexical Environments<span class="token operator">:</span><span class="token punctuation">&#123;</span>
		Environment Records<span class="token operator">:</span>
		<span class="token punctuation">&#123;</span>
			b <span class="token operator">:</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			a <span class="token operator">:</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			c <span class="token operator">:</span> <span class="token keyword">undefined</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token punctuation">[</span><span class="token punctuation">[</span>ref<span class="token punctuation">.</span>outerEnv<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	Variable Environment<span class="token operator">:</span><span class="token punctuation">&#123;</span>
		Environment Records<span class="token operator">:</span>
		<span class="token punctuation">&#123;</span>
			b <span class="token operator">:</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			a <span class="token operator">:</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			c <span class="token operator">:</span> <span class="token number">3</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>當 <code>var c =3</code>，Variable Environment 中的 c 才會賦值 3。  </p>
<p>可以看到 b 即使在 a 函式中被呼叫，b 的外部參考環境其實是 global，因為這跟 Lexical Environment 有關。</p>
<h3 id="範例二"><a href="#範例二" class="headerlink" title="範例二"></a>範例二</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> c<span class="token operator">=</span><span class="token number">2</span>
	<span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//2.</span>
		c <span class="token operator">=</span> <span class="token number">3</span>
	<span class="token punctuation">&#125;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//3.</span>
<span class="token punctuation">&#125;</span>
<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//1.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>答案是   </p>
<ol>
<li><code>c is not defined</code></li>
<li>2</li>
<li>3</li>
</ol>
<p>a 的外部參考環境 是 global。<br>b 的外部參考環境是 a + global，因此 c 是 a 函式中的變數，而<code>c=3</code>，沒有重新宣告下，b 函式找不到 c，所以是找 a 函式中的 c，並改變成 <code>c=3</code>。</p>
<p>如果把 b 函式中的 c =3 ，改為 <code>var c=3</code>，答案會變為  </p>
<ol>
<li><code>c is not defined</code></li>
<li><code>undefined</code></li>
<li>2  </li>
</ol>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><ol>
<li>Exection Context : 執行上下文，會形成 Exection Context Stack，最下層是 global，呼叫到 function 就會再往上疊加 EC</li>
<li>Lexical Environment : <strong>創造</strong> 階段儲存的環境</li>
<li>Variable Environment : <strong>執行</strong> 階段儲存的環境</li>
<li>Environment Records : 像是一個物件，儲存宣告的變數、函式陳述式，以及函式中的參數。</li>
<li>Scope : 作用域，變數生存的範圍。</li>
<li>Scope Chain : 作用域鏈，由 EC 的 Lexical Environment，以及其外部的 Lexical Environment 組成，其外部的 Lexical Environment 就是上一層 EC 的 Variable Environment 複製過來的。</li>
</ol>
<h2 id="超級比一比"><a href="#超級比一比" class="headerlink" title="超級比一比"></a>超級比一比</h2><p>了解 Scope 後，就要來了解如果有相同名稱的三個變數，Javascript 會如何來判斷順序，像是 function a、變數 a、參數 a ，三個都同名，那誰會被蓋掉誰呢 ?<br>重複的宣告又會怎麼處理呢 ?<br>可以根據 <a href="https://262.ecma-international.org/5.1/#sec-10.5">10.5 Declaration Binding Instantiation</a> 規則來看</p>
<blockquote>
<p>10.5.4 在呼叫的 function 裡面  </p>
</blockquote>
<ol>
<li>如果有同名的 function、參數、變數，function 會先被儲存</li>
<li>如果內部有同名的參數與變數<ol>
<li>引數的數量 &gt; 1，內部變數初始值會變成 undefined，變數如果有重新賦值，可能會是第 n 個參數的值</li>
<li>如果有傳入引數，那麼傳入的引數就是函式的參數初始值</li>
<li>如果沒有傳入引數，但有參數，參數的初始值是 undefined，再依照內部執行程式碼賦值</li>
</ol>
</li>
</ol>
<blockquote>
<p>10.5.5 函式陳述式    </p>
</blockquote>
<p>a~d : 如果有函式被重複宣告，以後面新宣告的函式為主</p>
<p>e : 在 global 會是全域的物件<br>   宣告變數跟宣告的函式名同名，如果變數宣告了但沒賦值，同名的就會是先儲存 function 物件</p>
<p>我寫大概的意思而已，文件上定義的很明確。  </p>
<blockquote>
<p>10.5.8 宣告或未宣告的變數</p>
</blockquote>
<ol>
<li>已宣告的變數，後面重複宣告都已第一個為宣告主 (dn -&gt; d)</li>
<li>已宣告且賦值的話，重複宣告又賦值以後面的值為主 (值 = dn)</li>
<li>未宣告變數  <ol>
<li>往上找 Scope Chain 有宣告的變數，新賦值為主</li>
<li>如果往上找 Scope Chain 沒有宣告的變數，就會直接報錯</li>
</ol>
</li>
</ol>
<p>這邊只列出幾個，原諒我破破的英文翻譯，大概是這樣<br>10.5 列出各種會碰到的情況，只是這邊有很多代名詞，要再往回看一下定義。</p>
<h2 id="狀況劇"><a href="#狀況劇" class="headerlink" title="狀況劇"></a>狀況劇</h2><p>雖然上面大約了解內部執行與儲存的狀況，試著來驗證常見的狀況是不是這樣</p>
<h3 id="重複宣告變數"><a href="#重複宣告變數" class="headerlink" title="重複宣告變數"></a>重複宣告變數</h3><p>先來個簡單的重複宣告的問題，有變數以及函式</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span><span class="token number">1</span>
<span class="token keyword">var</span> a
<span class="token keyword">var</span> a 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>結果應該要等於 1，不會是 undefined<br>根據 ECMA 寫的宣告有賦值的話，以 d 為主<br>執行一下是 <code>a=1</code></p>
<h3 id="重複宣告函式"><a href="#重複宣告函式" class="headerlink" title="重複宣告函式"></a>重複宣告函式</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi!'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hey!'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>結果應該要等於 hey!，不會是 hi!<br>函式重複宣告是以 fn 為主<br>執行一下是 <code>hey!</code>  </p>
<p>跟著引擎發動沒錯吧 :D<br>再來 !</p>
<h3 id="global-同名變數-v-s-function"><a href="#global-同名變數-v-s-function" class="headerlink" title="global 同名變數 v.s function"></a>global 同名變數 v.s function</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span><span class="token number">10</span>
<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以拆做兩個步驟，第一個是創造之前，因為 var a 一開始是 undefined，但是 a 會被優先儲存成 function 物件<br>直到執行階段，<code>a =10</code>，a 這個物件被賦值為數字 10，a 已經不是 function 物件，被呼叫時會報錯</p>
<p>但是如果是這個情況</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> a
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 這個結果</span>
<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>根據上面的步驟跟規則，結果會是 <code>[function a]</code>，印出 function 本身</p>
<h3 id="function-內同名-function-v-s-參數"><a href="#function-內同名-function-v-s-參數" class="headerlink" title="function 內同名 function v.s 參數"></a>function 內同名 function v.s 參數</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>根據規則， function 內部如果同名，宣告的 function 會先優先，所以結果是 <code>[function a]</code>，印出 function 本身</p>
<h3 id="function-內同名-變數-v-s-參數"><a href="#function-內同名-變數-v-s-參數" class="headerlink" title="function 內同名 變數 v.s 參數"></a>function 內同名 變數 v.s 參數</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> a
  a<span class="token operator">+=</span><span class="token number">2</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>正當你以為 <code>a = undefined 或是 NaN</code>，不，結果是 458 ，根據規則，參數有傳入引數就是該值，而且變數 a 已存在，所以 <code>var a</code> 並不會覆蓋，由此可知參數的順序比變數來的優先。  </p>
<p>如果沒有傳入參數呢 ?  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
  	a<span class="token operator">+=</span><span class="token number">2</span>
	<span class="token keyword">var</span> a
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>第一個是 undefined，來自參數 a 已宣告但是為賦值<br>第二個 a 是 <code>NaN</code>，是因為 undefined +2 ，本來就不是數字</p>
<blockquote>
<p>由此可知 function 內的提升順序，<strong>function &gt; 參數 &gt; 變數</strong><br>Global 的提升順序，<strong>function &gt; 變數</strong></p>
</blockquote>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>如果有誤歡迎告訴我，有時候寫到有點茫了…<br>整理的過程中也讓我更清楚知道，變數、參數、函式為什麼會宣告提升，以及怎麼被提升，基本上遇到該類型的題目保持一樣的邏輯跟引擎一起動就好 :D  </p>
<p>這篇尚未提及 ES6 的 let 跟 const 宣告提升問題，下一篇會做討論</p>
<hr>
<p>參考 :</p>
<ol>
<li><a href="https://262.ecma-international.org/5.1/#sec-10.3">ECMAScript 262.5.1</a>    </li>
<li><a href="https://www.udemy.com/course/javascriptjs/">JavaScript 全攻略：克服 JS 的奇怪部分</a></li>
<li><a href="http://dmitrysoshnikov.com/ecmascript/es5-chapter-3-2-lexical-environments-ecmascript-implementation/#structure-of-execution-context">dmitrysoshnikov ES5 關於 EC 的結構細節</a>  </li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>hoisting</tag>
      </tags>
  </entry>
  <entry>
    <title>⟬ 紀錄 ⟭ DIY 架站 - 安裝 LAMP Server + phpMyAdmin  並且部屬在 AWS EC2 主機</title>
    <url>/bookreport/lanch-website/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前端跟後端學點皮毛，想要自己架站看看，雖然有免費的 github pages 可以放靜態網站，但遇到資料庫就不支援了，php 檔放到 github pages 只能當純文字而已，於是自己使用虛擬主機跟買網域來架 :D  </p>
<p>這次是要安裝 LAMP Server + phpMyAdmin 在 Linux 系統上架站，主機是使用虛擬主機 (AWS EC2)， AWS 提供免費一年就來試試看，網域的話從 <a href="https://www.gandi.net/zh-Hant">Gandi</a> 購買一年份，我才知道域是有分級的，不同的網域價錢真的差很多…  </p>
<h2 id="設置"><a href="#設置" class="headerlink" title="設置"></a>設置</h2><p>主要都是參考這篇好文章 =&gt; <a href="https://github.com/Lidemy/mentor-program-2nd-yuchun33/issues/15">部署 AWS EC2 遠端主機 + Ubuntu LAMP 環境 + phpmyadmin)</a><br>接下來 Let’s GO !  </p>
<h3 id="設定-AWS-EC2"><a href="#設定-AWS-EC2" class="headerlink" title="設定 AWS EC2"></a>設定 AWS EC2</h3><p>註冊完 AWS 帳號，登入用 <code>Root user</code>(管理員)，設定上才不會有太多限制。  </p>
<p>不過官方還是建議創建 <code>IAM user</code>，在往後日常操作比較適合，我想應該是怕去動到原始設定，或者建議組織架構將權限分散。<br><img data-src="https://dsm01pap006files.storage.live.com/y4mf8DngFOVKM87YZaaJg_A14Y8pog_C_Hbotg4kAt2JPM7Svs7ebIjUWjdA1uAWlTtVLNnorxd1-1cm8zFbfGI1f45TOng_tiu6bTMQse6HJwXLFozcCQpRIjMq6wan9QCZ88bzbG8I1JGi4Zut53DOE_c-4HBS2P7V3l5Llz_N1EbSj4OUM1Wt9jI2rG1ZKJ2?width=980&height=632&cropmode=none" alt="登入"></p>
<p>登入後會有不同服務方案，選 <code>EC2</code><br><img data-src="https://dsm01pap006files.storage.live.com/y4m3ZaSFwn_k99MGTLJskQ0mT7J-RKzcHbNQKpa1BlyqoCstPIcYaOkZNQQ29SJWz1tb0h8vltystPhHyUjiZ9ivknXvFjFjF-MdMbev5fq0MhXgiQ_ZPEhaCUKsPx0UvTCCLFcIqP6fQHwLbqdSBcARYFZKwEFGs37gfajwp35J3dA_ztKa-6dvo_t_u8IG6Js?width=2730&height=1545&cropmode=none" alt="EC2"></p>
<h4 id="Step-1-選虛擬主機"><a href="#Step-1-選虛擬主機" class="headerlink" title="Step 1 : 選虛擬主機"></a>Step 1 : 選虛擬主機</h4><p>我選 <code>Ubuntu Server 18.04 LTS (HVM)</code><br><img data-src="https://dsm01pap006files.storage.live.com/y4mcZYCAzid00O2SXv3_F77FWOcJja7Yrr-fJgevek5LPWFdqxVB1UrYiJDAHCTZwbdjixL24xVXT2wfS2rGiATqDK5dQXmF32Qa4XmpNbEvQHSVllNU-5S607UqWGp7p3GCiNAI4q-HzLi8HWXx45eM4zB2FEkMp8sR6K7WqO-500kCnd09bty9azCLfLEoFAN?width=2735&height=1565&cropmode=none" alt="Ubuntu Server"></p>
<p>中間有好幾部可以略過，也可以自行更改，沒什麼要動可以直接跳到第六步   </p>
<p>第二步是選擇伺服器的類型，免費預設類型就很夠用了。<br><img data-src="https://dsm01pap006files.storage.live.com/y4mUj0tw8Hg-PkgDB91mcYYHevrZpgvbDAl0vJTVeaywND3vwSTuFq-it4bCHSciyhcRsrbYB6UDSovtMyNJ1G14cSpxQnndJI2Y6dCMRJcylEboTYH7X_3iFu6oLTRFnETRRzCh564HZh0DV4PAOprW5bB1YrsxLQOgMUYTWeoJ4-byY6PQCwwZowe6t4Vp5aI?width=2408&height=1376&cropmode=none" alt="選主機類型"><br>第三步是伺服器設定的細節<br>第四步是記憶體容量設定，預設是 8 GB<br>第五步是跟容量有關係的設定 (看不太懂…)  </p>
<h4 id="Step-2-第六步-Configure-Security-Group"><a href="#Step-2-第六步-Configure-Security-Group" class="headerlink" title="Step 2 : 第六步 Configure Security Group"></a>Step 2 : 第六步 Configure Security Group</h4><p>設定網路通道跟安全，只要先新增 HTTP 跟 HTTPS ，才能使用網頁連線，再按 <code>Review and Lanch</code>，最後一步是全面步驟的總和而已<br><img data-src="https://dsm01pap006files.storage.live.com/y4mq2kdMSDZmkJbh1bArHYZmR-YD8MfcpFkh-SI9D41krI7xiNPfeNEP0eZkpO6YwMIPgcLzm-BoaYfb-stJGi0Za-U54-_7GXYpvoixprGZ7kH1xzN3k6Fchw7xL5ZOrQpR6hZ3Xbc2JPdMc5BQnmRbup9I8tJd_2GaMizMnFA7aB33pQCh_a42lAzErvuKGhw?width=2735&height=1312&cropmode=none" alt="Configure Security Group"> </p>
<h4 id="Step-3-配對金鑰"><a href="#Step-3-配對金鑰" class="headerlink" title="Step 3 : 配對金鑰"></a>Step 3 : 配對金鑰</h4><p>因為要透過 SSH 連線，必須要有金鑰，<code>RSA</code> 是常見的非對稱加密法。  </p>
<p>下拉選單會有三個選項，第一次使用 <code>create</code>，下面是檔案名稱，會產生 <code>&lt;filename&gt;.pem</code> 的檔案，等等連線會用到<br><img data-src="https://dsm01pap006files.storage.live.com/y4mfUwE7kl8QCWfs1FyTwVLWGf0surxUO4Gy2ypz51DkRyidK1x_ba_y3UZoGKMoJRA5Btj3GE9e7Og5n2FC9Ui-0D3lR3Bz3oSv_O9EtAt2Ukakfi8WZJ1cMfAGlmOa36vlrHWuggCkGA2YAKa3Qg5yUplIvGWI4VfPe0Ff2r4Punh0Qqsr_DquNx2RSexPMq0?width=2408&height=1376&cropmode=none" alt="下載金鑰"></p>
<h4 id="Step-4-記下-IPv4"><a href="#Step-4-記下-IPv4" class="headerlink" title="Step 4 記下 IPv4"></a>Step 4 記下 IPv4</h4><p>回到 EC2 儀錶板，會有主機的狀態訊息，選擇剛剛開起來正在執行的<br><img data-src="https://dsm01pap006files.storage.live.com/y4m3ZJghMG-GmoRrtVNdLOp_xOr8AEQ35BhoCKrzSPbCyG7RYKKF_U6N-CrjkhcMNBvLk_3tzHP8-QaRveiWr-rxs7W6H1h4VD9tyRqN-k0NF_FIrkuOFNg9C4JSKwr9poJM29KLxXCqk2DjA-fctK0btph1HgC9UXcN3fpw63q_KtMvgWuHwqL5oL561k2sYx5?width=2408&height=1376&cropmode=none" alt="EC2 儀錶板"></p>
<p>點一下正在執行的個體，下面會有概要，記下公有 <code>IPv4</code><br><img data-src="https://dsm01pap006files.storage.live.com/y4mOjbTxzVsSeLt_jimxUFsqt6Q-P-TQ87TmsNKzunm3WEff2KXdhzavkrCFkBepOY33-vUTXsXT6S1nU9cQY2BJwpUxIy8l4FBJfEJM3n6fFOTD2lN5vAukmZJQ93i8bkte6EdZPGDCg3a0Y5oi3CDQNWAgA5VP12ckOVPuJF6vTmpuq1b8bYJHomOtS6Z191s?width=2408&height=1376&cropmode=none" alt="IPv4"></p>
<p>到這步就有一個只有作業系統的主機，接著再把環境給裝起來  </p>
<h3 id="設定-LAMP-環境"><a href="#設定-LAMP-環境" class="headerlink" title="設定 LAMP 環境"></a>設定 LAMP 環境</h3><ul>
<li><strong>L</strong>inux : 作業系統  </li>
<li><strong>A</strong>pache : 網頁伺服器  </li>
<li><strong>M</strong>ariDB or <strong>M</strong>ySQL : 資料庫  </li>
<li><strong>P</strong>HP : 可以編寫動態網頁的程式碼  </li>
</ul>
<h4 id="Step-5-連上虛擬-遠端-主機"><a href="#Step-5-連上虛擬-遠端-主機" class="headerlink" title="Step 5 連上虛擬(遠端)主機"></a>Step 5 連上虛擬(遠端)主機</h4><p>剛剛下載的金鑰，跟記下的 IPv4 派上用場<br>金鑰如果跟 cmd 目錄不同，記得加上相對路徑  </p>
<p>打開 cmd 輸入  </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -i <span class="token operator">&lt;</span>file.pem<span class="token operator">></span> ubuntu@<span class="token operator">&lt;</span>IPv<span class="token operator"><span class="token file-descriptor important">4</span>></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>例 : <code>ssh -i ~/Desktop/key.pem ubuntu@123.11.22.3</code><br>問 :  <code>Are you sure you want to continue  connecting (yes/no)?</code><br>答 : <code>y</code><br><img data-src="https://dsm01pap006files.storage.live.com/y4mn3vALzZNWp-Acn_mxNele8w-LVujJTvzr30apsQsRuUis-cs-UCn3AVE5gGcg3_GUIOmHRTHDufaHNwW93B5TWDwbpKGkM2fYkiDc4QFZL_NdhXERBpNXhnN758xE48g023o9Nvz_szUsqfsrVDL-7bKdd9AaSvYOwQy0DpWfPGNhMT2JUu3kLsqjhB3SRD4?width=1925&height=1142&cropmode=none" alt="登入遠端主機">  </p>
<p>前面變成主機位置就是登進去了  </p>
<h4 id="Step-6-系統更新"><a href="#Step-6-系統更新" class="headerlink" title="Step 6 : 系統更新"></a>Step 6 : 系統更新</h4><p>裝伺服器之前系統更新一下  </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> upgrade <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> dist-upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>問 : 是否繼續下載 ?<br>答 : y  </p>
<ul>
<li><strong>apt</strong> (Advanced Packaging Tool) : 套件管理器工具，可以做套件的查找、升級、安装、刪除，執行必須要有 <code>root</code> (超級管理員)的權限  </li>
</ul>
<p>所以這邊都會用 <code>sudo</code>  </p>
<h4 id="Step-7-好用的套件-tasksel"><a href="#Step-7-好用的套件-tasksel" class="headerlink" title="Step 7 : 好用的套件 tasksel"></a>Step 7 : 好用的套件 tasksel</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> tasksel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>tasksel 是已經幫你整理好成一組的工具，包含 LAMP 伺服器<br>輸入 <code>sudo tasksel</code> 看到的安裝介面，可以一次選好幾個，打包成一組安裝<br><img data-src="https://dsm01pap006files.storage.live.com/y4mnt-7tjSuj7EUF7qdsQXy43btYrwRq84uk4ZxfGJfFMHh5BpAArgfUZopHq6IngtePnB8s2RyVTG-49PJt1uiNbLdhDAud3GoVRmWhftui7LL3O4MqGb7cjizJEcS6M80Orrida7n0fFV0uVmjAFhPoeohQjw8ls3X_p6VY7iAO6VQvztquBnCuau_PVj2hoj?width=1905&height=1675&cropmode=none" alt="tasksel 安裝包"></p>
<h4 id="Step-7-安裝-LAMP-server"><a href="#Step-7-安裝-LAMP-server" class="headerlink" title="Step 7 : 安裝 LAMP server"></a>Step 7 : 安裝 LAMP server</h4><p>也可以直接打入指令直接安裝，不用再到介面選擇  </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> tasksel <span class="token function">install</span> lamp-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>會跳一下紫色視窗代表安裝，在網頁打上 IPv4 的網址，就會出現 apache 起始頁面代表成功<br><img data-src="https://dsm01pap006files.storage.live.com/y4mnfxBZr0dvNkHq_dKRmxzdzCheXNg77h9mjJd7jMRFfJPYslmw53w4REgiHf8lb3LXHLoY82NHDfCPj7Qp4CwWTzCPM2f8s0jWkVP1hDq8WrcpDke6BzM8eYGHNxXdc3RtHgtGJdBAUHBuT5y2Roulmu1yCL3BKI9n2D0xb-tQ5L-a5PH2v8rIkPPUTwb0hQ0?width=2679&height=1537&cropmode=none" alt="成功連上的畫面"></p>
<h3 id="設定-phpmyadmin"><a href="#設定-phpmyadmin" class="headerlink" title="設定 phpmyadmin"></a>設定 phpmyadmin</h3><p>phpmyadmin 是 mySQL 管理的介面軟體，不用下載軟體就可以在網頁連上資料庫。  </p>
<p>後續我也會使用 <code>MySQL Workbench 8.0 EC</code> 桌上軟體來管理資料庫。  </p>
<h4 id="Step-8-安裝-phpmyadmin"><a href="#Step-8-安裝-phpmyadmin" class="headerlink" title="Step 8 : 安裝 phpmyadmin"></a>Step 8 : 安裝 phpmyadmin</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> phpmyadmin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img data-src="https://dsm01pap006files.storage.live.com/y4mLZKbUP3LkaBCAIM6PKtuBVQ7_zF7hu4uNXPod28KcInO3uuPjaIovOMk4980mfsHPLu5oYyJ-HP2JViGignoFy0VZOYMOi96QX9EbPch5Tt2Sg3k60lGRvser2az_NGR7WLi8ECRPVoxXrcbcVvLDvYltfT8Ok0vMpEGvRG7JC-g1lw5J4qJBHItThHCP8mP?width=1892&height=1687&cropmode=none" alt="連接 apache"><br>記得要按一下空白鍵，出現星號才是選定，讓 phpmyadmin 連接到 apache2，不然後面會無法連上，我第一次就沒有按到導致輸入網址是沒辦法連上的 (已解決  [[#解決問題 網址連不上]])  </p>
<p>問 : 是否設定 dbconfig-common<br>答 : Y  </p>
<p>會建立一個新的 MySQL 使用者來操作運行 phpmyadmin 額外需要用到的資料表。預設使用者名稱為 <code>phpmyadmin</code>，接著要設定 phpmyadmin 這個 MySQL 使用者的密碼  </p>
<p>記得這裡是新的 user 設定 phpmyadmin 操作， root 還沒有  </p>
<h4 id="Step-9-設定-phpmyadmin-登入"><a href="#Step-9-設定-phpmyadmin-登入" class="headerlink" title="Step 9 : 設定 phpmyadmin 登入"></a>Step 9 : 設定 phpmyadmin 登入</h4><p>預設 MySQL root 密碼是空的，但沒辦法使用密碼來登入(因為驗證方式是 <code>auto_socket</code>)。<br>為了讓 phpmyadmin 可以用 root 帳號管理，就要先設定 MySQL 本身的 root 帳號，變成可以透過帳號密碼來登入  </p>
<p>透過 root 帳號進到 <code>mysql</code> 這個資料庫  </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> mysql -u root mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>進到 MySQL 的 shell，加入讓 root 啟用<br><code>mysql_native_password</code> 插件，在來一定要刷新權限表</p>
<pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">UPDATE user SET plugin&#x3D;&#39;mysql_native_password&#39; WHERE User&#x3D;&#39;root&#39;;

FLUSH PRIVILEGES;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>記得尾巴一定要有分號，才是完整的斷句</p>
<p>再來離開 mysql  <code>exit</code></p>
<h4 id="Step-10-設定-MySQL-的-root-密碼"><a href="#Step-10-設定-MySQL-的-root-密碼" class="headerlink" title="Step 10 : 設定 MySQL 的 root 密碼"></a>Step 10 : 設定 MySQL 的 root 密碼</h4><p>剛剛只是開啟功能，接下來要真的設定密碼，輸入  : </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> mysql_secure_installation<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>開啟 <code>VALIDATE PASSWORD</code> 插件，密碼驗證，幫忙檢查 root 的密碼安全性，會問是否啟用， 答 <code>y</code></p>
<p>再來會問密碼複雜度</p>
<ul>
<li>0 (Low) : 長度大於等於 8</li>
<li>1 (Medium) : 長度大於等於 8，包含大小寫和一個特殊字元</li>
<li>2 (Strong) : 長度大於等於 8，包含大小寫和一個特殊字元，包含字典檢查 (???)</li>
</ul>
<p>直接選 2 就好，再來要輸入兩次密碼，後面會詢問幾項問題</p>
<ul>
<li>確認密碼輸入無誤 : y</li>
<li>移除匿名使用者的資料 : y</li>
<li>可以禁止從遠端使用MySQL的root帳號來登入MySQL : y</li>
<li>移除測試用的資料庫 : y</li>
<li>重新載入權限表 : y</li>
</ul>
<p>都給他 y 下去就是了。到最後就 ok 了，接著打開瀏覽器輸入 <code>&lt;IPv4&gt;/phpmyadmin</code> 看到登入頁面就可以使用了<br><img data-src="https://dsm01pap006files.storage.live.com/y4muMsNIJeduUG0E5NPBPq4IJWIhaSOSpG3q51AO5s6Hvj1iiCPcr1XGPpAe_eQCIu6zWV1bt09EJamYRnLspgQFHFmEzHj6feXlmVnprFR6Tu5COkNSEOFy6op49B82xyGc5T1bUruuwckI2FCrz1RDzk-YV0GjH2XyoruE5i8G8D1PpKeDG2c2mPfdqN2Yg_O?width=2408&height=1376&cropmode=none" alt="/phpmyadmin"></p>
<h5 id="解決問題-網址連不上"><a href="#解決問題-網址連不上" class="headerlink" title="解決問題 : 網址連不上"></a>解決問題 : 網址連不上</h5><p>直到再網址上打 <code>/phpmyadmin</code> 都連不上，重新安裝後 MySQL 顯示是 OK 的，<code>show databases</code> 也有看到 phpmyadmin 的 schema，但不知道為什麼都連不上 QQ</p>
<ul>
<li><p>方法一 : 重新再設定<br>  一樣會跳回第一次選擇連接的伺服器口</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg-reconfigure phpmyadmin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  dpkg 也是處理安裝套件的一種管理指令，跟 apt 很像，但差別在 <code>dpkg</code> 安裝套件並不包含依賴關係。</p>
</li>
<li><p>方法二 : 手動把檔案連結起來</p>
</li>
</ul>
<ol>
<li>先確定連結的檔案存不存在 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">file</span> /etc/apache2/conf-enabled/phpmyadmin.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
 如果有會出現<br> <code>/etc/apache2/conf-enabled/phpmyadmin.conf: symbolic link to ../conf-available/phpmyadmin.conf</code><br> 沒有的話就會報錯</li>
<li>手動連結 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ln</span> -s /etc/phpmyadmin/apache.conf /etc/apache2/conf-available/phpmyadmin.conf
<span class="token function">sudo</span> a2enconf phpmyadmin
<span class="token function">sudo</span> systemctl reload apache2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>ln</code> : 會把兩個檔案連結起來</li>
<li>第二個是重新設定</li>
<li>第三個是系統重載入 apache2</li>
</ul>
</li>
</ol>
<h4 id="Step-11-把網頁放上來"><a href="#Step-11-把網頁放上來" class="headerlink" title="Step 11 : 把網頁放上來"></a>Step 11 : 把網頁放上來</h4><p>網頁檔案要放在 <code>/var/www/html</code> 底下<br>先移到資料夾底下 <code>cd /var/www/html</code>，建立一個網頁 <code>vi index.html</code>，打個 html，到網址打上位址，出現內容代表 OK 了 :D</p>
<ul>
<li>使用 <code>git clone</code><br>  失敗的原因是權限，那對 <code>/var/www/html</code> 更改權限  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chown</span> ubuntu /var/www/html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  再使用一次 git clone 就沒問題了<ul>
<li><code>chown &lt;&gt;</code></li>
</ul>
</li>
</ul>
<h3 id="網域設置"><a href="#網域設置" class="headerlink" title="網域設置"></a>網域設置</h3><p>我在 gandi 買了自己的網域，打開域名設定<br><img data-src="https://dsm01pap006files.storage.live.com/y4mWOHsaEFsldsxUXYVnt4AAC_qHEDpom6VjiExv8gUu3TPFBQ-01EnSY3ZcJhUqjCAa_seueuDv6babkELzu_W8W7RVjEXUsbD4SJYsZjBVo6rtRs0HY20FjqioD_7bIfOUCWOUKqKOYPEQNwUFs9Gu0hVSn2sVjQvgGjpJiQyUO2nVFstN-RbU4kjiv1Etqk9?width=2735&height=1573&cropmode=none" alt="DNS 轉址設定"><br>更動這個 <code>A</code> 的值改成 <code>IPv4</code> 也就是虛擬主機的 IP，對應到 IPv4 的 32 位元位址</p>
<ul>
<li><code>A</code> : 將DNS網域名稱對應到IPv4的32位元位址</li>
<li><code>CNAME</code> : 同一部主機設定許多別名</li>
</ul>
<p>等大概一會兒，在打上自己買的網域，就會連到 IPv4 看到的畫面，後面可以在新增自己的子網域</p>
<h3 id="補充-把資料庫連線到-MySQL-Workbench"><a href="#補充-把資料庫連線到-MySQL-Workbench" class="headerlink" title="補充 : 把資料庫連線到 MySQL Workbench"></a>補充 : 把資料庫連線到 MySQL Workbench</h3><p>雖然有 phpmyadmin 了，之前我都是用 workbench 來管理，來換一下吧</p>
<p>這時候直接新增 connection 會被擋掉，根據這篇 <a href="https://lidemy5thwbc.coderbridge.io/2021/07/27/webserver-set/">文章</a> 做設定 </p>
<ol>
<li>遠端主機的防火牆<br> 防火牆會擋住外來的連線，這時候要到 EC2 安全性設定打開 MySQL 通道<br> <img data-src="https://dsm01pap006files.storage.live.com/y4mGvlCum2TSup9BLc0Pz6uHBCW5s3dikyxRLRjscvgkgJd4goDhU-i4tneFJ7WOQ_3EphoMuBLY79U6sSnDnv61KkKkCfFdZnUFlJvBfHs3CDKUqPhH-4gDxwOMYZWUMfBjl7WRJbz0w01xmxAhcZUDyF2jWVfvEU204PZ3Y7AdXX7-CEESrgbuS-uGDXMklW-?width=2408&height=1376&cropmode=none" alt="防火牆設定"><br> 按下編輯後會列出所有規則，在最下面新增一個 MySQL port 3306，然後儲存<br> <img data-src="https://dsm01pap006files.storage.live.com/y4mLdtiE_1fwss9MHgYjXweRxDnCZiVswDaexi_8Y91KM-JVydwdt29pszdUwoIbgSm_hXnlH1y8-3mL93q2fCRwfmnYWEda09G7MMUKYzVOKK8D1CD41GLZQoDBHWKzont0vtYdLrVLD1mf76XAM1O0dHp828CTocVbTAqt77iePJcSQ8tNt-ipL9krJd1jZem?width=2408&height=1032&cropmode=none" alt="設定 MySQL"></li>
<li>MySQL 同意遠端連線<br> 預設是只能連線本機，但軟體是裝在我的電腦上，而不是遠端的主機，所以也要設定 MySQL 連線問題 連線到遠端主機 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -i ~/key.pem ubuntu@<span class="token operator">&lt;</span>IPv<span class="token operator"><span class="token file-descriptor important">4</span>></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
 修改 MySQL 設定檔 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/mysql/mysql.conf.d/mysqld.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
 找到 <code>bind-address</code> ，原本會是 <code>127.0.0.1</code>，只允許本機，改成 <code>0.0.0.0</code> 或者註解掉這行也可以<br> <img data-src="https://dsm01pap006files.storage.live.com/y4muXJECe6tXKTdZargY3Puf_nhNra6cV_3c2B1KtAZzI8kAT6K-rNjN-A9up6aO9JE6arHtYFMBLl3Ys_8DmsseSQWRSjSzUoInN4mIWtLWn7dGk0_SO9J4KmbpQ-Ut5b7BFEvH44hpOrQferqTqYyu5J9g0czooL1GkeGUrhHmSJrzUM-IomyQD9Dtp2aK3h7?width=1917&height=1670&cropmode=none" alt="允許外部連接"> 最後重新啟動 MySQL ，讓設定寫入 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> mysql restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>phpmyadmin 解除個別使用者的遠端連線限制<br> 用 root 連線到 phpmyadmin，到 <code>使用者帳號</code>，點擊 <code>編輯權限</code><br> <img data-src="https://dsm01pap006files.storage.live.com/y4mfv_hg8buRnf-GBShL_zMPOz0DkSf7kErvTLBwqJ5_-lsG_VlnYh3ceyIYSiEuvwQjWCFpNiLarRonbIDzCGwCXPtdCLkmTT6hKwELsqgu7wAW4t3TpZit1hBaq6DUQ0tsttUowm5xzCxvnUuTleRGFnesu3C0ebWpN28McgVHbBg_f8Bsyn2f0HY0fHkwzrg?width=2408&height=2021&cropmode=none" alt="編輯權限"><br> 跳到 <code>登入資訊</code> ，把主機名稱改為任意主機。<br> <img data-src="https://dsm01pap006files.storage.live.com/y4mI5KlKXpxlvV1Cbko1UPT4WnzBUPvzilV5zxmi31ymj4gDM46DuSzqY3z5y0vOxL5F2yYri2Jl3Dbk0HqgoC-axND4ESiX-jzwTScDfqztPKxI69EVbq1HoRdPzb3yJ-hxYTJpe_OZMBfjtTYTThdBc8xeqiHBjzkxEmwcvdtZVyAuN7D4zNwBIaVX4sbLJIh?width=2408&height=1976&cropmode=none" alt="修改登入資訊"><br> 最後回到 mysql CLI 打更新權限 <pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">FLUSH PRIVILEGES<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
 大功告成 QQ，至此所有的封印都解除了，回到 MySQL Workbench 新增一筆新的連線<br> 搭拉 ! 成功<br> <img data-src="https://dsm01pap006files.storage.live.com/y4mTaT_SAlbQeh09auWSIkVUd77ntYREr4HeKgJlWNOrLFIlwNylxz4KD7Vm92HChqkxcI2VLAbv9nNAUIFbNuxbFU9XHsScWWtJ9XxhHbGobfaR9YTYo2IMpWCCj2AujdYS4oaE4mxmwxtX9yTVpDL7kdUVVmJ48ZSRywv8puKRL_po2kuBsXhPEGFDzu-6XIP?width=2735&height=1825&cropmode=none" alt="Workbench 測試連線"></li>
</ol>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>歷經千辛萬苦終於架好了，沒有想到架站步驟是這麼的複雜，必須突破一層層關卡，像是雖然打開了虛擬主機外部連線問題，但 MySQL 也是要更改權限問題，不然也還是不成功的。</p>
<p>另外比較印象深刻的大概是買網域的部分，當時挑很久，在思考不同網域名的差別。我才知道網域是有分級的，<code>.shop</code> 這個字尤其價值不斐。不過轉念想想，好的網域名，在使用者輸入更好記，會記住這個網頁的用途，SEO 自然就會比較好。</p>
<p>再來就是虛擬主機的部分，裡面大多都是我看不懂的東西，大多都是偏向是硬體，因為我本身沒有接觸硬體，之後會想多了解一些…</p>
<hr>
<p>參考 : </p>
<ul>
<li><a href="https://github.com/Lidemy/mentor-program-2nd-yuchun33/issues/15">部署 AWS EC2 遠端主機 + Ubuntu LAMP 環境 + phpmyadmin)</a></li>
<li><a href="https://magiclen.org/lamp/">安裝 LAMP Server + phpMyAdmin 在 Linux 系統上輕鬆架設網站 | MagicLen</a></li>
<li><a href="https://lidemy5thwbc.coderbridge.io/2021/07/27/webserver-set/">網頁伺服器架站流程 (coderbridge.io)</a></li>
<li><a href="https://drive.google.com/file/d/1ZymwmKb3MaX3F5YMQb77AC_wrUsX_ljS/view">Install phpMyAdmin with Apache (LAMP) on Ubuntu.txt</a> : phpmyadmin 連接 apache 問題</li>
<li><a href="http://dns-learning.twnic.net.tw/bind/intro6.html">DNS資源紀錄(Resource Record)介紹 (twnic.net.tw)</a></li>
</ul>
]]></content>
      <categories>
        <category>bookreport</category>
      </categories>
      <tags>
        <tag>Backend</tag>
        <tag>MySQL</tag>
        <tag>phpMyadmin</tag>
        <tag>LAMP</tag>
      </tags>
  </entry>
</search>
