<!DOCTYPE html>
<html lang="zh-TW">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=2">
<meta name="theme-color" content="#222">
<meta name="generator" content="Hexo 5.4.0">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/shan-logo-appletouch.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/shan-logo.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/shan-logo-16X16.png">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">

<link rel="stylesheet" href="/css/main.css">



<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5.14.0/css/all.min.css">
  <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css">

<script class="hexo-configurations">
    var NexT = window.NexT || {};
    var CONFIG = {"hostname":"blog.rosa.tw","root":"/","scheme":"Gemini","version":"8.0.0","exturl":false,"sidebar":{"position":"left","display":"post","padding":18,"offset":12,"Pisces | Gemini":240},"copycode":true,"bookmark":{"enable":false,"color":"#222","save":"auto"},"fancybox":true,"mediumzoom":false,"lazyload":true,"pangu":false,"comments":{"style":"buttons","active":true,"storage":true,"lazyload":true,"nav":{"disqus":{"text":"留言區","order":-1}},"Available values":"disqus"},"motion":{"enable":false,"async":false,"transition":{"post_block":"fadeIn","post_header":"fadeInDown","post_body":"fadeInDown","coll_header":"fadeInLeft","sidebar":"fadeInUp"}},"prism":false,"i18n":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: ${query}","hits_time":"${hits} results found in ${time} ms","hits":"${hits} results found"},"path":"search.xml","localsearch":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false}};
  </script>

  <meta name="description" content="前言在 JavaScript 中，非同步的操作是很常見的，舉凡滑鼠事件、發出請求獲取資料…等，反過來問，如果這些操作是 同步 的，你可能操作後，畫面就像被卡住了，要等到目前的程式執行完畢才能繼續瀏覽。 Event Loop 的概念如何幫我們了解這件事，具體怎麼做呢 ? 本篇主要是幫助我自己釐清 Event Loop 的概念。">
<meta property="og:type" content="article">
<meta property="og:title" content="筆記 | JavaScript - Event Loop 事件循環 (I)">
<meta property="og:url" content="https://blog.rosa.tw/JavaScript/JavaScript-Event-Loop-01">
<meta property="og:site_name" content="健忘雜記">
<meta property="og:description" content="前言在 JavaScript 中，非同步的操作是很常見的，舉凡滑鼠事件、發出請求獲取資料…等，反過來問，如果這些操作是 同步 的，你可能操作後，畫面就像被卡住了，要等到目前的程式執行完畢才能繼續瀏覽。 Event Loop 的概念如何幫我們了解這件事，具體怎麼做呢 ? 本篇主要是幫助我自己釐清 Event Loop 的概念。">
<meta property="og:locale" content="zh_TW">
<meta property="article:published_time" content="2022-06-17T16:54:45.000Z">
<meta property="article:modified_time" content="2022-06-18T13:51:43.692Z">
<meta property="article:author" content="Rosa Hong">
<meta property="article:tag" content="JavaScript">
<meta name="twitter:card" content="summary">


<link rel="canonical" href="https://blog.rosa.tw/JavaScript/JavaScript-Event-Loop-01">


<script class="page-configurations">
  // https://hexo.io/docs/variables.html
  CONFIG.page = {
    sidebar: "",
    isHome : false,
    isPost : true,
    lang   : 'zh-TW'
  };
</script>

  <title>筆記 | JavaScript - Event Loop 事件循環 (I) | 健忘雜記</title>
  






  <noscript>
  <style>
  body { margin-top: 2rem; }

  .use-motion .menu-item,
  .use-motion .sidebar,
  .use-motion .post-block,
  .use-motion .pagination,
  .use-motion .comments,
  .use-motion .post-header,
  .use-motion .post-body,
  .use-motion .collection-header {
    visibility: visible;
  }

  .use-motion .header,
  .use-motion .site-brand-container .toggle,
  .use-motion .footer { opacity: initial; }

  .use-motion .site-title,
  .use-motion .site-subtitle,
  .use-motion .custom-logo-image {
    opacity: initial;
    top: initial;
  }

  .use-motion .logo-line {
    transform: scaleX(1);
  }

  .search-pop-overlay, .sidebar-nav { display: none; }
  .sidebar-panel { display: block; }
  </style>
</noscript>

<link rel="alternate" href="/atom.xml" title="健忘雜記" type="application/atom+xml">
</head>

<body itemscope itemtype="http://schema.org/WebPage">
  <div class="headband"></div>

  <main class="main">
    <header class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-brand-container">
  <div class="site-nav-toggle">
    <div class="toggle" aria-label="切換導航欄">
        <span class="toggle-line"></span>
        <span class="toggle-line"></span>
        <span class="toggle-line"></span>
    </div>
  </div>

  <div class="site-meta">

    <a href="/" class="brand" rel="start">
      <i class="logo-line"></i>
      <h1 class="site-title">健忘雜記</h1>
      <i class="logo-line"></i>
    </a>
      <p class="site-subtitle" itemprop="description">紀錄學習與生活</p>
  </div>

  <div class="site-nav-right">
    <div class="toggle popup-trigger">
        <i class="fa fa-search fa-fw fa-lg"></i>
    </div>
  </div>
</div>



<nav class="site-nav">
  <ul class="main-menu menu">
        <li class="menu-item menu-item-home">

    <a href="/" rel="section"><i class="fa fa-home fa-fw"></i>首頁</a>

  </li>
        <li class="menu-item menu-item-tags">

    <a href="/tags/" rel="section"><i class="fa fa-tags fa-fw"></i>標籤<span class="badge">20</span></a>

  </li>
        <li class="menu-item menu-item-categories">

    <a href="/categories/" rel="section"><i class="fa fa-th fa-fw"></i>分類<span class="badge">7</span></a>

  </li>
        <li class="menu-item menu-item-archives">

    <a href="/archives/" rel="section"><i class="fa fa-archive fa-fw"></i>歸檔<span class="badge">49</span></a>

  </li>
      <li class="menu-item menu-item-search">
        <a role="button" class="popup-trigger"><i class="fa fa-search fa-fw"></i>搜尋
        </a>
      </li>
  </ul>
</nav>



  <div class="search-pop-overlay">
    <div class="popup search-popup">
        <div class="search-header">
  <span class="search-icon">
    <i class="fa fa-search"></i>
  </span>
  <div class="search-input-container">
    <input autocomplete="off" autocapitalize="off" maxlength="80"
           placeholder="搜尋..." spellcheck="false"
           type="search" class="search-input">
  </div>
  <span class="popup-btn-close">
    <i class="fa fa-times-circle"></i>
  </span>
</div>
<div class="search-result-container no-result">
  <div class="search-result-icon">
    <i class="fa fa-spinner fa-pulse fa-5x"></i>
  </div>
</div>

    </div>
  </div>

</div>
        
  
  <div class="toggle sidebar-toggle">
    <span class="toggle-line"></span>
    <span class="toggle-line"></span>
    <span class="toggle-line"></span>
  </div>

  <aside class="sidebar">

    <div class="sidebar-inner sidebar-nav-active sidebar-toc-active">
      <ul class="sidebar-nav">
        <li class="sidebar-nav-toc">
          文章目錄
        </li>
        <li class="sidebar-nav-overview">
          本站概要
        </li>
      </ul>

      <!--noindex-->
      <section class="post-toc-wrap sidebar-panel">
          <div class="post-toc animated"><ol class="nav"><li class="nav-item nav-level-2"><a class="nav-link" href="#%E5%89%8D%E8%A8%80"><span class="nav-number">1.</span> <span class="nav-text">前言</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E7%82%BA%E4%BB%80%E9%BA%BC%E6%9C%83%E6%9C%89-Event-Loop"><span class="nav-number">2.</span> <span class="nav-text">為什麼會有 Event Loop ?</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#%E9%97%9C%E6%96%BC-Event-Loop-%E7%9A%84%E5%90%8D%E8%A9%9E"><span class="nav-number">2.1.</span> <span class="nav-text">關於 Event Loop 的名詞</span></a><ol class="nav-child"><li class="nav-item nav-level-4"><a class="nav-link" href="#Stack-%E5%A0%86%E7%96%8A"><span class="nav-number">2.1.1.</span> <span class="nav-text">Stack (堆疊)</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#Task-Queue-%E4%BB%BB%E5%8B%99%E4%BD%87%E5%88%97"><span class="nav-number">2.1.2.</span> <span class="nav-text">Task Queue (任務佇列)</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#Blocking-%E9%98%BB%E5%A1%9E"><span class="nav-number">2.1.3.</span> <span class="nav-text">Blocking (阻塞)</span></a><ol class="nav-child"><li class="nav-item nav-level-5"><a class="nav-link" href="#%E9%98%BB%E5%A1%9E%E5%B8%B8%E8%A6%8B%E7%9A%84%E4%BE%8B%E5%AD%90-%E7%84%A1%E9%99%90%E6%BB%BE%E5%8B%95%E8%BC%89%E5%85%A5%E8%B3%87%E6%96%99"><span class="nav-number">2.1.3.1.</span> <span class="nav-text">阻塞常見的例子 : 無限滾動載入資料</span></a></li></ol></li></ol></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E5%B0%8F%E7%B5%90-Event-Loop-%E6%98%AF%E2%80%A6"><span class="nav-number">2.2.</span> <span class="nav-text">小結 : Event Loop 是…</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E5%B9%BE%E5%80%8B-Event-Loop-%E7%9A%84%E4%BE%8B%E5%AD%90"><span class="nav-number">3.</span> <span class="nav-text">幾個 Event Loop 的例子</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#%E6%B2%92%E9%82%A3%E9%BA%BC%E7%B2%BE%E6%BA%96%E7%9A%84-setTimeout-%E8%88%87-setInterval"><span class="nav-number">3.1.</span> <span class="nav-text">沒那麼精準的 setTimeout 與 setInterval</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E5%A4%9A%E5%80%8B-setTimeout"><span class="nav-number">3.2.</span> <span class="nav-text">多個 setTimeout</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E5%90%8C%E6%AD%A5%E8%88%87%E9%9D%9E%E5%90%8C%E6%AD%A5%E7%9A%84-callback"><span class="nav-number">3.3.</span> <span class="nav-text">同步與非同步的 callback</span></a><ol class="nav-child"><li class="nav-item nav-level-4"><a class="nav-link" href="#%E5%90%8C%E6%AD%A5%E7%9A%84-callback-%E7%99%BC%E7%94%9F%E4%BA%86%E4%BB%80%E9%BA%BC%E4%BA%8B"><span class="nav-number">3.3.1.</span> <span class="nav-text">同步的 callback 發生了什麼事</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#%E6%94%B9%E6%88%90%E9%9D%9E%E5%90%8C%E6%AD%A5%E7%9A%84-callback-%E5%B7%AE%E5%88%A5%E5%9C%A8%E5%93%AA"><span class="nav-number">3.3.2.</span> <span class="nav-text">改成非同步的 callback 差別在哪 ?</span></a></li></ol></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E7%B5%90%E8%AA%9E"><span class="nav-number">4.</span> <span class="nav-text">結語</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E5%8F%83%E8%80%83"><span class="nav-number">5.</span> <span class="nav-text">參考</span></a></li></ol></div>
      </section>
      <!--/noindex-->

      <section class="site-overview-wrap sidebar-panel">
        <div class="site-author animated" itemprop="author" itemscope itemtype="http://schema.org/Person">
    <img class="site-author-image" itemprop="image" alt="Rosa Hong"
      src="/images/RosaBlog-LOGO.png">
  <p class="site-author-name" itemprop="name">Rosa Hong</p>
  <div class="site-description" itemprop="description">菜鳥起飛中</div>
</div>
<div class="site-state-wrap animated">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
          <a href="/archives/">
        
          <span class="site-state-item-count">49</span>
          <span class="site-state-item-name">文章</span>
        </a>
      </div>
      <div class="site-state-item site-state-categories">
            <a href="/categories/">
          
        <span class="site-state-item-count">7</span>
        <span class="site-state-item-name">分類</span></a>
      </div>
      <div class="site-state-item site-state-tags">
            <a href="/tags/">
          
        <span class="site-state-item-count">20</span>
        <span class="site-state-item-name">標籤</span></a>
      </div>
  </nav>
</div>
  <div class="links-of-author animated">
      <span class="links-of-author-item">
        <a href="https://github.com/meitung473" title="GitHub → https:&#x2F;&#x2F;github.com&#x2F;meitung473" rel="noopener" target="_blank"><i class="fab fa-github fa-fw"></i></a>
      </span>
      <span class="links-of-author-item">
        <a href="mailto:a8870506@gmail.com" title="聯絡我 → mailto:a8870506@gmail.com" rel="noopener" target="_blank"><i class="fa fa-envelope fa-fw"></i></a>
      </span>
      <span class="links-of-author-item">
        <a href="https://www.facebook.com/yanshan.hong1" title="Rosa Hong → https:&#x2F;&#x2F;www.facebook.com&#x2F;yanshan.hong1" rel="noopener" target="_blank"><i class="fa fa-facebook fa-fw"></i></a>
      </span>
  </div>



      </section>
    </div>
  </aside>
  <div class="sidebar-dimmer"></div>


    </header>

    
  <div class="back-to-top">
    <i class="fa fa-arrow-up"></i>
    <span>0%</span>
  </div>
  <div class="reading-progress-bar"></div>

<noscript>
  <div class="noscript-warning">Theme NexT works best with JavaScript enabled</div>
</noscript>


    <div class="main-inner post posts-expand">
      

      

    
  
  
  <article itemscope itemtype="http://schema.org/Article" class="post-block" lang="zh-TW">
    <link itemprop="mainEntityOfPage" href="https://blog.rosa.tw/JavaScript/JavaScript-Event-Loop-01">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/RosaBlog-LOGO.png">
      <meta itemprop="name" content="Rosa Hong">
      <meta itemprop="description" content="菜鳥起飛中">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="健忘雜記">
    </span>

    
    
      <header class="post-header">
        <h1 class="post-title" itemprop="name headline">
          筆記 | JavaScript - Event Loop 事件循環 (I)
        </h1>

        <div class="post-meta-container">
          <div class="post-meta">
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-calendar"></i>
      </span>
      <span class="post-meta-item-text">發表於</span>

      <time title="創建時間：2022-06-18 00:54:45" itemprop="dateCreated datePublished" datetime="2022-06-18T00:54:45+08:00">2022-06-18</time>
    </span>
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-folder"></i>
      </span>
      <span class="post-meta-item-text">分類於</span>
        <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
          <a href="/categories/JavaScript/" itemprop="url" rel="index"><span itemprop="name">JavaScript</span></a>
        </span>
    </span>

  
      </div>
      <div class="post-meta">
    <span class="post-meta-item" title="文章字數">
      <span class="post-meta-item-icon">
        <i class="far fa-file-word"></i>
      </span>
      <span class="post-meta-item-text">文章字數：</span>
      <span>4.9k</span>
    </span>
    <span class="post-meta-item" title="所需閱讀時間">
      <span class="post-meta-item-icon">
        <i class="far fa-clock"></i>
      </span>
      <span class="post-meta-item-text">所需閱讀時間 &asymp;</span>
      <span>4 分鐘</span>
    </span>
</div>

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody">
        <h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 JavaScript 中，非同步的操作是很常見的，舉凡滑鼠事件、發出請求獲取資料…等，反過來問，如果這些操作是 <strong>同步</strong> 的，你可能操作後，畫面就像被卡住了，要等到目前的程式執行完畢才能繼續瀏覽。</p>
<p>Event Loop 的概念如何幫我們了解這件事，具體怎麼做呢 ? 本篇主要是幫助我自己釐清 Event Loop 的概念。</p>
<span id="more"></span>
<h2 id="為什麼會有-Event-Loop"><a href="#為什麼會有-Event-Loop" class="headerlink" title="為什麼會有 Event Loop ?"></a>為什麼會有 Event Loop ?</h2><p>JS 的語言特性是</p>
<ol>
<li>Single Thread (單線程)</li>
<li>Synchronous (同步)</li>
</ol>
<p>有時候語意上很令人誤解，同步 <strong>並不是同時做很多事</strong>，而是你只能一次做一件事。那為什麼我們可以在 <strong>瀏覽器</strong> 中操作按鈕獲取資料的同時又能做別的事 ?    </p>
<p>沒錯，特別指出 <strong>瀏覽器</strong>，因為在不同的執行環境下，才能讓我們執行非同步的操作。(node 也是一種 JavaScript 執行環境，其中也有提供非同步的 API 來操作)</p>
<p>JavaScript 在 Runtime (執行環境) 是同步的，而是瀏覽器提供 Web APIs 讓我們透過 Event Loop 搭配非同步操作，才能”同時”處理很多事。</p>
<h3 id="關於-Event-Loop-的名詞"><a href="#關於-Event-Loop-的名詞" class="headerlink" title="關於 Event Loop 的名詞"></a>關於 Event Loop 的名詞</h3><h4 id="Stack-堆疊"><a href="#Stack-堆疊" class="headerlink" title="Stack (堆疊)"></a>Stack (堆疊)</h4><p>Stack 是資料結構的一種，遵守 LIFO (Last In,First Out)。</p>
<p>JavaScript 中的 Call Stack 會記錄目前執行到程式的部分，因為 JavaScript 是 Single Thread (單線程) ，只會有一個 Call Stack。</p>
<p><strong>那 Call Stack 怎麼運作呢 ?</strong><br>當執行某個函式，會將目前執行的函式放在 Stack 的最上層，如果函式執行 <code>return</code> 就會從 Stack 最上方抽離。</p>
<p><strong>範例</strong>  </p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span>
	<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span>
	<span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>跟著程式走 :  </p>
<ol>
<li>執行 c() ，把 c() 放入 Call Stack 中 1</li>
</ol>
<table>
<thead>
<tr>
<th>order</th>
<th>stack</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>c () <strong>(now)</strong></td>
</tr>
</tbody></table>
<ol start="2">
<li>印出 ‘c’，接著執行 b()，把 b() 放入 Call Stack 中   </li>
</ol>
<table>
<thead>
<tr>
<th>order</th>
<th>stack</th>
</tr>
</thead>
<tbody><tr>
<td>2</td>
<td>b() <strong>(now)</strong></td>
</tr>
<tr>
<td>1</td>
<td>c ()</td>
</tr>
</tbody></table>
<ol start="3">
<li>印出 ‘b’，接著執行 a()，把 a() 放入 Call Stack 中   </li>
</ol>
<table>
<thead>
<tr>
<th>order</th>
<th>stack</th>
</tr>
</thead>
<tbody><tr>
<td>3</td>
<td>a() <strong>(now)</strong></td>
</tr>
<tr>
<td>2</td>
<td>b()</td>
</tr>
<tr>
<td>1</td>
<td>c ()</td>
</tr>
</tbody></table>
<ol start="4">
<li>印出 ‘a’，a() 後面沒有程式碼，代表執行完畢，抽離 Stack 中  </li>
</ol>
<table>
<thead>
<tr>
<th>order</th>
<th>stack</th>
</tr>
</thead>
<tbody><tr>
<td><del>3</del></td>
<td><del>a() —-&gt; 抽離</del></td>
</tr>
<tr>
<td>2</td>
<td>b()</td>
</tr>
<tr>
<td>1</td>
<td>c ()</td>
</tr>
</tbody></table>
<ol start="5">
<li>後面跟步驟 4 一樣，依序抽離，直到 c() 執行完畢，後面也沒有程式碼，最後 Call Stack 為空</li>
</ol>
<p>解釋了上面提及的 Stack <strong>Last In,First Out</strong> 的原因。  </p>
<h4 id="Task-Queue-任務佇列"><a href="#Task-Queue-任務佇列" class="headerlink" title="Task Queue (任務佇列)"></a>Task Queue (任務佇列)</h4><p>又稱作 Callback Queue，在 Web APIs 的 function 執行完後，把 callback (接著要執行的 function) 放到 Task Queue 等待。</p>
<p>👉<a href="http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4=">參考 Loupe 視覺化工具</a></p>
<p>在這個例子中，有 setTimeout 與 click 事件。當程式執行時 : </p>
<ol>
<li>Button 事件並沒有觸發，callback function 並不會執行，先放置到 Web APIs 等待</li>
<li>第 7 行排進 Call Stack ，印出 ‘Hi !’，執行完畢移出 Call Stack 外</li>
<li>setTimeOut 放置到 Web APIs 等待，並且開始算 5 秒鐘</li>
<li>第 13 行排進 Call Stack ，印出 ‘Welcome to loupe.’，執行完畢移出 Call Stack 外，到這邊靜態的程式碼都執行完畢，Call Stack 變成空的 。(同一時間 setTimeOut 還在跑秒數)</li>
<li>過了大概 5 秒鐘， 把第 9 行 setTimeOut 的 callback <code>timeout()</code> 放到 Callback Queue。</li>
<li><strong>此時 Call Stack 為空的，把 Task Queue 第一順位的 timeout() 搬到 Call Stack 執行</strong> (此時會看見橘色的旋轉鈕轉動，代表 Event Loop)</li>
<li>第 10 行排進 Call Stack ，印出 ‘Click the button’，timeout() 執行完畢，移出 Call Stack 外，Stack 又變成空的。</li>
</ol>
<p><strong>如果這時候按下按鈕呢 ?</strong>     </p>
<ol>
<li>按下後，onClick 事件執行，排進 Call Stack</li>
<li>執行第 2 行 setTimeout ，把 setTimeout 放置到 Web APIs 等待，並且開始算 2 秒鐘，onClick 事件執行完畢，移出 Call Stack 外，Stack 又變成空的</li>
<li>過了大概 2 秒鐘， 把 setTimeOut 的 callback <code>timer()</code> 放到 Callback Queue。</li>
<li><strong>此時 Call Stack 為空的，把 Task Queue 第一順位的 timer() 搬到 Call Stack 執行</strong></li>
<li>第 3 行排進 Call Stack，印出 ‘You click the button !’，執行完畢，移出 Call Stack 外，Stack 又變成空的。</li>
</ol>
<p>以上是一步步跟著的 Event Loop 的基本運作</p>
<h4 id="Blocking-阻塞"><a href="#Blocking-阻塞" class="headerlink" title="Blocking (阻塞)"></a>Blocking (阻塞)</h4><blockquote>
<p>那如果一直按按鈕呢 ? </p>
</blockquote>
<p>會發現一個個 onClick 事件的 callback 會被排進 Callback Queue 正在排隊等待，setTimeout 同時也在排隊，也要等待 onClick 事件結束，移出 Call Stack 外，透過 Event Loop 檢查 Call Stack 是否為空…(略)，重複一直執行。</p>
<p>這時候畫面就好像靜止了，setTimeout 的 2 秒也不是很精準，這就是發生了 Blocking 。</p>
<p>如果會以為同時印出，要回想 <strong>JavaScript 是同步的</strong> 這句話，執行的結果會是依序出現，不會一下子 “啪!” 全部出來。</p>
<h5 id="阻塞常見的例子-無限滾動載入資料"><a href="#阻塞常見的例子-無限滾動載入資料" class="headerlink" title="阻塞常見的例子 : 無限滾動載入資料"></a>阻塞常見的例子 : 無限滾動載入資料</h5><p>如果直接 : </p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token comment">// Ajax 獲取資料</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>發現每一滑，都會觸發 callback 。就像你一直按按鈕，然後發出請求資料，排進 Web APIs 並且等待資料的 response ，再排進 Callback Queue，這時候會造成 Blocking。為避免一直觸發 scroll 事件，通常會搭配 lodash 的 debounce。</p>
<h3 id="小結-Event-Loop-是…"><a href="#小結-Event-Loop-是…" class="headerlink" title="小結 : Event Loop 是…"></a>小結 : Event Loop 是…</h3><p>一種機制，讓 JavaScript 可以同時做很多事</p>
<blockquote>
<p>當 Call Stack 為空時，把 Callback Queue 等待的 callback function 放進 Call Stack 來執行</p>
</blockquote>
<h2 id="幾個-Event-Loop-的例子"><a href="#幾個-Event-Loop-的例子" class="headerlink" title="幾個 Event Loop 的例子"></a>幾個 Event Loop 的例子</h2><p>來自 <a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ">What the heck is the event loop anyway?</a> 提到的範例  </p>
<h3 id="沒那麼精準的-setTimeout-與-setInterval"><a href="#沒那麼精準的-setTimeout-與-setInterval" class="headerlink" title="沒那麼精準的 setTimeout 與 setInterval"></a>沒那麼精準的 setTimeout 與 setInterval</h3><p>setTimeout 與 setInterval 都是 Web APIs ，會排進 Callback Queue 並且等到 Call Stack 為空的時候才執行。所以不能保證一定精準 x 秒後執行，但至少執行間距的最小秒數是 x 秒。</p>
<p><strong>常見的 0 秒 setTimeout</strong><br>乍看之下會以為 0 秒是立即執行，其實不然。  </p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>結果是 <code>hi</code> 先印出，再印出 <code>hello</code>。</p>
<p>跟著步驟走 : </p>
<ol>
<li>setTimeout 放入 Web APIs 等待 0 秒後，放入 Task Queue 等待</li>
<li><code>console.log(&#39;hi&#39;)</code> 排進 Call Stack，並且執行</li>
<li>印出 ‘hi’ ，執行結束，移出 Stack 外</li>
<li>此時的 Call Stack 是空的，而且 Task Queue 的第一位是 setTimeout 的 callback ，排進 Call Stack</li>
<li>執行 <code>console.log(&#39;hello&#39;)</code> </li>
<li>印出 ‘hello’，執行結束，移出 Stack 外</li>
<li>程式碼執行結束</li>
</ol>
<p>這也是為什麼 setTimeout  沒那麼 精準的原因，因為必須等到  Call Stack 為空才會執行，導致中間可能會有誤差。</p>
<h3 id="多個-setTimeout"><a href="#多個-setTimeout" class="headerlink" title="多個 setTimeout"></a>多個 setTimeout</h3><p>遇到 setTimeout 常會問 console.log 的結果是 ?</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li>每間隔 1 秒後，依序印出 ‘hi’ (1 秒 ‘hi’，隔 1 秒 ‘hi’…)</li>
<li>在 4 秒後，同時印出 <pre class="line-numbers language-none"><code class="language-none">4 (hi)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>至少間距 1 秒以後，一次印出 4 次的  <pre class="line-numbers language-js" data-language="js"><code class="language-js">hi
hi
hi
hi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
.<br>.<br>.<br>.<br>.<br>.<br>.<br>結果是<strong>至少間距 1 秒以後，一次印出 4 次的 hi</strong> 。經過 1 秒後即使已經排定到 Callback Queue，但是如果這時候 Call Stack 還不是空的，Queue 就會發生 Blocking 塞車在這裡等待，等到 Stack 空再依序印出 hi。如果 1 秒短到看不見，可以調成更久的時間。</li>
</ol>
<h3 id="同步與非同步的-callback"><a href="#同步與非同步的-callback" class="headerlink" title="同步與非同步的 callback"></a>同步與非同步的 callback</h3><p>我覺得這個例子很有意思，我們知道頻繁的呼叫 callback function 會造成 Blocking 的情形，但是 <strong>Call Stack 塞車或是 Callback Queue 塞車有什麼差別呢 ?</strong>  </p>
<p>透過這個例子我自己覺得更清楚知道有了 Event Loop 到底幫助在哪。 </p>
<p>在這裡的 callback function 有兩種</p>
<ol>
<li>在函式中呼叫另一個函式 (同步的 callback，都在 Call Stack 執行完畢) <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>像是跟 Web APIs 有關的，例 : click 事件後的 callback function 不會馬上執行，而是等到 Event Loop 後才會。<br> (非同步的 callback  差別在於，有排隊到 Callback Queue 再到 Call Stack) <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
			console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h4 id="同步的-callback-發生了什麼事"><a href="#同步的-callback-發生了什麼事" class="headerlink" title="同步的 callback 發生了什麼事"></a>同步的 callback 發生了什麼事</h4><p>如上面的第一個 callback 範例，我們必須等到 forEach 印完所有元素，才能做其他的事。這段時間造成 Call Stack 的 Blocking，導致畫面不能動作。</p>
<p>一般來說，瀏覽器會在每 16.6 毫秒的時候重新渲染畫面，但這時候 Call Stack 還在處理事情，導致畫面的解析被延遲，在影片中講者有開啟模擬畫面 render 的模擬，render 一直被占據紅線。</p>
<h4 id="改成非同步的-callback-差別在哪"><a href="#改成非同步的-callback-差別在哪" class="headerlink" title="改成非同步的 callback 差別在哪 ?"></a>改成非同步的 callback 差別在哪 ?</h4><p>上面不斷強調 Event Loop 是 Call Stack 為空時，才會把 Callback Queue 推上 Stack 執行。而在 Call Stack 空的期間，提供瀏覽器執行畫面重新渲染的機會，才不會因為忙碌導致卡住。</p>
<blockquote>
<p>簡單來說 : <strong>畫面渲染的優先度是高於 Callback Queue 的 callback function</strong> </p>
</blockquote>
<p>這也是為什麼在影片講者提到不要造成耗時的程式碼放在 Call Stack ，因為 Call Stack 賽車沒辦法重新渲染畫面。</p>
<p>也可以參考這篇 Jack 大的實作範例二，文章也有提到什麼時候會 rendering，助於瞭解整個流程<br>👉 <a href="https://yu-jack.github.io/2020/02/03/javascript-runtime-event-loop-browser/#%E7%AF%84%E4%BE%8B%E4%BA%8C">Event Loop 運行機制解析 - 瀏覽器篇 - 技術雜記 Technology Notes - Jack Yu | 傑克</a></p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>目前提到瀏覽器的 Event Loop ，至於 Node 的 Event Loop 我還沒研究，未來會再研究補充。不過還有 mircoTask 與 macroTask 還沒補完 QQ，才能算是了解 Event Loop。</p>
<p>如果有誤麻煩請寄信告訴我，我會非常感謝</p>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol>
<li><a href="https://pjchender.blogspot.com/2017/08/javascript-learn-event-loop-stack-queue.html">[筆記] 理解 JavaScript 中的事件循環、堆疊、佇列和併發模式 | PJCHENder 那些沒告訴你的小細節</a></li>
<li>講解 Event Loop 的影片(有中文字幕) : <a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ">What the heck is the event loop anyway? | Philip Roberts | JSConf EU - YouTube</a></li>
<li>模擬 Event Loop 的網頁 : <a href="http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4=">latentflip.com</a></li>
<li><a href="https://yu-jack.github.io/2020/02/03/javascript-runtime-event-loop-browser/#%E7%AF%84%E4%BE%8B%E4%BA%8C">Event Loop 運行機制解析 - 瀏覽器篇 - 技術雜記 Technology Notes - Jack Yu | 傑克</a></li>
</ol>

    </div>

    
    
    
      
  <div class="popular-posts-header">相關文章</div>
  <ul class="popular-posts">
    <li class="popular-posts-item">
      <div class="popular-posts-title"><a href="\JavaScript\JavaScript-DataType" rel="bookmark">筆記 | JavaScript - 資料型態(I)</a></div>
    </li>
    <li class="popular-posts-item">
      <div class="popular-posts-title"><a href="\JavaScript\JavaScript-Logic" rel="bookmark">筆記 | JavaScript 邏輯運算子</a></div>
    </li>
    <li class="popular-posts-item">
      <div class="popular-posts-title"><a href="\Front-end\JavaScript_API_twitch" rel="bookmark">紀錄 | 串接 Twitch API 實戰</a></div>
    </li>
    <li class="popular-posts-item">
      <div class="popular-posts-title"><a href="\JavaScript\JavaScript-Expression-Statement" rel="bookmark">筆記 | JavaScript - 表達式 & 陳述式</a></div>
    </li>
    <li class="popular-posts-item">
      <div class="popular-posts-title"><a href="\JavaScript\JavaScript-First-Class-Function" rel="bookmark">筆記 | JavaScript - first class function (一級函式)</a></div>
    </li>
  </ul>


    <footer class="post-footer">
          <div class="post-tags">
              <a href="/tags/JavaScript/" rel="tag"><i class="fa fa-tag"></i> JavaScript</a>
          </div>

        

          <div class="post-nav">
            <div class="post-nav-item">
                <a href="/JavaScript/JavaScript-null-undefined-operator" rel="prev" title="筆記 | JavaScript - 運算子 ?. 與 ??">
                  <i class="fa fa-chevron-left"></i> 筆記 | JavaScript - 運算子 ?. 與 ??
                </a>
            </div>
            <div class="post-nav-item">
            </div>
          </div>
    </footer>
  </article>
  
  
  



      
      
  <div style="">
       

<script>
  window.addEventListener('tabs:register', () => {
    let { activeClass } = CONFIG.comments;
    if (CONFIG.comments.storage) {
      activeClass = localStorage.getItem('comments_active') || activeClass;
    }
    if (activeClass) {
      const activeTab = document.querySelector(`a[href="#comment-${activeClass}"]`);
      if (activeTab) {
        activeTab.click();
      }
    }
  });
  if (CONFIG.comments.storage) {
    window.addEventListener('tabs:click', event => {
      if (!event.target.matches('.tabs-comment .tab-content .tab-pane')) return;
      const commentClass = event.target.classList[1];
      localStorage.setItem('comments_active', commentClass);
    });
  }
</script>

  </div>
    
    </div>
  </main>

  <footer class="footer">
    <div class="footer-inner">
      

      

<div class="copyright">
  
  &copy; 
  <span itemprop="copyrightYear">2022</span>
  <span class="with-love">
    <i class="fa fa-heart"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">RosaHong</span>
</div>
<div class="wordcount">
  <span class="post-meta-item">
    <span class="post-meta-item-icon">
      <i class="fa fa-chart-line"></i>
    </span>
      <span>總字數：</span>
    <span title="總字數">149k</span>
  </span>
  <span class="post-meta-item">
    <span class="post-meta-item-icon">
      <i class="fa fa-coffee"></i>
    </span>
      <span>所需總閱讀時間 &asymp;</span>
    <span title="所需總閱讀時間">2:15</span>
  </span>
</div>
  <div class="powered-by">由 <a href="https://hexo.io/" class="theme-link" rel="noopener" target="_blank">Hexo</a> & <a href="https://theme-next.js.org/" class="theme-link" rel="noopener" target="_blank">NexT.Gemini</a> 強力驅動
  </div>

    </div>
  </footer>

  
  <script src="//cdn.jsdelivr.net/npm/animejs@3.2.0/lib/anime.min.js"></script>
  <script src="//cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js"></script>
  <script src="//cdn.jsdelivr.net/npm/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js"></script>
  <script src="//cdn.jsdelivr.net/npm/lozad@1.15.0/dist/lozad.min.js"></script>
<script src="/js/utils.js"></script><script src="/js/next-boot.js"></script>

  




  <script src="/js/local-search.js"></script>










<script>
if (document.querySelectorAll('.mermaid').length) {
  NexT.utils.getScript('//cdn.jsdelivr.net/npm/mermaid@8.7.0/dist/mermaid.min.js', () => {
    mermaid.init({
      theme    : 'forest',
      logLevel : 3,
      flowchart: { curve     : 'linear' },
      gantt    : { axisFormat: '%m/%d/%Y' },
      sequence : { actorMargin: 50 }
    }, '.mermaid');
  }, window.mermaid);
}
</script>


  








  

  

</body>
</html>
