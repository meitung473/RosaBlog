<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>健忘雜記</title>
  
  <subtitle>紀錄學習與生活</subtitle>
  <link href="https://blog.rosa.tw/atom.xml" rel="self"/>
  
  <link href="https://blog.rosa.tw/"/>
  <updated>2022-06-22T04:45:11.939Z</updated>
  <id>https://blog.rosa.tw/</id>
  
  <author>
    <name>Rosa Hong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>筆記 | JavaScript - fetch 獲取遠端資料</title>
    <link href="https://blog.rosa.tw/JavaScript/JavaScript-fetch/"/>
    <id>https://blog.rosa.tw/JavaScript/JavaScript-fetch/</id>
    <published>2022-06-22T04:45:11.000Z</published>
    <updated>2022-06-22T04:45:11.939Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>想要獲取遠端的資料可以使用 AJAX ，在 ES6 之前大多會使用 JQuery 的 <code>$.ajax</code>  或者原生的 XHR，而在 HTML5 則提供 fetch 使用，更多時候會使用 axios 套件。<br>本篇記錄 fetch 的使用方式與常見的使用誤區。</p><span id="more"></span><h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><p>fetch 是 HTML5 原生獲取遠端的方式，其操作也十分簡單</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>obj<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 第二個參數為 options</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>沒有 options 的物件，只有網址的話是 <code>GET</code>。<br>fetch 回傳的是一個 Promise 物件，Promise 簡單來說是 <strong>處理非同步操作的特殊物件</strong>，有關於 Promise 之後會再補充。</p><h3 id="then-amp-catch"><a href="#then-amp-catch" class="headerlink" title="then &amp; catch"></a>then &amp; catch</h3><p>如果要拿到回傳的 response ，可以透過 <code>then</code>。要接 .then 前面的物件必要類型為 Promise，而 <code>fetch()</code> 回傳的就是一個 Promise 物件。  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> endPoint <span class="token operator">=</span> <span class="token string">'https://restcountries.com/v3.1/name/Taiwan'</span><span class="token function">fetch</span><span class="token punctuation">(</span>endPoint<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>是 <code>fetch().then</code> 而不是 <strong>fetch.then</strong>，是 fetch 這個函式裡面回傳 Promise</p></blockquote><p>then 接收的參數是 Promise 中 resolve 或是 reject 的函式運行的結果，通常是 resolve，如果是 reject 則會用 <code>.catch</code> 來作錯誤處理。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span>endPoint<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>會被丟進 catch 處理的 err 並不是像 XHR status 404 或 500 這類的，而是可能網路連線錯誤或者網址有誤導致不能發出 request 。</p><h3 id="HTTP-狀態碼處理-Response-status-amp-Response-ok"><a href="#HTTP-狀態碼處理-Response-status-amp-Response-ok" class="headerlink" title="HTTP 狀態碼處理 Response.status &amp;  Response.ok"></a>HTTP 狀態碼處理 Response.status &amp;  Response.ok</h3><p>只要是 HTTP 狀態碼 400 以上的我們通常會在 XHR 做錯誤處理</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">xhr<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是 fetch 不管狀態碼多少，只要有正確的發出請求後回傳的 response 都會進入 resolve ，如果要處理像 onerror 的錯誤可以透過 .then 中 response 的 status 或 ok。</p><ul><li>response.status : 回傳結果的 HTTP code<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span>endPoint<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token comment">// 200 代表成功</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>response.ok : 回傳 boolean ，如果 HTTP code 在 200~299 就回傳 true<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span>endPoint<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="Response-text-amp-json"><a href="#Response-text-amp-json" class="headerlink" title="Response.text() &amp; .json()"></a>Response.text() &amp; .json()</h3><p>可以將 response 解析成想要的形式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span>endPoint<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// return response.json() 兩者擇一</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>.text()</code> : 直接印出文字</li><li><code>.json()</code> : 自動幫我們解析 json 格式的資料</li></ul><p>其他種類的格式 : </p><ul><li><code>.blob()</code>：把資料轉成Blob物件</li><li> <code>.formData()</code>：把資料轉成FormData物件</li><li> <code>.arrayBuffer()</code>：把資料轉成二進制數組</li></ul><blockquote><p>這些方法 <strong>只能擇一</strong>，一但被解析過就不能重複再使用其他的函式解析了。</p></blockquote><h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><p>POST 也很簡單，跟 <code>$.ajax()</code> 的操作很像</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 第二個參數可以攜帶 header 、body 或 Http 等資訊</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'Rosa'</span><span class="token punctuation">&#125;</span><span class="token function">fetch</span><span class="token punctuation">(</span>endPoint<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>  body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>  headers<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/json'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>fetch 的 options 還有包含其他常見的 HTTP 處理，<br>在 body 中如果我們要上傳的格式是 JSON 檔，記得要將內容轉換成 JSON 格式。</p><blockquote><p><strong>GET 與 HEAD 是沒有 body 的</strong></p></blockquote><h2 id="fetch-的-Headers"><a href="#fetch-的-Headers" class="headerlink" title="fetch 的 Headers"></a>fetch 的 Headers</h2><p>以往在 XHR 要加上 Header </p><pre class="line-numbers language-js" data-language="js"><code class="language-js">XMLHttpRequest<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span>header<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 fetch 要加上 Header，可以直接加，或者 new 出一個 Header 容器來放置所需的內容。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 直接使用 headers</span><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>headers<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token comment">//...</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//透過實例出一個 Headers</span><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>headers<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token comment">//...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content Type"></a>Content Type</h3><p>表單 或是 JSON 格式資料</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">//JSON</span>'Content-Type'<span class="token operator">:</span> 'application/json'<span class="token comment">// 表單</span>'Content-Type'<span class="token operator">:</span> 'application/x-www-form-urlencoded' <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="credentials"><a href="#credentials" class="headerlink" title="credentials"></a>credentials</h3><p>預設上不會自動帶上或接收任何 cookies，如果網站依賴 session 會導致請求回傳未經認證，想把 cookies 一起帶上，要加 </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>credentials<span class="token operator">:</span> <span class="token string">'include'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="對-mode-的誤解"><a href="#對-mode-的誤解" class="headerlink" title="對 mode 的誤解"></a>對 mode 的誤解</h2><p>發送 request 可能會遇到 CORS 的限制，fetch 中mode 提供 <code>&#39;no-cors&#39;</code> 的方法，乍看之下會以為能突破 CORS 限制，既不會跳出錯誤 (不會跳到 .catch)，也能發出 request ，但 <strong>response 的 status 是 0 ，body 是空的</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>method<span class="token operator">:</span><span class="token string">'POST'</span><span class="token punctuation">,</span>headers<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'Content-Type'</span><span class="token operator">:</span><span class="token string">'application/json'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'Rosa'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mode <span class="token operator">:</span> <span class="token string">'no-cors'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>麻瓜翻譯機 :<br>不會回傳錯誤，也不會突破 CORS 的限制<br>避免發生錯誤，硬要丟出一個 request ，還你一個安心 response，裡面包含沒東西的 body 以及 status 為 0 。</p></blockquote><p>CORS 的限制是後端要解決，前端無法直接實現掛跨 CORS。</p><h2 id="為什麼-XMLHttpRequest-還是存在"><a href="#為什麼-XMLHttpRequest-還是存在" class="headerlink" title="為什麼 XMLHttpRequest 還是存在 ?"></a>為什麼 XMLHttpRequest 還是存在 ?</h2><p>我們都知道 XHR 寫起來有點囉嗦，在 fetch 問世之後，除了支援舊的瀏覽器會使用到 XHR，現代開發大多還是使用 fetch，但是 XMLHttpRequest 並沒有被廢棄，因為 fetch 還是有些功能是無法做到的。</p><p>**fetch 做不到 : ** </p><ol><li>上傳進度追蹤，fetch 必須搭配其他的 API 才能做到，</li><li>錯誤的回應處理<br> fetch 不管 HTTP 404 還是 500 ，也還是會 resolve，代表 <strong>你確實有送出 request</strong>，<code>.catch</code> 會抓到的錯誤只會是 <strong>網路錯誤或其他會中斷 request 的情況</strong>。對於錯誤的處理不是那麼直覺。</li><li>中斷  (absort) fetch<br> 目前沒有直接中斷 fetch (Promise) 的方法，不像 XHR 提供 <code>.absort()</code>，但是 WebAPIs 有提供 <a href="https://developer.mozilla.org/zh-TW/docs/Web/API/AbortController#browser_compatibility">AbortController</a> 可以讓 fetch 做到中斷，目前為實驗性(?)<br> <a href="https://mdn.github.io/dom-examples/abort-api/">MDN 提供的範例</a>，讓你突然不想看影片的時候，停止發出 request。</li><li>逾時處理 (timeout)<br> XHR 逾期的時候可以暫停發出請求，第三點也提到 fetch 因為沒有中斷的功能，無法做到。</li></ol><h2 id="補充-幾種發-request-的方法"><a href="#補充-幾種發-request-的方法" class="headerlink" title="補充 : 幾種發 request 的方法"></a>補充 : 幾種發 request 的方法</h2><p>以下都會使用 GET 為例</p><ol><li>XHR <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>state<span class="token operator">>=</span><span class="token number">200</span> <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span>state <span class="token operator">&lt;=</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>JQuery <pre class="line-numbers language-js" data-language="js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>method <span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>url <span class="token operator">:</span> url<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>fetch <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>axios <pre class="line-numbers language-js" data-language="js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>在我學習 JavaScript 這段期間，講到遠端取資料，很多教學並不會提到 fetch 或是 XMLHttpRequest，反而是叫你直接使用 axios，畢竟重新造輪子是很麻煩的 🥴，不過 fetch 無疑的是會越來越完善，不論是用何者工具或手法必有一定誕生的理由，了解原理後開發都可以更得心應手。 </p><p>我蠻喜歡<a href="https://www.ithome.com.tw/voice/121435">良葛格 下的這番結論</a></p><blockquote><p>舊東西誕生在舊的時代，適時地解決了當時的問題，而後從中累積了不少的使用經驗，因而誕生了新的技術、概念或規範，急著預言舊東西將會逝去，並不會讓開發者看起來更為耀眼，只會讓開發者看不清楚新東西的本質罷了。</p></blockquote><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li>從 fetch 解決什麼問題來看 : <a href="https://www.ithome.com.tw/voice/121435">從XHR到Fetch | iThome</a></li><li>Huli 大的 fetch 系列影片  <ul><li><a href="https://youtu.be/_8cLWMAQe3A">Fetch 與 Promise 補充系列（一）：初探 Fetch</a>  </li><li><a href="https://youtu.be/Ovv9tPhiW_0">Fetch 與 Promise 補充系列（二）：fetch 的 POST 與錯誤處理</a>  </li><li><a href="https://youtu.be/5A9ogWY7J7w">Fetch 與 Promise 補充系列（三）：fetch 的使用注意事項</a>  </li></ul></li><li>XHR v.s fetch，單純只是好奇查詢 XD <a href="https://blog.openreplay.com/ajax-battle-xmlhttprequest-vs-the-fetch-api">Ajax Battle: XMLHttpRequest vs the Fetch API </a></li><li><a href="https://zh.javascript.info/fetch">Fetch</a></li><li>很推的詳細文字版學習 : <a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/ajax_fetch.html">AJAX與Fetch API · 從ES6開始的JavaScript學習生活 (gitbooks.io)</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;想要獲取遠端的資料可以使用 AJAX ，在 ES6 之前大多會使用 JQuery 的 &lt;code&gt;$.ajax&lt;/code&gt;  或者原生的 XHR，而在 HTML5 則提供 fetch 使用，更多時候會使用 axios 套件。&lt;br&gt;本篇記錄 fetch 的使用方式與常見的使用誤區。&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>筆記 | JavaScript - Event Loop 事件循環 (I)</title>
    <link href="https://blog.rosa.tw/JavaScript/JavaScript-Event-Loop-01/"/>
    <id>https://blog.rosa.tw/JavaScript/JavaScript-Event-Loop-01/</id>
    <published>2022-06-17T16:54:45.000Z</published>
    <updated>2022-06-18T13:51:43.692Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 JavaScript 中，非同步的操作是很常見的，舉凡滑鼠事件、發出請求獲取資料…等，反過來問，如果這些操作是 <strong>同步</strong> 的，你可能操作後，畫面就像被卡住了，要等到目前的程式執行完畢才能繼續瀏覽。</p><p>Event Loop 的概念如何幫我們了解這件事，具體怎麼做呢 ? 本篇主要是幫助我自己釐清 Event Loop 的概念。</p><span id="more"></span><h2 id="為什麼會有-Event-Loop"><a href="#為什麼會有-Event-Loop" class="headerlink" title="為什麼會有 Event Loop ?"></a>為什麼會有 Event Loop ?</h2><p>JS 的語言特性是</p><ol><li>Single Thread (單線程)</li><li>Synchronous (同步)</li></ol><p>有時候語意上很令人誤解，同步 <strong>並不是同時做很多事</strong>，而是你只能一次做一件事。那為什麼我們可以在 <strong>瀏覽器</strong> 中操作按鈕獲取資料的同時又能做別的事 ?    </p><p>沒錯，特別指出 <strong>瀏覽器</strong>，因為在不同的執行環境下，才能讓我們執行非同步的操作。(node 也是一種 JavaScript 執行環境，其中也有提供非同步的 API 來操作)</p><p>JavaScript 在 Runtime (執行環境) 是同步的，而是瀏覽器提供 Web APIs 讓我們透過 Event Loop 搭配非同步操作，才能”同時”處理很多事。</p><h3 id="關於-Event-Loop-的名詞"><a href="#關於-Event-Loop-的名詞" class="headerlink" title="關於 Event Loop 的名詞"></a>關於 Event Loop 的名詞</h3><h4 id="Stack-堆疊"><a href="#Stack-堆疊" class="headerlink" title="Stack (堆疊)"></a>Stack (堆疊)</h4><p>Stack 是資料結構的一種，遵守 LIFO (Last In,First Out)。</p><p>JavaScript 中的 Call Stack 會記錄目前執行到程式的部分，因為 JavaScript 是 Single Thread (單線程) ，只會有一個 Call Stack。</p><p><strong>那 Call Stack 怎麼運作呢 ?</strong><br>當執行某個函式，會將目前執行的函式放在 Stack 的最上層，如果函式執行 <code>return</code> 就會從 Stack 最上方抽離。</p><p><strong>範例</strong>  </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跟著程式走 :  </p><ol><li>執行 c() ，把 c() 放入 Call Stack 中 1</li></ol><table><thead><tr><th>order</th><th>stack</th></tr></thead><tbody><tr><td>1</td><td>c () <strong>(now)</strong></td></tr></tbody></table><ol start="2"><li>印出 ‘c’，接著執行 b()，把 b() 放入 Call Stack 中   </li></ol><table><thead><tr><th>order</th><th>stack</th></tr></thead><tbody><tr><td>2</td><td>b() <strong>(now)</strong></td></tr><tr><td>1</td><td>c ()</td></tr></tbody></table><ol start="3"><li>印出 ‘b’，接著執行 a()，把 a() 放入 Call Stack 中   </li></ol><table><thead><tr><th>order</th><th>stack</th></tr></thead><tbody><tr><td>3</td><td>a() <strong>(now)</strong></td></tr><tr><td>2</td><td>b()</td></tr><tr><td>1</td><td>c ()</td></tr></tbody></table><ol start="4"><li>印出 ‘a’，a() 後面沒有程式碼，代表執行完畢，抽離 Stack 中  </li></ol><table><thead><tr><th>order</th><th>stack</th></tr></thead><tbody><tr><td><del>3</del></td><td><del>a() —-&gt; 抽離</del></td></tr><tr><td>2</td><td>b()</td></tr><tr><td>1</td><td>c ()</td></tr></tbody></table><ol start="5"><li>後面跟步驟 4 一樣，依序抽離，直到 c() 執行完畢，後面也沒有程式碼，最後 Call Stack 為空</li></ol><p>解釋了上面提及的 Stack <strong>Last In,First Out</strong> 的原因。  </p><h4 id="Task-Queue-任務佇列"><a href="#Task-Queue-任務佇列" class="headerlink" title="Task Queue (任務佇列)"></a>Task Queue (任務佇列)</h4><p>又稱作 Callback Queue，在 Web APIs 的 function 執行完後，把 callback (接著要執行的 function) 放到 Task Queue 等待。</p><p>👉<a href="http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4=">參考 Loupe 視覺化工具</a></p><p>在這個例子中，有 setTimeout 與 click 事件。當程式執行時 : </p><ol><li>Button 事件並沒有觸發，callback function 並不會執行，先放置到 Web APIs 等待</li><li>第 7 行排進 Call Stack ，印出 ‘Hi !’，執行完畢移出 Call Stack 外</li><li>setTimeOut 放置到 Web APIs 等待，並且開始算 5 秒鐘</li><li>第 13 行排進 Call Stack ，印出 ‘Welcome to loupe.’，執行完畢移出 Call Stack 外，到這邊靜態的程式碼都執行完畢，Call Stack 變成空的 。(同一時間 setTimeOut 還在跑秒數)</li><li>過了大概 5 秒鐘， 把第 9 行 setTimeOut 的 callback <code>timeout()</code> 放到 Callback Queue。</li><li><strong>此時 Call Stack 為空的，把 Task Queue 第一順位的 timeout() 搬到 Call Stack 執行</strong> (此時會看見橘色的旋轉鈕轉動，代表 Event Loop)</li><li>第 10 行排進 Call Stack ，印出 ‘Click the button’，timeout() 執行完畢，移出 Call Stack 外，Stack 又變成空的。</li></ol><p><strong>如果這時候按下按鈕呢 ?</strong>     </p><ol><li>按下後，onClick 事件執行，排進 Call Stack</li><li>執行第 2 行 setTimeout ，把 setTimeout 放置到 Web APIs 等待，並且開始算 2 秒鐘，onClick 事件執行完畢，移出 Call Stack 外，Stack 又變成空的</li><li>過了大概 2 秒鐘， 把 setTimeOut 的 callback <code>timer()</code> 放到 Callback Queue。</li><li><strong>此時 Call Stack 為空的，把 Task Queue 第一順位的 timer() 搬到 Call Stack 執行</strong></li><li>第 3 行排進 Call Stack，印出 ‘You click the button !’，執行完畢，移出 Call Stack 外，Stack 又變成空的。</li></ol><p>以上是一步步跟著的 Event Loop 的基本運作</p><h4 id="Blocking-阻塞"><a href="#Blocking-阻塞" class="headerlink" title="Blocking (阻塞)"></a>Blocking (阻塞)</h4><blockquote><p>那如果一直按按鈕呢 ? </p></blockquote><p>會發現一個個 onClick 事件的 callback 會被排進 Callback Queue 正在排隊等待，setTimeout 同時也在排隊，也要等待 onClick 事件結束，移出 Call Stack 外，透過 Event Loop 檢查 Call Stack 是否為空…(略)，重複一直執行。</p><p>這時候畫面就好像靜止了，setTimeout 的 2 秒也不是很精準，這就是發生了 Blocking 。</p><p>如果會以為同時印出，要回想 <strong>JavaScript 是同步的</strong> 這句話，執行的結果會是依序出現，不會一下子 “啪!” 全部出來。</p><h5 id="阻塞常見的例子-無限滾動載入資料"><a href="#阻塞常見的例子-無限滾動載入資料" class="headerlink" title="阻塞常見的例子 : 無限滾動載入資料"></a>阻塞常見的例子 : 無限滾動載入資料</h5><p>如果直接 : </p><pre class="line-numbers language-js" data-language="js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// Ajax 獲取資料</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>發現每一滑，都會觸發 callback 。就像你一直按按鈕，然後發出請求資料，排進 Web APIs 並且等待資料的 response ，再排進 Callback Queue，這時候會造成 Blocking。為避免一直觸發 scroll 事件，通常會搭配 lodash 的 debounce。</p><h3 id="小結-Event-Loop-是…"><a href="#小結-Event-Loop-是…" class="headerlink" title="小結 : Event Loop 是…"></a>小結 : Event Loop 是…</h3><p>一種機制，讓 JavaScript 可以同時做很多事</p><blockquote><p>當 Call Stack 為空時，把 Callback Queue 等待的 callback function 放進 Call Stack 來執行</p></blockquote><h2 id="幾個-Event-Loop-的例子"><a href="#幾個-Event-Loop-的例子" class="headerlink" title="幾個 Event Loop 的例子"></a>幾個 Event Loop 的例子</h2><p>來自 <a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ">What the heck is the event loop anyway?</a> 提到的範例  </p><h3 id="沒那麼精準的-setTimeout-與-setInterval"><a href="#沒那麼精準的-setTimeout-與-setInterval" class="headerlink" title="沒那麼精準的 setTimeout 與 setInterval"></a>沒那麼精準的 setTimeout 與 setInterval</h3><p>setTimeout 與 setInterval 都是 Web APIs ，會排進 Callback Queue 並且等到 Call Stack 為空的時候才執行。所以不能保證一定精準 x 秒後執行，但至少執行間距的最小秒數是 x 秒。</p><p><strong>常見的 0 秒 setTimeout</strong><br>乍看之下會以為 0 秒是立即執行，其實不然。  </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>結果是 <code>hi</code> 先印出，再印出 <code>hello</code>。</p><p>跟著步驟走 : </p><ol><li>setTimeout 放入 Web APIs 等待 0 秒後，放入 Task Queue 等待</li><li><code>console.log(&#39;hi&#39;)</code> 排進 Call Stack，並且執行</li><li>印出 ‘hi’ ，執行結束，移出 Stack 外</li><li>此時的 Call Stack 是空的，而且 Task Queue 的第一位是 setTimeout 的 callback ，排進 Call Stack</li><li>執行 <code>console.log(&#39;hello&#39;)</code> </li><li>印出 ‘hello’，執行結束，移出 Stack 外</li><li>程式碼執行結束</li></ol><p>這也是為什麼 setTimeout  沒那麼 精準的原因，因為必須等到  Call Stack 為空才會執行，導致中間可能會有誤差。</p><h3 id="多個-setTimeout"><a href="#多個-setTimeout" class="headerlink" title="多個 setTimeout"></a>多個 setTimeout</h3><p>遇到 setTimeout 常會問 console.log 的結果是 ?</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>每間隔 1 秒後，依序印出 ‘hi’ (1 秒 ‘hi’，隔 1 秒 ‘hi’…)</li><li>在 4 秒後，同時印出 <pre class="line-numbers language-none"><code class="language-none">4 (hi)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>至少間距 1 秒以後，一次印出 4 次的  <pre class="line-numbers language-js" data-language="js"><code class="language-js">hihihihi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>.<br>.<br>.<br>.<br>.<br>.<br>.<br>結果是<strong>至少間距 1 秒以後，一次印出 4 次的 hi</strong> 。經過 1 秒後即使已經排定到 Callback Queue，但是如果這時候 Call Stack 還不是空的，Queue 就會發生 Blocking 塞車在這裡等待，等到 Stack 空再依序印出 hi。如果 1 秒短到看不見，可以調成更久的時間。</li></ol><h3 id="同步與非同步的-callback"><a href="#同步與非同步的-callback" class="headerlink" title="同步與非同步的 callback"></a>同步與非同步的 callback</h3><p>我覺得這個例子很有意思，我們知道頻繁的呼叫 callback function 會造成 Blocking 的情形，但是 <strong>Call Stack 塞車或是 Callback Queue 塞車有什麼差別呢 ?</strong>  </p><p>透過這個例子我自己覺得更清楚知道有了 Event Loop 到底幫助在哪。 </p><p>在這裡的 callback function 有兩種</p><ol><li>在函式中呼叫另一個函式 (同步的 callback，都在 Call Stack 執行完畢) <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>像是跟 Web APIs 有關的，例 : click 事件後的 callback function 不會馬上執行，而是等到 Event Loop 後才會。<br> (非同步的 callback  差別在於，有排隊到 Callback Queue 再到 Call Stack) <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="同步的-callback-發生了什麼事"><a href="#同步的-callback-發生了什麼事" class="headerlink" title="同步的 callback 發生了什麼事"></a>同步的 callback 發生了什麼事</h4><p>如上面的第一個 callback 範例，我們必須等到 forEach 印完所有元素，才能做其他的事。這段時間造成 Call Stack 的 Blocking，導致畫面不能動作。</p><p>一般來說，瀏覽器會在每 16.6 毫秒的時候重新渲染畫面，但這時候 Call Stack 還在處理事情，導致畫面的解析被延遲，在影片中講者有開啟模擬畫面 render 的模擬，render 一直被占據紅線。</p><h4 id="改成非同步的-callback-差別在哪"><a href="#改成非同步的-callback-差別在哪" class="headerlink" title="改成非同步的 callback 差別在哪 ?"></a>改成非同步的 callback 差別在哪 ?</h4><p>上面不斷強調 Event Loop 是 Call Stack 為空時，才會把 Callback Queue 推上 Stack 執行。而在 Call Stack 空的期間，提供瀏覽器執行畫面重新渲染的機會，才不會因為忙碌導致卡住。</p><blockquote><p>簡單來說 : <strong>畫面渲染的優先度是高於 Callback Queue 的 callback function</strong> </p></blockquote><p>這也是為什麼在影片講者提到不要造成耗時的程式碼放在 Call Stack ，因為 Call Stack 賽車沒辦法重新渲染畫面。</p><p>也可以參考這篇 Jack 大的實作範例二，文章也有提到什麼時候會 rendering，助於瞭解整個流程<br>👉 <a href="https://yu-jack.github.io/2020/02/03/javascript-runtime-event-loop-browser/#%E7%AF%84%E4%BE%8B%E4%BA%8C">Event Loop 運行機制解析 - 瀏覽器篇 - 技術雜記 Technology Notes - Jack Yu | 傑克</a></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>目前提到瀏覽器的 Event Loop ，至於 Node 的 Event Loop 我還沒研究，未來會再研究補充。不過還有 mircoTask 與 macroTask 還沒補完 QQ，才能算是了解 Event Loop。</p><p>如果有誤麻煩請寄信告訴我，我會非常感謝</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="https://pjchender.blogspot.com/2017/08/javascript-learn-event-loop-stack-queue.html">[筆記] 理解 JavaScript 中的事件循環、堆疊、佇列和併發模式 | PJCHENder 那些沒告訴你的小細節</a></li><li>講解 Event Loop 的影片(有中文字幕) : <a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ">What the heck is the event loop anyway? | Philip Roberts | JSConf EU - YouTube</a></li><li>模擬 Event Loop 的網頁 : <a href="http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4=">latentflip.com</a></li><li><a href="https://yu-jack.github.io/2020/02/03/javascript-runtime-event-loop-browser/#%E7%AF%84%E4%BE%8B%E4%BA%8C">Event Loop 運行機制解析 - 瀏覽器篇 - 技術雜記 Technology Notes - Jack Yu | 傑克</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在 JavaScript 中，非同步的操作是很常見的，舉凡滑鼠事件、發出請求獲取資料…等，反過來問，如果這些操作是 &lt;strong&gt;同步&lt;/strong&gt; 的，你可能操作後，畫面就像被卡住了，要等到目前的程式執行完畢才能繼續瀏覽。&lt;/p&gt;
&lt;p&gt;Event Loop 的概念如何幫我們了解這件事，具體怎麼做呢 ? 本篇主要是幫助我自己釐清 Event Loop 的概念。&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>筆記 | JavaScript - 運算子 ?. 與 ??</title>
    <link href="https://blog.rosa.tw/JavaScript/JavaScript-null-undefined-operator/"/>
    <id>https://blog.rosa.tw/JavaScript/JavaScript-null-undefined-operator/</id>
    <published>2022-06-15T06:31:13.000Z</published>
    <updated>2022-06-18T13:51:40.151Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>對於 undefined 或是 null 的處理，我比較常使用 <code>||</code> (OR) 或是 <code>&amp;&amp;</code> (AND) 的寫法，找資料的時候很常看見 <code>??</code> 以及 <code>?.</code> 的寫法。實在是太好奇了，於是找了資料學習並且記錄下來 。  </p><span id="more"></span><h2 id="Optional-chaining"><a href="#Optional-chaining" class="headerlink" title="Optional chaining (?.)"></a>Optional chaining (?.)</h2><p>如果要查找 <strong>Object 的某項是否存在</strong>。我們可能會遍歷整個物件，但不用這麼麻煩，可以使用 <code>obj?.</code> ，如果物件是 null 或是 undefined 就做別的處理，在判斷值存在與否就很好用。</p><p>例 : </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token operator">?.</span>b<span class="token punctuation">)</span> <span class="token comment">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token punctuation">(</span>obj<span class="token operator">?.</span>b <span class="token operator">||</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>那在巢狀的結構中如果不用 <code>?.</code> ，必須先判斷前面的是不是存在  </p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token comment">// obj.a 存在才往下一步</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token operator">?.</span>b<span class="token punctuation">)</span> <span class="token comment">// 使用 ?.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>透過 (?.) 的方式 JavaScript 內部會透過隱式 (implicitly) 去確認 obj.a 是不是 null 或是 undefined，而不用顯式 (explicitly) 確認 obj.a 存不存在再去判斷下一個。   </p><h3 id="為什麼要有"><a href="#為什麼要有" class="headerlink" title="為什麼要有 (?.)"></a>為什麼要有 (?.)</h3><p>從一般的判斷來說，我們可以用 <code>||</code>  來決定值存不存在，因而來設定 <strong>預設值</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> product <span class="token operator">=</span><span class="token punctuation">&#123;</span>name <span class="token operator">:</span> <span class="token string">'Rosa'</span><span class="token punctuation">,</span>cost <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> total <span class="token operator">=</span> product<span class="token punctuation">.</span>cost <span class="token operator">||</span> <span class="token number">50</span> <span class="token comment">// ?</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>雖然 <code>||</code> 很好用，但是 <code>||</code> 會強制轉型，也就是 falsy 。數字 0 在判斷中會被轉為 false ，因此在上面的例子，數字 0 也會被判斷成 false 而預設成 50。  </p><p>可能會想說那判斷 <code>&gt;=0</code> 不就可以了 ? </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> total <span class="token operator">=</span> product<span class="token punctuation">.</span>cost <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> product<span class="token punctuation">.</span>cost <span class="token operator">:</span> <span class="token number">50</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>是可以，但會重複寫兩次 <code>product.cost</code>🥴。<br>BUT !!! 如果有 <strong>負數</strong> 呢 ? 總不能判斷不是 0 吧。<br>邏輯寫法就更綁手綁腳，但我們實際只確認是不是空值或是為賦值而已。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token punctuation">(</span>product<span class="token punctuation">.</span>cost <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> product<span class="token punctuation">.</span>cost <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">50</span> <span class="token operator">:</span> product<span class="token punctuation">.</span>cost<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因此 short-hand 的 <code>?.</code> 誕生，讓我們可以更快判斷。  </p><blockquote><p>IE 並不支援 <code>?.</code> ，如果要使用就是 <strong>依序判斷是否為 null 或是 undefined</strong></p></blockquote><h3 id="fuction-call-的"><a href="#fuction-call-的" class="headerlink" title="fuction call 的 (?.)"></a>fuction call 的 (?.)</h3><p>MDN 有提到是如果使用套件的 API，可以使用這種方式，可以確認 function 是否存在再執行，以免發生錯誤。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> sayhello <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">'hello'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sayhello<span class="token punctuation">.</span>hi<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// undefined ，不會發生錯誤</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sayhello<span class="token operator">?.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是如果 hi 本身並不是 function 就會發生 <code>is not a function</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">sayhello<span class="token punctuation">.</span>hi <span class="token operator">=</span> <span class="token string">'123'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sayhello<span class="token punctuation">.</span>hi<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// hi is not a function</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sayhello<span class="token operator">?.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 不會執行，因為上面出現錯誤</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>手動矯正 : </p><pre class="line-numbers language-js" data-language="js"><code class="language-js">sayhello<span class="token punctuation">.</span>hi <span class="token operator">=</span> <span class="token string">'123'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> sayhello<span class="token punctuation">.</span>hi<span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> sayhello<span class="token punctuation">.</span><span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> sayhello<span class="token punctuation">.</span>hi <span class="token punctuation">)</span> <span class="token comment">// '123'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sayhello<span class="token operator">?.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="什麼時候不應該用"><a href="#什麼時候不應該用" class="headerlink" title="什麼時候不應該用 (?.)"></a>什麼時候不應該用 (?.)</h3><ol><li>沒有被 <strong>宣告</strong> 的變數 : 對變數使用，會發生錯誤，因為 a 並不存在 (is not defined)，並不能這樣判斷。 <pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">?.</span>b<span class="token punctuation">)</span> <span class="token comment">// a is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>重新賦值 (left-hand side) : 不能這樣使用  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span>obj<span class="token operator">?.</span>a  <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment">// Invalid left-hand side in assignment</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>本身是 null  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">let</span> prop <span class="token operator">=</span> a<span class="token operator">?.</span><span class="token punctuation">[</span>x<span class="token operator">++</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// 0 並不會增加</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre> 這邊我有點不太了解，因此我試了空物件，x 遞增是  1 🤔，a 依然是空物件。後來我找到 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Operator_Precedence">運算子優先序 - JavaScript | MDN (mozilla.org)</a>，簡單來說 <strong>越高階的運算子會按照規則先執行</strong>。<br> <code>?.</code> 是 18 ,判斷是從左至右。a 已經是 null 了，所以不會執行。但是如果是空物件 <code>&#123;&#125;</code>，?. 會執行，不是 null 也不是 undefined。而<code>[ ]</code> 跟 <code>?.</code> 的層級相同，<code>[x]</code> 存在所以也會執行 ， <code>++</code> 也會執行。(這邊有點不太確定，待補)</li></ol><p>另一個有關優先序的常見例子是 <code>(function()&#123;var a = b = 5&#125;)()</code>，在非嚴格模式下， global 依序印出 b 跟 a ，b 是 5 ，a 是 is not defined。因為 <code>=</code> 是 right-to-left，也就是 b 在未宣告下賦值，<code>var  a</code> 因作用域的關係，自然在 global 是 not defined。</p><blockquote><p>MDN 也提到不應該過度使用 (?.)</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token operator">?.</span><span class="token punctuation">[</span><span class="token string">'Rosa'</span><span class="token punctuation">]</span><span class="token operator">?.</span>number <span class="token operator">?</span> obj<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token string">'Rosa'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">:</span> obj<span class="token operator">?.</span><span class="token punctuation">[</span><span class="token string">'Rosa'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 👎，因為在 obj.['Rosa'] 不存在就可以停止了，不用串串樂來確認</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token operator">?.</span><span class="token punctuation">[</span><span class="token string">'Rosa'</span><span class="token punctuation">]</span> <span class="token operator">?</span> obj<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token string">'Rosa'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// V</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Nullish-coalescing-operator"><a href="#Nullish-coalescing-operator" class="headerlink" title="Nullish coalescing operator (??)"></a>Nullish coalescing operator (??)</h2><p>可用來判斷 <strong>某個值是 null 或是 undefined</strong></p><h3 id="為什麼要有-1"><a href="#為什麼要有-1" class="headerlink" title="為什麼要有 (??)"></a>為什麼要有 (??)</h3><p>跟上面提到 <code>||</code> 的判斷是一樣的，如果是數字 0 會被強制轉型比較成 false，如果只是想檢查 null 或是 undefined，?? 就會比較方便 。</p><p><strong>舉例來說</strong></p><ol><li>先讓 input 有 0 或是有值</li><li>手動把 input 的值完全清空， <code>e.target.value</code> 會是 <strong>空字串</strong>，但是我不想讓空字串也通過<p class="codepen" data-height="300" data-default-tab="html,result" data-slug-hash="ZErwEBe" data-user="shan473" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;"><span>See the Pen <a href="https://codepen.io/shan473/pen/ZErwEBe">練習 ?? &amp; ?.</a> by YanShanHong (<a href="https://codepen.io/shan473">@shan473</a>)on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script></li></ol><h3 id="function-call-的"><a href="#function-call-的" class="headerlink" title="function call 的 (??)"></a>function call 的 (??)</h3><p>來自 MDN 的範例</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'A was called'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token constant">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'B was called'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token constant">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'C was called'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token string">"foo"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token constant">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token constant">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token constant">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根據 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Operator_Precedence">運算子優先序</a> </p><blockquote><p><code>??</code> 是 <code>left-hand side</code> ，也就是 <strong>從左邊判斷開始</strong>。</p></blockquote><p>其結果是  </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"A was called"</span><span class="token string">"C was called"</span><span class="token string">"foo"</span><span class="token string">"B was called"</span><span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跟著跑一次 :  </p><ol><li>A() 執行，印出 “A was called”</li><li>?? 的左邊是 undefined 所以決定執行 C()</li><li>C() 執行，印出 “C was called”</li><li>?? 左邊是 undefined 所以是 C() 回傳的結果 ‘foo’</li><li>B() 執行，印出 “B was called”</li><li>?? 的左邊是 false ，不符合 null 或是 undefined，C() 並不會執行</li><li>回傳 B() 的結果</li></ol><h3 id="不要直接用-OR-或-AND-amp-amp-一起使用"><a href="#不要直接用-OR-或-AND-amp-amp-一起使用" class="headerlink" title="不要直接用 OR (||) 或 AND (&amp;&amp;) 一起使用 (??)"></a>不要直接用 OR (||) 或 AND (&amp;&amp;) 一起使用 (??)</h3><p>OR 跟 AND 運算子的優先度比 <strong>??</strong> 還低，因此一起使用會發生錯誤，即使前面的結果是 null 或是 undefined</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">undefined</span> <span class="token operator">??</span> <span class="token string">"foo"</span><span class="token punctuation">)</span> <span class="token comment">// 錯誤</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">||</span> <span class="token keyword">undefined</span> <span class="token operator">??</span> <span class="token string">"foo"</span><span class="token punctuation">)</span> <span class="token comment">// 錯誤</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>想讓前面先判斷可以用 <code>()</code> grouping 包起來，grouping 的優先度是最高的，所以會先執行。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string">"foo"</span><span class="token punctuation">)</span> <span class="token comment">// 'foo'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">||</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string">"foo"</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Polyfills"><a href="#Polyfills" class="headerlink" title="Polyfills"></a>Polyfills</h2><p>如果瀏覽器不支援 (如 : IE)，可以使用 Polyfills，只要判斷 null 以及 undefined。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">(</span>somevalue <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">||</span> somevalue <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">?</span> somevalue <span class="token operator">?</span> DefaultValue<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><ol><li> <code>?.</code> 是中找尋 Object 類型 (object 、array 、function 等等)的值如果是 null 或是 undefined，結果是右邊的值。亦可用在 function call (<strong>object.method?.()</strong>) 上</li><li><code>?.</code> 不管存不存在，不能用來重新賦值</li><li><code>??</code> 是判斷任何值如果是 null 或是 undefined，結果是右邊的值</li><li><code>??</code> 不要直接跟 OR 或是 AND 一起使用，要用先把 ?? 左邊的括號起來先執行</li><li>兩種 IE 不支援 QQ</li></ol><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining">Optional chaining (?.) - JavaScript | MDN</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_Coalescing_Operator">Nullish coalescing operator (??) - JavaScript | MDN</a></li><li><a href="https://javascript.info/optional-chaining">Optional chaining ‘?.’ (javascript.info)</a></li><li><a href="https://javascript.info/nullish-coalescing-operator">Nullish coalescing operator ‘??’ (javascript.info)</a></li><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Operator_Precedence">運算子優先序 - JavaScript | MDN (mozilla.org)</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;對於 undefined 或是 null 的處理，我比較常使用 &lt;code&gt;||&lt;/code&gt; (OR) 或是 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; (AND) 的寫法，找資料的時候很常看見 &lt;code&gt;??&lt;/code&gt; 以及 &lt;code&gt;?.&lt;/code&gt; 的寫法。實在是太好奇了，於是找了資料學習並且記錄下來 。  &lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>紀錄 | Frontend Mentor 挑戰題 - Time tracking dashboard</title>
    <link href="https://blog.rosa.tw/Front-end/Practice-to-Master-01/"/>
    <id>https://blog.rosa.tw/Front-end/Practice-to-Master-01/</id>
    <published>2022-04-29T04:00:01.000Z</published>
    <updated>2022-06-18T13:49:59.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這是在 <a href="https://www.frontendmentor.io/solutions/responsive-reactjs-styledcomponent-BkFnvCvr9">frontend mentor 的挑戰題</a><br>使用 React + styled-components  </p><ul><li><a href="https://meitung473.github.io/time-tracking-dashboard-main/">網頁</a>  </li><li><a href="https://github.com/meitung473/time-tracking-dashboard-main">github repo</a></li></ul><p><img data-src="https://dsm01pap006files.storage.live.com/y4m9LQmpdiru45ZO2sTWfVBoSuRS1cfQoRCmHTFQxc-7aQWX0hkbq0r2q3tefJlGHA3SeXfA_G4CV5PHZIagjALPplvZ3s9MO6tpWyEEYyL2J7ep3EbhiNczfUybFUlxBTjvVQybnsXtFwrgoLmqEFJBftLbJvhzcipVkL-hdLjY23wEqHVpwrW0vNREUMTmt-y?width=1024&height=585&cropmode=none" alt="完成圖"></p><span id="more"></span><h2 id="專案建置"><a href="#專案建置" class="headerlink" title="專案建置"></a>專案建置</h2><ol><li><strong>create-react-app</strong> : 一鍵建立好環境</li><li><strong>eslint</strong> : 加上 <code>Protype</code> 來檢查類型</li></ol><h2 id="我的流程"><a href="#我的流程" class="headerlink" title="我的流程"></a>我的流程</h2><ol><li>Design - 照著參考圖刻出 figma 版型及元件</li><li>JS - 完成 filter 的功能，拿出想要的資料</li><li>JS - 照 figma 切出 component 架構</li><li>CSS - mobile 刻板</li><li>CSS - RWD</li><li>上傳至 frontend mentor + 撰寫 Readme </li></ol><h2 id="額外練習-figma-切版"><a href="#額外練習-figma-切版" class="headerlink" title="額外練習 figma : 切版"></a>額外練習 figma : 切版</h2><p>一邊練習切版以及 figma 的使用<br>本次學習 &amp; 練習    </p><ul><li>元件 <code>component</code> : </li><li>變體 <strong>variants</strong> : 用程式概念想有點像 obj  <code>key-value</code> pair，可透過先建立好的類似類型，再替換選項。<br>  常用的例子 : 有無圖案，實心空心，方向。<br>  figma 是 <code>[property,value]</code> 來替換。  <blockquote><p>obj 的 key 不能重複， <strong>figma 的 property 也是不能重複</strong>。<br>如果不在同一個 frame 裡的元件不能結為變體</p></blockquote></li><li><strong>auto layout</strong> : 有點像 css 的 flex</li><li><strong>asset</strong> : 將重複的物件作做成元件，放到元件庫</li><li>巢狀結構 : 用 <code>/</code> 斜線來代表類似的元件群組</li></ul><p>最後切出來的元件<br><img data-src="https://dsm01pap006files.storage.live.com/y4mZHL-B7h3iluUZzub-BxoLDbrZc2Wp43yRJd2NVsXDW2zIV5XhtSM4KNshxjCkPBfsHoSgqnK2Kdxg1pBBWw0T5RjD-TTXkiNZn69EENIX9dqbxu3K51pbNjKeNhyHJ1bpXSDwFX9c_cUoC8vv_UUaPUbmLmE9C2qcbYmNRl93CPWgVuKOBRb8U8crh2FSTTU?width=656&height=1024&cropmode=none" alt="Asset"></p><p>菜鳥設計稿 🥴，照著圖片檔慢慢切出來<br><img data-src="https://dsm01pap006files.storage.live.com/y4mwTdZBRAfGvMzTnynXGFrQ4yShvVgoGM-PJdXLOnF-3zi3OCyKeWiW1TYFmpurDs8l3lReNkOzMNTIDjoFCNdWNQbukzoR0iXkfmz9edOCJrqOrnH-aS2aT-17DZPd3W4cOL2lLovbNjta_rMsjlzeAgNDWQf458D4AxkOyiGYVlSHwfLTq1slPvuG8YDTHV4?width=1024&height=800&cropmode=none" alt="設計稿"><br>上半部都是變體的設定</p><h3 id="變體設定"><a href="#變體設定" class="headerlink" title="變體設定"></a>變體設定</h3><p>變體部分是透過 nested 的方式，從元件最小的部分到整塊卡片都是可以切換  </p><ol><li>卡片種類，我把每一種都先做樣板，可以直接替換卡片。<br> 發現用處不大 XD，因為卡片都只有一張…，替換順序倒是蠻有幫助的。</li><li>滑鼠移入 <code>:hover</code> active &amp; inactive。<br> 我直接做在 setting component 上</li><li>Profile 底下的時間節點切換，把 daily 、 weekly 等等的跟 setting 一樣分成 active 跟 inactive。</li><li>電腦版型  &amp; 手機版型 卡片，用處也不大。當時是想說如果多一種版型可以思考…</li><li>背景的 icon 切換，這是在做個別卡片原件快速切換用的而已</li></ol><p>在把上述的合併起來，在面板可以自由切換 😃<br>接下來就是進到寫程式的環節🥰  </p><h2 id="React-部分"><a href="#React-部分" class="headerlink" title="React 部分"></a>React 部分</h2><p>練習題較少用到使用到 React Hooks<br>大部分還是 CSS 居多<br>只有使用 <code>useState</code>、<code>useMemo</code> 而已</p><h3 id="svg-當作-component-匯入"><a href="#svg-當作-component-匯入" class="headerlink" title="svg 當作 component 匯入"></a>svg 當作 component 匯入</h3><p><a href="https://create-react-app.dev/docs/adding-images-fonts-and-files/">官方</a> 要引入圖片有兩種方式  </p><ol><li>當作 component 匯入 (svg)</li><li>直接匯入圖檔來源  </li></ol><p>圖檔是 svg ，這邊我採用 component 的方式，主要是想改變 hover 時的填色  </p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 當作元件匯入</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>ReactComponent <span class="token keyword">as</span> Play<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./images/icon-play.svg'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span><span class="token punctuation">&#123;</span><span class="token comment">/*作為元件使用*/</span><span class="token punctuation">&#125;</span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Play</span></span><span class="token punctuation">/></span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>關於第二點，使用 <code>src</code> 引入圖檔<br>因為 deploy 之後 <code>index.html</code> 的路徑無法對上，有的人會建議把圖檔放在 <code>public</code> 上，在透過相對路徑引入。<br>或者讓 webpack 幫我們透過 JavaScript module (file loader)來處理，不過要注意的是，路徑的起始點是 <code>./</code>，所以後續在 deploy 時要設定 <code>homepage</code> 來矯正路徑</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 這邊是相對路徑字串</span><span class="token keyword">import</span> play <span class="token keyword">from</span> <span class="token string">'./images/icon-play.svg'</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span><span class="token punctuation">&#123;</span><span class="token comment">/*作為路徑使用*/</span><span class="token punctuation">&#125;</span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>play<span class="token punctuation">&#125;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Play icon<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="從外部匯入的-Element-轉成正確的-React-component"><a href="#從外部匯入的-Element-轉成正確的-React-component" class="headerlink" title="從外部匯入的 Element 轉成正確的 React component"></a>從外部匯入的 Element 轉成正確的 React component</h3><p>這邊我需要找到對應的樣式跟 icon 圖，起初我是回傳 <code>[Icon[type], theme.primary[type]]</code><br>預想中是在 component 中要拿到 <code>&lt;Play/&gt;</code> 這樣的 svg as component<br>轉出來的是 component <code>&#123;Play&#125;</code> 這樣可以，看起來好像一般的值，我想改成 tag 的形式，加上 <code>&lt;&gt;</code> 反而變成  <code>React Element</code> 。<br>從<a href="https://github.com/facebook/react/issues/13445#issuecomment-414389398">官方的 issues 這篇</a> 有提到，是因為 <strong>格式錯誤</strong><br>加上 tag 的方法實際上變成這樣 <code>&lt;&lt;Play/&gt;/&gt;</code>，可以用 function 先把元件輸出再使用。    </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// svg as component</span><span class="token keyword">export</span> <span class="token keyword">const</span> Icon <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    Exercise<span class="token operator">:</span> <span class="token operator">&lt;</span>Exercise <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>    Play<span class="token operator">:</span> <span class="token operator">&lt;</span>Play <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 拿到該圖檔跟顏色</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">type2Style</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        type <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// React Element -> Component，把 React Component </span>    <span class="token keyword">const</span> <span class="token function-variable function">BgIcon</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Icon<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>BgIcon<span class="token punctuation">,</span> theme<span class="token punctuation">.</span>primary<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="資料轉化"><a href="#資料轉化" class="headerlink" title="資料轉化"></a>資料轉化</h3><p>這部分是想要熟悉如何去使用 Object &amp; Array 的 function<br>把自己想要的資料召喚出來，目前已知的是按鈕切換取得資料，<code>useState</code> 在 set 的時候做 re-render 讓我們可以看到資料改變後畫面也改變。</p><ul><li>Click Event<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 1. 觀察 timeframe 改變時設定的值</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>timeframe<span class="token punctuation">,</span> setTimeframe<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>        <span class="token function">Type2Data</span><span class="token punctuation">(</span>timetype<span class="token punctuation">.</span>daily<span class="token punctuation">,</span> data<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2. 點擊後改變 type</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>type<span class="token punctuation">,</span> setType<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>timetype<span class="token punctuation">.</span>daily<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3. 傳入 type 值</span>    <span class="token keyword">const</span> <span class="token function-variable function">clickhandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">setTimeframe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">Type2Data</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setType</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>theme<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TimerLayout</span></span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token punctuation">&#123;</span><span class="token comment">/* 4. 把 handler 當作 props 傳給元件的 button */</span><span class="token punctuation">&#125;</span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ProfileCard</span></span> <span class="token attr-name">clickhandler</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>clickhandler<span class="token punctuation">&#125;</span></span> <span class="token attr-name">type</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>type<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">                </span><span class="token punctuation">&#123;</span>timeframe<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> last<span class="token punctuation">,</span> title<span class="token punctuation">,</span> prev<span class="token punctuation">,</span> current <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TimeframeCard</span></span>                        <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span>                        <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> last<span class="token punctuation">,</span> title<span class="token punctuation">,</span> prev<span class="token punctuation">,</span> current <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span>                    <span class="token punctuation">/></span></span>                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">TimerLayout</span></span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>轉換資料的 function<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Type2Data</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 初始值是陣列</span>    <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1. 把官方給的 data.json 解構</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> title<span class="token punctuation">,</span> timeframes <span class="token punctuation">&#125;</span> <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token comment">// 2. 畫面上需要轉換 timeframe 的文字</span>        <span class="token keyword">let</span> type2text <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> timetype<span class="token punctuation">.</span>daily<span class="token operator">:</span>                type2text <span class="token operator">=</span> <span class="token string">"day"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> timetype<span class="token punctuation">.</span>weekly<span class="token operator">:</span>                type2text <span class="token operator">=</span> <span class="token string">"week"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> timetype<span class="token punctuation">.</span>monthly<span class="token operator">:</span>                type2text <span class="token operator">=</span> <span class="token string">"month"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 3. 把符合的 timeframe 資料抓出來，後續要透過 map 把資料印出來</span>        p<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            last<span class="token operator">:</span> type2text<span class="token punctuation">,</span>            title<span class="token punctuation">,</span>            prev<span class="token operator">:</span> timeframes<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span>previous<span class="token punctuation">,</span>            current<span class="token operator">:</span> timeframes<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span>current<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>搭拉 ! 當我按下按鈕，state 改變進行 re-render<br><img data-src="https://i.imgur.com/P9Aj0ae.gif" alt="切換 timeframe">  </li></ul><h3 id="useMemo-把資料記起來"><a href="#useMemo-把資料記起來" class="headerlink" title="useMemo : 把資料記起來"></a>useMemo : 把資料記起來</h3><p>由於我的圖片以及顏色是透過計算而來，而不是寫死的， 每次 state 改變時也會 re-render ，導致每次都重新計算一次😓。<br>但是 <strong>樣式內容是不變</strong> 的，所以用 <code>useMemo</code> 包起來，紀錄樣式資料  </p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">TimeframeCard</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> data <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> last<span class="token punctuation">,</span> title<span class="token punctuation">,</span> current<span class="token punctuation">,</span> prev <span class="token punctuation">&#125;</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token comment">// 避免 re-render 又跑一次</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>BgIcon<span class="token punctuation">,</span> BgColor<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">type2Style</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>title<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TimeframeCardContainer</span></span> <span class="token attr-name">bgcolor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>BgColor<span class="token punctuation">&#125;</span></span> <span class="token attr-name">br</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>br<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">BgIcon</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FrameBody</span></span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FrameHeader</span></span><span class="token punctuation">></span></span><span class="token plain-text">                    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FrameHeaderTitle</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>title<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">FrameHeaderTitle</span></span><span class="token punctuation">></span></span><span class="token plain-text">                    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Setting</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">FrameHeader</span></span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FrameContent</span></span><span class="token punctuation">></span></span><span class="token plain-text">                    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CurrentText</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>current<span class="token punctuation">&#125;</span><span class="token plain-text">hrs</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">CurrentText</span></span><span class="token punctuation">></span></span><span class="token plain-text">                    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">PrevText</span></span><span class="token punctuation">></span></span><span class="token plain-text">                        Last </span><span class="token punctuation">&#123;</span>last<span class="token punctuation">&#125;</span><span class="token plain-text"> - </span><span class="token punctuation">&#123;</span>prev<span class="token punctuation">&#125;</span><span class="token plain-text">hrs                    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">PrevText</span></span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">FrameContent</span></span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">FrameBody</span></span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">TimeframeCardContainer</span></span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>後來寫文時，我覺得這邊寫的不是很好，既然是固定的，我為什麼要透過計算來取得樣式呢🥴<br>回想當初在寫，多想到如果改成客製化卡片，樣式內容就會改變，以目前的練習題並沒有這個需求😅<br>也許可以作為之後的 :Todo </p><h3 id="Deploy-部屬網站"><a href="#Deploy-部屬網站" class="headerlink" title="Deploy : 部屬網站"></a>Deploy : 部屬網站</h3><p><code>package.json</code> 需要設定 homepage 將路徑重新設定，否則輸出的 build 裡面的 index.html 引入的東西會找不到。<br><a href="https://create-react-app.dev/docs/deployment/#building-for-relative-paths">Deployment 官方教學</a>  </p><ul><li>package.json <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"my-app"</span><span class="token punctuation">,</span>  <span class="token comment">// 我發布在網頁上的路徑</span><span class="token operator">+</span> <span class="token string">"homepage"</span><span class="token operator">:</span> <span class="token string">"https://meitung473.github.io/time-tracking-dashboard-main/"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h2><p>包含 styled-component 以及一些 CSS 遇到的問題  </p><h3 id="normalize-css"><a href="#normalize-css" class="headerlink" title="normalize.css"></a>normalize.css</h3><p>我記得在 create-react-app 使用 normalize 在 <code>index.css</code> 加上 :  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css">@import-normalize<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>結果 IDE 提示格式錯誤以外，感覺好像都沒作用<br><img data-src="https://dsm01pap006files.storage.live.com/y4muj1fnDJhMGuehE88QmzA1uezUw5o7ocb8_KQf52VuXLdBQFYupbRyS3943vlDwAYqGq1KtqHfS80RjlFnRRYsuOvLIUb1Nd-Rog1ThCib7FhPDbyqo_bYip_65arJPHfXKV5Q4g4iJGC1JO8kls0kAU8JQXlHFxFogThYvQFB2GRkhdoUH31i7XUKHkXADaH?width=1024&height=115&cropmode=none" alt="IDE 提示格式錯誤"><br>我是按照官方的 <a href="https://create-react-app.dev/docs/adding-css-reset/#browser-support">教學</a><br>打開 devtool 反而是多了 <code>where:</code> 的樣式，所以並不是沒有<br><img data-src="https://dsm01pap006files.storage.live.com/y4mzXONRr23Eb4GiE7hLxjSlL9TuG5SxD6Xhhcl5xYKY__SAR-WM9kUhCeYYOZQpf1O6AFdFl27BwQM1_6LlbadtlQvNV1T-VtH7aIhhR0MP35pOqAxyfMIjPgTVbN0UhbGShKwyy-LxhksBAcP-GSYnocw-tj-k3YF6zbeelM3Tn2MOfTm-p5cIGAwkqtW9xUl?width=1024&height=147&cropmode=none" alt="where:">    </p><p>我查到 <a href="https://stackoverflow.com/questions/56532121/normalize-css-does-not-fully-add-reset-to-react-app">這篇</a> 解釋為什麼 normalize.css 其實有不同份，如果在另外安裝 <a href="https://github.com/necolas/normalize.css">normalize.css</a> ，引入為什麼作用是因為 <strong>根本沒有指向到這版</strong>。    </p><p>目前的 React 是使用 <code>@csstool/normalize</code> 而不是 <code>necolas/normalize</code> 版的<br>關於這兩份的差別，<a href="https://github.com/csstools/normalize.css/issues/3">共同作者解釋</a> 是移除一些固定格式的設定像是 (<code>body&#123;margin:0&#125;</code>) ，以及兼顧瀏覽器的兼容性問題。 🤔  </p><p>另外我也查了一下 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:where">:where</a> 偽元素，為什麼 normalize 會使用這個。<br>以往在寫 CSS 必須注意權重的問題，而 <code>:where</code> 的權重是 0 ，不管設定的 CSS 權重後來的值都可以覆蓋過去， 相較 <code>:is()</code> 來的更適合設定預設值。<br>目前幾乎所有的瀏覽器都有支援，IE 因為今年六月要被淘汰了，就沒差了吧 🥴  </p><h3 id="styled-components-media-query"><a href="#styled-components-media-query" class="headerlink" title="styled-components @media query"></a>styled-components @media query</h3><p>在之前學習是寫成個別一行，再一個個 import 到需要改動的元件裡面做修改     </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> breakpoint_md <span class="token operator">=</span> <span class="token string">"@media screen and (min-width: 768px)"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不過都 CSS-in-JS 了，不如把它變得更加程式化一點。<br>我在寫 styled-component 時只把他想成 <strong>會產出一大串的文字</strong>，想要做到 sass 的 @mixin 功能，改成寫 function 回傳想要的字串。<br>所以這次的目標是 : </p><blockquote><p>object 透過 key 拿到 <code>@media</code> 的字串，例 breakpoint.md 對應 min-width : 768px</p></blockquote><p>參考 : <a href="https://dev.to/cagatayunal/how-to-use-css-media-query-breakpoint-in-styled-components-9of">How to use CSS Media Query Breakpoint in Styled-Components</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 先寫好對應的尺寸</span><span class="token keyword">export</span> <span class="token keyword">const</span> sizes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    xxl<span class="token operator">:</span> <span class="token number">1440</span><span class="token punctuation">,</span>    xl<span class="token operator">:</span> <span class="token number">996</span><span class="token punctuation">,</span>    md<span class="token operator">:</span> <span class="token number">768</span><span class="token punctuation">,</span>    sm<span class="token operator">:</span> <span class="token number">576</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// @media 固定的格式，從手機往上寫 &#123;size&#125; 拿來做替換</span><span class="token keyword">const</span> prefix <span class="token operator">=</span> <span class="token string">"@media screen and (min-width: &#123;size&#125;px)"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> br <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>sizes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token comment">/* 轉換過後的 sizes : ['xxl','xl',...]我們只要&#123;n1 : sizes[n1]n2 : sizes[n2]...&#125;*/</span><span class="token comment">// 用取代的方式</span>    p<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> prefix<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"&#123;size&#125;"</span><span class="token punctuation">,</span> sizes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不想這麼麻煩也可以直接透過 template 帶值<br><code>@media screen and (min-width: $&#123;sizes[n]&#125;px)</code><br>在 styled-component 內我們就可以直接使用  </p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> br <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../Device"</span><span class="token punctuation">;</span><span class="token keyword">const</span> FrameBody <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>InfoCard<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&#123;/* 直接寫 */&#125;    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>br<span class="token punctuation">.</span>md<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> &#123;        padding: 1em 1.2em;        cursor: pointer;        transition: filter 0.3s ease-out;    &#125;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這樣做 RWD 就可以比較簡單了🥰  </p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>每次練習都會覺得自己又更進步一些<br>重新思考自己的製作流程<br>最後覺得 CSS 的部份有點雜，可以抽出相同的樣式再重構<br>後續有時間再修改  </p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol><li><a href="https://dev.to/cagatayunal/how-to-use-css-media-query-breakpoint-in-styled-components-9of">How to use CSS Media Query Breakpoint in Styled-Components</a></li><li><a href="https://airbnb.io/javascript/react/#class-vs-reactcreateclass-vs-stateless">Airbnb JavaScript Style Guide</a></li><li><a href="https://github.com/facebook/react/issues/13445">expected a string (for built-in components) or a class/function</a></li><li><a href="https://create-react-app.dev/">Create React App</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;這是在 &lt;a href=&quot;https://www.frontendmentor.io/solutions/responsive-reactjs-styledcomponent-BkFnvCvr9&quot;&gt;frontend mentor 的挑戰題&lt;/a&gt;&lt;br&gt;使用 React + styled-components  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://meitung473.github.io/time-tracking-dashboard-main/&quot;&gt;網頁&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/meitung473/time-tracking-dashboard-main&quot;&gt;github repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://dsm01pap006files.storage.live.com/y4m9LQmpdiru45ZO2sTWfVBoSuRS1cfQoRCmHTFQxc-7aQWX0hkbq0r2q3tefJlGHA3SeXfA_G4CV5PHZIagjALPplvZ3s9MO6tpWyEEYyL2J7ep3EbhiNczfUybFUlxBTjvVQybnsXtFwrgoLmqEFJBftLbJvhzcipVkL-hdLjY23wEqHVpwrW0vNREUMTmt-y?width=1024&amp;height=585&amp;cropmode=none&quot; alt=&quot;完成圖&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Front-end" scheme="https://blog.rosa.tw/categories/Front-end/"/>
    
    
    <category term="React" scheme="https://blog.rosa.tw/tags/React/"/>
    
    <category term="styled-components" scheme="https://blog.rosa.tw/tags/styled-components/"/>
    
  </entry>
  
  <entry>
    <title>筆記 | JavaScript - Prototype 物件導向 (IV) 原型的繼承</title>
    <link href="https://blog.rosa.tw/JavaScript/JavaScript-Object-oriented-programming-04/"/>
    <id>https://blog.rosa.tw/JavaScript/JavaScript-Object-oriented-programming-04/</id>
    <published>2022-04-19T04:33:33.000Z</published>
    <updated>2022-06-18T13:50:34.253Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇知道原型與原型鏈的內容<br>如果我們要讓東西繼承，除了透過 new 建立物件直接幫我們繼承之外<br>還有 <code>Object.setPrototypeOf</code> 以及 <code>Object.create()</code>  </p><span id="more"></span>  <h2 id="原型如何繼承"><a href="#原型如何繼承" class="headerlink" title="原型如何繼承 ?"></a>原型如何繼承 ?</h2><ol><li><code>Object.setPrototypeOf(&lt;繼承者&gt;,&lt;被繼承者&gt;)</code> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span> person2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><code>Object.create(proto,屬性物件)</code> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Person 物件</span><span class="token keyword">var</span> Person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'Default_Name'</span><span class="token punctuation">,</span>  <span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Hi, I'm "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 透過 Object.create() 將 Person 作為原型物件來建立一個新的物件</span><span class="token keyword">var</span> p <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 沒有 this.name</span>p<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// "Hi, I'm Default_Name"</span>p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Rosa'</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// "Hi, I'm Rosa"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="Object-setPrototypeOf"><a href="#Object-setPrototypeOf" class="headerlink" title="Object.setPrototypeOf()"></a>Object.setPrototypeOf()</h2><p>上一篇我們提到 <code>[[Prototype]]</code> 是隱藏屬性<br>ES5 之前是使用 <code>__proto__</code>，ES6 新增 <code>getPrototypeOf()</code> 與 <code>setPrototypeOf()</code> 讓我們可以直接改變物件的 prototype    </p><h3 id="in-某屬性是否可以透過這個物件存取"><a href="#in-某屬性是否可以透過這個物件存取" class="headerlink" title="in  : 某屬性是否可以透過這個物件存取"></a>in  : 某屬性是否可以透過這個物件存取</h3><p>我們知道物件的屬性或方法不一定是本身物件的<br>而是來自原型鏈往上找到的<br>如此一來，建構物件就能使用原型鏈上的屬性<br>那怎麼確定能存取到呢 ?<br>沒錯，就是透過 <code>in</code> !  </p><blockquote><p>屬性名稱必須是「字串」   </p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person2 <span class="token operator">=</span><span class="token punctuation">&#123;</span>b <span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">,</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"a"</span> <span class="token keyword">in</span> person1<span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"b"</span> <span class="token keyword">in</span> person1<span class="token punctuation">)</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要讓 person1 也能讀取到 b 就必須改變其原型<br>可以透過 <code>Object.setPrototypeOf()</code> 直接改變<br>不過建議非必要不要直接改變物件的 prototype  </p><h3 id="Object-setPrototypeOf-1"><a href="#Object-setPrototypeOf-1" class="headerlink" title="Object.setPrototypeOf()"></a>Object.setPrototypeOf()</h3><p><code>Object.setPrototypeOf(&lt;繼承者&gt;,&lt;被繼承者原型&gt;)</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span>person2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>JavaScript 的原型物件是物件內部屬性，<strong>無法直接存取</strong> (通常標示為 <code>[[Prototype]]</code>)，但是可以透過 setPrototypeOf 指定物件之間的原型關係</p><blockquote><p>原型繼承的規則裡，<strong>同一個物件無法指定兩種原型物件</strong>。</p></blockquote><p>試著去存取「不存在」的屬性時，那麼 JavaScript 就會往它的 <code>[[Prototype]]</code> 原型物件去尋找 (prototype chain)</p><p>讓 <code>person1</code> 同時有 b 也有 c 屬性</p><blockquote><p>讓 b 去繼承 c，a 再繼承 b，就能同時擁有 b 與 c</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person2 <span class="token operator">=</span><span class="token punctuation">&#123;</span>b <span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>c <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>person2<span class="token punctuation">,</span>person3<span class="token punctuation">)</span>Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span>person2<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token comment">// 5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"c"</span> <span class="token keyword">in</span> person1<span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="hasOwnProperty-是否為物件本身的方法或屬性"><a href="#hasOwnProperty-是否為物件本身的方法或屬性" class="headerlink" title="hasOwnProperty() 是否為物件本身的方法或屬性"></a>hasOwnProperty() 是否為物件本身的方法或屬性</h3><p>有些屬性與方法是來自 prototype 繼承的<br>要確定是不是屬於自己本身用 <code>hasOwnProperty</code><br><code>objself.hasOwnProperty(&lt;property&gt;)</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person2 <span class="token operator">=</span><span class="token punctuation">&#123;</span>b <span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">,</span><span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span>person2<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token comment">// 2</span><span class="token comment">// 屬性 b 並非建立於 person1 物件中，而是透過繼承的方式取得的 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h2><p>新建物件後的 <code>[[Prototype]]</code> 就會是我們所指定的那個原型物件。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> rosa <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">creat</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rosa<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// constructor 的 prototype</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也可以是 <code>null</code>，這樣就會變成非常一般的物件 (“Very plain” objects)<br>不帶有任何 prototype 甚至是 <code>Object.prototype</code> </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//Error</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment">// false</span>conosle<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">//非常空的物件</span>obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">// 還是可以給予屬性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// &#123;a:2&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// ['a']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但並不代表 Object 有關的方法都不能呼叫<br>而是要看方法是否在 prototype 裡<br>像是 Object.keys 依然可以使用</p><h3 id="造一個-Object-create"><a href="#造一個-Object-create" class="headerlink" title="造一個 Object.create()"></a>造一個 Object.create()</h3><p><code>Object.create()</code> 簡單實作</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function-variable function">create</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">proto</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> proto<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>透過一個封裝過的建構式建構出來的物件，並把 <code>prototype</code> 指向作為參數的 <code>proto</code>。</p><h2 id="Object-create-v-s-new"><a href="#Object-create-v-s-new" class="headerlink" title="Object.create() v.s new ?"></a>Object.create() v.s new ?</h2><p>兩個都是建立物件，哪裡不一樣 ?   </p><blockquote><p><code>new</code> operator 跟 <code>Object.create</code> 的差別在於會不會執行 constructor</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 建立的時候，也印出 hi</span><span class="token keyword">let</span> b <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span> <span class="token comment">// 指是建立了而已</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="https://zh.javascript.info/prototype-methods#very-plain">原型方法，没有 <strong>proto</strong> 的对象</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10194356">重新認識 JavaScript: Day 25 原型與繼承</a></li><li><a href="https://medium.com/%E6%89%8B%E5%AF%AB%E7%AD%86%E8%A8%98/javascript-new-operator-implementation-8c0d15f2b899">new operator — JavaScript | 為了瞭解原理，那就來實作一個 new 吧！</a></li><li><a href="https://blog.csdn.net/blueblueskyhua/article/details/73135938">你不知道的javascript之Object.create 和new区别</a> </li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上一篇知道原型與原型鏈的內容&lt;br&gt;如果我們要讓東西繼承，除了透過 new 建立物件直接幫我們繼承之外&lt;br&gt;還有 &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; 以及 &lt;code&gt;Object.create()&lt;/code&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>筆記 | JavaScript - Prototype 物件導向 (III) 原型 &amp; 原型鏈</title>
    <link href="https://blog.rosa.tw/JavaScript/JavaScript-Object-oriented-programming-03/"/>
    <id>https://blog.rosa.tw/JavaScript/JavaScript-Object-oriented-programming-03/</id>
    <published>2022-04-19T04:33:30.000Z</published>
    <updated>2022-06-18T13:50:37.233Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JavaScript 的核心就在原型 !<br>原型使得物件都能使用在原型鏈上的屬性及方法<br>本身物件也可以再擴充<br>透過本篇了解原型的使用方法  </p><span id="more"></span><h2 id="什麼是-prototype"><a href="#什麼是-prototype" class="headerlink" title="什麼是 prototype ?"></a>什麼是 prototype ?</h2><p><img data-src="https://dsm01pap006files.storage.live.com/y4mZUP0lakeV0ZyTOBA3FOhGoj0nLq4_-h6RClQix2hTtsj-YL9kg-RwmOfya_emwZ1jekhk9jIrt-JrTQQfyiPEwOfYlVWWxlFZHdaAgkONuvg-kxkJgmo67BaKWfhEePd-7sT21E5ITCGSdla3HTIiK8NillkQBfzy2mTCrs5ZtISAl-h5eV-JiE6ySo075Ow?width=946&height=563&cropmode=none" alt="prototype"><br>參考圖 : <a href="https://ithelp.ithome.com.tw/articles/10194356">重新認識 JavaScript: Day 25 原型與繼承</a></p><p>從 01 篇知道 prototype 可以讓不同的物件共享原型的同一個方法或屬性<br>prototype 就像是從 function 產生的集裝箱<br>讓 function 建立出來的物件都可以拿到同樣的東西  </p><blockquote><p><strong>函式也是物件</strong>，所以可以透過 prototype 來擴充每一個透過這個函式所建構的物件</p></blockquote><p>好像難以連結，不過我們時時刻刻都在使用 prototype 的概念<br>有想過為什麼基本型別的值 (number、string、bool) 可以 <strong>像 object 一樣呼較方法獲取到屬性</strong>呢 ?</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span>length <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>沒錯，就是透過 prototype 原型提供的方法來繼承<br>在 JavaScript 呼叫方法或屬性之前，會透過基本型別包裹器 (Primitive Wrapper)<br>被轉型為該類別的「物件」，由對應的物件提供的方法是透過原型鏈 (prototype chain)<br>讓我們可以對基本型別的值呼叫方法  </p><ul><li>類似這樣  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// str.length 模擬過程</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span> <span class="token comment">// 變成物件</span>str<span class="token punctuation">.</span>length <span class="token comment">// 拿到屬性</span>str <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 銷毀</span>str <span class="token operator">=</span> <span class="token string">'Hello'</span> <span class="token comment">// 恢復成基本型別</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="prototype-怎麼來"><a href="#prototype-怎麼來" class="headerlink" title="prototype 怎麼來 ?"></a>prototype 怎麼來 ?</h2><p><strong>函式建立時會自動產生 prototype 屬性</strong>。<br>產生的物件並”不”代表物件的 prototype 屬性就是這個函式的原型物件<br>而是透過 <code>new</code> 出來的物件會有 <code>[[Prototype]]</code> 的隱藏屬性<br>是指 <strong>建構式</strong> 的 prototype    </p><blockquote><p><code>constructor.prototype</code>  </p></blockquote><p>上面的敘述很令人混亂對吧 ?<br>先舉個例子  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> rosa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Rosa'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rosa<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Rosa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>rosa</code> 是從 Person 建構出來的物件  </p><blockquote><p>所以 rosa 的原型是 Person</p></blockquote><p>回到第一句話<br><strong>函式建立時會自動產生 prototype 屬性</strong></p><p>對著 <code>Person</code> 函式取 prototype ，確實是有的   </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// Person 本身</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>prototype 讓 rosa 可以直接拿到 <code>Person</code> 裡面的方法 (getName)   </p><p>那第二句是什麼意思 ?<br>試著讓 <code>rosa</code> 呼叫 <code>toString()</code>，但是 Person 並沒有這個方法呀 ?!<br>我們說過 rosa 的原型是 Person  </p><blockquote><p>但 <strong>不</strong> 代表建構出來的物件 (rosa) 的 prototype 屬性就是這個函式 (Person) 的原型物件       </p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">lgo</span><span class="token punctuation">(</span>rosa<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Object]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>rosa 這裡取來的屬性或方法是來自 <code>Object.prototype</code> 傳下來的  </p><p>接著第三句 <strong>建構式</strong> 的 prototype 是什麼意思 ?<br>試著對 <code>rosa</code> 取 prototype<br>新手一開始會以為 <code>rosa</code> 的 prototype 是等於 <code>Person</code> 的 prototype<br>特別要搞清楚這裡的 prototype 是指什麼(我一開始也搞混了)   </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rosa<span class="token punctuation">.</span>prototype <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rosa<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>回到第一句，回想 <code>.prototype</code> 是誰產生的 ?<br>對，是 <strong>函式</strong><br>那 rosa 物件是透過建構式的方式而來<br>prototype 是隱藏屬性，沒辦法透過建構出來的物件直接取得   </p><p><img data-src="https://dsm01pap006files.storage.live.com/y4mL7f71rE-gVfp4ze955AsP5mGlQNR1PYAJH4jUShpBHgc6U4Wq0pK2oYpDCsmDsGL0r2AxpMx3WXujkLUwZtgTEX_C1HPGIei28YZq0VvVXXwaTb7DT7K2RM-5ywv0SCz41iHsWPYdEp4lRb2YP19GWxtllx_EEBLXmJXO65f5jsuWSyQcLed8gq4Xo3YG0e3?width=692&height=620&cropmode=none" alt="藏在 contructor">  </p><h2 id="取得物件的-prototype"><a href="#取得物件的-prototype" class="headerlink" title="取得物件的 prototype"></a>取得物件的 prototype</h2><p>既然不能直接透過 <code>rosa.prototype</code> 取得原型<br>如果我們要知道 rosa 是繼承誰的 prototype 可以透過三種的方式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>rosa<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 現在比較好的拿到的方法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rosa<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// 從建構式拿到 [[Prototype]] 的值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rosa<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// 原本各家瀏覽器實作，後來 ES6 保留的方法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">===</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>rosa<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">===</span> rosa<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">===</span> rosa<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="原型鏈-Prototype-Chain"><a href="#原型鏈-Prototype-Chain" class="headerlink" title="原型鏈 Prototype Chain"></a>原型鏈 Prototype Chain</h2><p>原型可以讓本來 <strong>沒有某屬性的物件去存取其他物件的屬性</strong>    </p><h3 id="proto-溝通的原則"><a href="#proto-溝通的原則" class="headerlink" title="__proto__ : 溝通的原則"></a>__proto__ : 溝通的原則</h3><p>如果本身物件沒有屬性或方法使用，可以透過原型鍊 (prototype chain) 來取得<br>那是怎麼傳的呢 ?  </p><p>原本 JavaScript 沒有提供標準方法直接存取物件的 <code>[[Prototype]]</code>。<br><code>__proto__</code> 是瀏覽器實作的的，並非 EMCAScript 的標準，不是所有的環境都有這個值。  </p><blockquote><p>ES5 以後的是使用 <code>Object.getPrototypeOf()</code><br>ES6 為了向下兼容，<code>__proto__</code> 也是承認的，但環境的不同支援度不同，還是用 <code>getPrototypeOf</code><br><code>__proto__</code> 是 <code>[[Prototype]]</code> 底下的屬性，屬於 setter/getter</p></blockquote><p><code>__proto__</code> 這個特殊屬性或者是 <code>Object.getPrototypeOf()</code> 都是取得某個物件的原型物件 <code>[[Prototype]]</code> 的方式。   </p><p>官方比較建議使用 <code>Object.getPrototypeOf()</code>，因為 <code>__proto__</code> 比較耗效能</p><p>除了拿到物件原型的 prototype，<br>還可以透過 <code>.__proto__</code> 看原型們如何溝通      </p><p><strong>範例</strong>  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">hello</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> says meow</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> lily <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'lily'</span><span class="token punctuation">)</span>lily<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> Bob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span>Bob<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模擬溝通"><a href="#模擬溝通" class="headerlink" title="模擬溝通"></a>模擬溝通</h3><p>想執行 <code>lily.hello()</code><br>會依照這樣的順序尋找     </p><ol><li>找 lily 本身是不是有 hello function ?<br> 👉 沒有，往上一層找</li><li>找 <code>lily.__proto__</code> 是不是有 hello ?<br> 👉 沒有的話，再往上一層找<br> 知道 <strong>lily._<em>proto_</em> = Cat.prototype</strong></li><li>找 <code>lily.__proto__.__proto__</code> 是不是有 hello ?<br> =&gt; <code>lily.__proto__.__proto__ = Cat.prototype.__proto__</code>。<br> =&gt; <code>lily.__proto__.__proto__  = Object.prototype</code></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>往上找像是用鏈結的方式，所以才稱 prototype chain<br>我們找到 Object.prototype 就停止了</p><blockquote><p>那 <code>Object.prototype.__proto__</code> 呢?</p></blockquote><h3 id="最頂層的原型物件-Object-prototype"><a href="#最頂層的原型物件-Object-prototype" class="headerlink" title="最頂層的原型物件: Object.prototype"></a>最頂層的原型物件: Object.prototype</h3><p>往上找 <code>__proto__</code>，什麼時候才會停止 ?<br>會發現 <code>Object.prototype.__proto__</code> 等於 <code>null</code>，代表 Object 是最頂層了。    </p><p>在 JavaScript 幾乎所有的物件 (環境宿主物件除外)會順著原型鍊找到最頂層<br><code>Object.prototype</code> 才停止，因為 <code>Object.prototype</code> 是 JavaScript 所有物件的起源。</p><p>在 <code>Object.prototype</code> 提供的所有方法，在 JavaScript 的所有物件的可以呼叫它。    </p><ul><li><code>Object.prototype.hasOwnProperty()</code> : 是否為自己的屬性或方法</li><li><code>Object.prototype.toString()</code> : 轉型成字串</li><li><code>Object.prototype.valueOf()</code> : 取得 <strong>基本型別</strong> 的值</li></ul><p>幾乎所有的值可以使用的。<br>即便建立物件時，沒有定義這些方法，但基於原型鏈的繼承，我們還是可以呼叫這些方法。</p><h2 id="instanceof-是否在物件的原型鏈上"><a href="#instanceof-是否在物件的原型鏈上" class="headerlink" title="instanceof : 是否在物件的原型鏈上"></a>instanceof : 是否在物件的原型鏈上</h2><p>instanceof 除了檢查 <code>constructor.prototype</code> 是不是在物件的原型鏈上<br>也能檢查 <strong>複合式物件的基本型別</strong>  </p><ul><li><p>檢查基本型別</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment">// 100</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num<span class="token punctuation">)</span> <span class="token comment">// 'object'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 100，基本型別的值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//'number'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>valueOf()</code> 可以拿到基本型別的值   </p></li><li><p>檢查是不是在原型鏈上，同理使用 <code>class</code> 的結構也可以檢查    </p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> rosa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rosa <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="物件本身-v-s-原型鏈-出現同名屬性物件"><a href="#物件本身-v-s-原型鏈-出現同名屬性物件" class="headerlink" title="物件本身 v.s 原型鏈 : 出現同名屬性物件 ?"></a>物件本身 v.s 原型鏈 : 出現同名屬性物件 ?</h2><p>物件實體與原型具有相同的屬性或方法  </p><blockquote><p><strong>優先存取自己的屬性或方法</strong>，如果沒有才會再順著原型鏈向上尋找。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">Person</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Yo!"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token string">"Hi!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Yo!</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  ## 原型的方法擴充class 級別的擁有 extend 往下擴充  實例出實體後，會尋找存在的原型，並且一層層往上找。如果要替原型定義其他的方法可以這樣寫    </span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>javascript<span class="token comment">// 原始</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">hello</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> says meow</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 定在最上層，讓往下的都可以使用</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">hello</span> <span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> says meow</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Object 是最頂層，其實在這邊定義也可以。<br>如果不是同一類型都需要使用，這種方法也可以導致奇怪的問題發生    </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'lol'</span><span class="token punctuation">)</span><span class="token keyword">let</span> arr<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 'lol'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>每一個 array 產生時已經被加上 <code>&#39;lol&#39;</code><br>使用上合法，但不是一個好操作  </p><p>以上如果有誤，歡迎指教 QQ</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="https://ithelp.ithome.com.tw/articles/10194356">重新認識 JavaScript: Day 25 原型與繼承</a></li><li><a href="https://lidemy.com/courses/enrolled/390599">JS201 進階 JavaScript：那些你一直搞不懂的地方</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;JavaScript 的核心就在原型 !&lt;br&gt;原型使得物件都能使用在原型鏈上的屬性及方法&lt;br&gt;本身物件也可以再擴充&lt;br&gt;透過本篇了解原型的使用方法  &lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>筆記 | JavaScript - class 物件導向 (II) 繼承</title>
    <link href="https://blog.rosa.tw/JavaScript/JavaScript-Object-oriented-programming-02/"/>
    <id>https://blog.rosa.tw/JavaScript/JavaScript-Object-oriented-programming-02/</id>
    <published>2022-04-19T04:33:24.000Z</published>
    <updated>2022-06-18T13:50:43.735Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇我們提到 class 像是幫我們製作藍圖<br>有車子基本構造的藍圖<br>是不是能透過藍圖能做出其他車種的藍圖呢 ?  </p><p>可以，就是繼承 !</p><span id="more"></span><h2 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h2><p>要讓子物件擁有父物件的內容可以透過 <code>extends</code>  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">newClass</span> <span class="token keyword">extends</span> <span class="token class-name">OldClass</span><span class="token punctuation">&#123;</span><span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>範例 :</strong><br>Dog 繼承 Animal    </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> makes a noise.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span><span class="token function">sit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> sits.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'Mitzie'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 'Mitzie barks.'</span>d<span class="token punctuation">.</span><span class="token function">sit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'Mitzie sits.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Dog 繼承 Animal 的方法了，因此在 Dog 呼叫 speak 是可以的。</p><p>extends 背後會幫我們連接物件的 prototype<br>使我們可以取得父物件的方法或屬性。  </p><blockquote><p>JavaScript 使用 prototyped-based 不能讓物件一次繼承兩種<br>但有一個方法叫 <code>mixin</code> 利用拷貝的概念達到目的</p></blockquote><p>因為我還不會，先擱著 QQ，待補<br>參考 : </p><ul><li><a href="https://zh.javascript.info/mixins">Mixin 模式</a></li></ul><h2 id="super"><a href="#super" class="headerlink" title="super()"></a>super()</h2><p>如果要在一開始就 <strong>呼叫父層的方法</strong>，必須加入<code>super()</code>，代表在繼承的子層初始化時，將舊數值蓋過去，要傳進的參數也要帶入。  </p><blockquote><p>簡單來說，<code>super</code> 就是上一層的 <code>constructor</code>  </p></blockquote><ul><li>沒有 <code>super()</code> 的情況下，想在新物件生成時呼叫原型方法的 <code>speak()</code>  </li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> makes a noise.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 建構時在這裡呼叫原型的方法  </span><span class="token punctuation">&#125;</span><span class="token function">sit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> sits.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'Mitzie'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就會跑出 </p><pre class="line-numbers language-none"><code class="language-none">Must call super constructor in derived class before accessing &#39;this&#39; or returning from derived constructor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>會提示你要記得加入 super，不然 <code>this</code> 使用時會出現問題  </p><ul><li>加上 super 以及要初始化的值<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> makes a noise.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 建構時在這裡呼叫原型的方法  </span><span class="token punctuation">&#125;</span><span class="token function">sit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> sits.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'Mitzie'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'Mitzie makes a noise.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>如果 super 裡面沒有傳入 <code>name</code><br><code>this</code> 是 Dog 本身，但是不具有 <code>name</code> 這個值，就會是 <code>undefined</code>   </li></ul><h2 id="應用"><a href="#應用" class="headerlink" title="應用"></a>應用</h2><p>繼承可以用在有 <strong>共同屬性</strong> 的時候，想再加一些附加功能，透過繼承不用完全重寫。 </p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://lidemy.com/courses/enrolled/390599">JS201 進階 JavaScript：那些你一直搞不懂的地方</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上一篇我們提到 class 像是幫我們製作藍圖&lt;br&gt;有車子基本構造的藍圖&lt;br&gt;是不是能透過藍圖能做出其他車種的藍圖呢 ?  &lt;/p&gt;
&lt;p&gt;可以，就是繼承 !&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/JavaScript/"/>
    
    
    <category term="OOP" scheme="https://blog.rosa.tw/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>筆記 | JavaScript - class 物件導向 (I) 初探 OOP</title>
    <link href="https://blog.rosa.tw/JavaScript/JavaScript-Object-oriented-programming-01/"/>
    <id>https://blog.rosa.tw/JavaScript/JavaScript-Object-oriented-programming-01/</id>
    <published>2022-04-19T04:33:15.000Z</published>
    <updated>2022-06-18T13:50:52.041Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JavaScript 是物件導向的語言<br>但跟其他的物件導向語言使用 class 有點不同   </p><p>恩 ? Javascript 不是也用 class 嗎 ?<br>不，<code>class</code> 是語法糖，到 ES6 才問世<br>真正的 JavaScript 是使用 prototype 來達成物件導向  </p><p>本系列將從現代開發用的 <code>class</code> 來了解<br>再到認識真的原汁原味 <code>prototype</code> 的作法  </p><span id="more"></span><h2 id="class-的物件導向"><a href="#class-的物件導向" class="headerlink" title="class 的物件導向"></a>class 的物件導向</h2><p><code>Object-oriented programming</code> 簡稱 OOP<br>物件導向的優點在於更 <strong>直覺</strong>，更模組化  </p><p>ES6 是使用 class<br>ES5 以前並沒有 class，而是使用 <code>prototype</code> (原型) 的方式。<br><code>class</code> 像是藍圖，而 <code>new</code> 則是把藍圖裡的東西實例出來  </p><blockquote><p>類別型的物件都是<strong>大寫開頭</strong>，這是常用的寫法  </p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定義貓</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">&#123;</span><span class="token comment">// 每隻貓有名字</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">&#125;</span><span class="token comment">// 每隻貓打招呼會喵喵叫</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> says meow</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 建立一隻叫 lily 的貓，把它存在 lily 這個變數</span><span class="token keyword">let</span> lily <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'lily'</span><span class="token punctuation">)</span>lily<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// lily says meow</span><span class="token keyword">let</span> bob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'bob'</span><span class="token punctuation">)</span>bob<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// bob says meow</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>class</code> : 物件的藍圖<br> 裡面的涵式不需要寫 <code>function</code> 的字，可以使用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions#description">function shorthand</a>  </li><li><code>new</code> : 把藍圖實做出來，放到自訂義變數中，之後這個變數也擁有藍圖包含的功能。<br> 用 <code>.</code> (dot) 連接，像 <code>object</code> 來呼叫。  </li><li><code>new XXX(建構子參數)</code> : 建構子是 class 內部的涵式，可以加入參數，類似初始化。<br> 對應  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//這是建構子</span><span class="token function">construtor</span><span class="token punctuation">(</span><span class="token parameter">arguments</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>arguments <span class="token operator">=</span> arguments<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>constructor</code> : 可以看做基本資料(設定檔)，<code>this.name = name</code><br>把 new 帶入的引數作為內部建構子參數使用。</p></blockquote></li><li><code>this</code> : 分成 class 內部的 <code>this</code> 與外部的 <code>this</code>。這邊著重內部的 this。<br> <code>this</code> 是對應被實體出來的主體。<br> lily 被指向叫做 lily 的貓<br> 反之 bob 也是，並不是指同一個物件<br> 但是內部方法是共用同一個    <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lily<span class="token punctuation">.</span>hello <span class="token operator">===</span> Bob<span class="token punctuation">.</span>hello<span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>對於已經建立的物件再修改內部建構的值非常不建議  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">lily<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"rosa"</span> <span class="token punctuation">(</span>👎<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>雖然可以修改掉內部的 <code>this.name</code> 的值<br>一般來說在建立實體時都會設定好，較少再直接透過個別更改     </p><h2 id="沒有-class-的物件導向"><a href="#沒有-class-的物件導向" class="headerlink" title="沒有 class 的物件導向"></a>沒有 class 的物件導向</h2><p>在 ES5 並沒有 class 的做法<br>如果沒有使用 prototype 的寫法<br>我們可以透過 function 來建構   </p><blockquote><p>function 也是物件，所以可以透過 <code>.</code> 拿到屬性或方法  </p></blockquote><ul><li>改寫上面的 Cat class  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 用 _ (dash) 通常指被封裝在函式內的變數，類似私有變數，一般不會直接修改</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">,</span>    <span class="token function-variable function">hello</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> says meow</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> Lily <span class="token operator">=</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token string">"Lily"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Lily<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> Bob <span class="token operator">=</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Bob<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Lily<span class="token punctuation">.</span>hello <span class="token operator">===</span> Bob<span class="token punctuation">.</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>讓物件能呼叫方法用 <code>function</code> 回傳 function 的方式<br>但是這個方法 <strong>非常消耗記憶體</strong><br>每一個產生的 function 都是不同的 function  </li></ul><h2 id="對比圖"><a href="#對比圖" class="headerlink" title="對比圖"></a>對比圖</h2><p><img data-src="https://dsm01pap006files.storage.live.com/y4mPsTnRBXXRDKUTn4h4YIRTBAE1Q3K4imjKAv-NaRLxF9KjYvNc3TJj5u-GvDWoZUpm_TBcByzdTcbSFqiAJtRNy43xJRnNoug9RKxYtHqxvCm-JrazXLtBM82gThGBaH8-SjTQbaFr0zZr4tGF2CuwLIl0u7I3soTI3iJ8usyN9oWE1SV6GyXIBp3snhf2Ply?width=1024&height=325&cropmode=none" alt="右 : ES5 ，左 : ES6"></p><p>右邊因為每一個實體都是重新創建一個新物件方法，明明要呼叫的指向實體是同一個而已。<br>改善這部分會使用到 <code>prototype</code>，讓建構的物件都有共同的方法與屬性  </p><ul><li>有無使用 prototype 的寫法  </li></ul><p><img data-src="https://dsm01pap006files.storage.live.com/y4meCfDywgqAcUJCJFA07OVsJ4OvfDl-Qu_nPbSoDEocZ_v0aTe19CwejVfn_H2ZHF8PR5mb1xI4pjAwUuAQLb-NdFX5VB-_AmcjbZbIrfTn8wy1Cf5im0Lr8--yFtVkM8wsSdEd-N4TO9cPP64dTTXfH0td0OWI8XuyKow6jmPGLxam61-1dH2JWOpXzMFCDg3?width=1024&height=308&cropmode=none" alt="左 : function 直接回傳物件，右 : 透過 prototype"></p><p>最大的差別在於產生的物件 <strong>是不是共用同一個方法</strong><br>右邊的透過 prototype 方法是都指向同一個  </p><p>建立物件時右邊是使用了 <code>new</code>，幫將物件的原型綁在建構函式上  </p><h2 id="new-藍圖的實作"><a href="#new-藍圖的實作" class="headerlink" title="new : 藍圖的實作"></a>new : 藍圖的實作</h2><p>new 到底做了什麼是呢 ? </p><ul><li>new 不 new ?  </li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 等同於 class 的 construtor</span><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token punctuation">&#125;</span><span class="token class-name">Car</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">buy</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">you buy a new </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> toyota <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">'toyota'</span><span class="token punctuation">)</span>toyota<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> honda <span class="token operator">=</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token string">'honda'</span><span class="token punctuation">)</span> <span class="token comment">// 錯誤</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>沒 new 會出現 <code>Class constructor Car cannot be invoked without &#39;new&#39;</code><br>代表沒有初始化。</p><h3 id="複習一下-call"><a href="#複習一下-call" class="headerlink" title="複習一下 call"></a>複習一下 call</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//這邊印出的 this 是全域物件  </span><span class="token function">hello</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span> <span class="token comment">//123，this 變成傳進去的東西</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>.call</code> 是呼叫函式的另一種方法<br>透過這樣的方式可以將 this 綁在傳入的物件上</p><h3 id="手動造一個-new"><a href="#手動造一個-new" class="headerlink" title="手動造一個 new"></a>手動造一個 new</h3><p>知道 call 跟 this 的關係，就能了解 <code>constructor</code> 的初始化。</p><ul><li>目標 : 不用 new 做一樣的功能<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> toyota <span class="token operator">=</span> <span class="token function">newCar</span><span class="token punctuation">(</span><span class="token string">'toyota'</span><span class="token punctuation">)</span>toyota<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>用 newCar<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token punctuation">&#125;</span><span class="token class-name">Car</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">buy</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">you buy a new </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">newCar</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> obj <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">Car</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>name<span class="token punctuation">)</span>obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Car</span><span class="token punctuation">.</span>prototype<span class="token keyword">return</span> obj<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>new 其實做了 :  </li></ul><ol><li>建立一個 obj</li><li><code>.call(obj,name)</code>，呼叫建構子。把 obj 當作 <code>this</code>，name 作為參數，完成 <code>constructor</code> 的初始化。<blockquote><p>沒有這一項無法指向實體，<code>this</code> 綁定問題  </p></blockquote></li><li>用 <code>__proto__</code> 導向至 prototype，跟原型進行搭橋，才能使用到該原型方法。</li><li><code>return obj</code> ，實例 (instance) 出來的東西。</li></ol><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>現代開發大多還是使用 class<br>但並非代表 JavaScript 就是用 class(類別) 來建立<br>背後依然是 function 與指定 prototype 的實作    </p><p>想更了解 JavaScript 認識 prototype 是不可少的<br>同時我也查了為什麼 JavaScript 作者使用 prototype 的設計<br>而不是用類別 ，是出於什麼考量?     </p><p>在<a href="https://stackoverflow.com/questions/8433459/what-s-the-purpose-of-prototype">這篇</a> 找到的的解釋是 class-based 是要 <strong>重頭設計物件</strong>，而 prototype-based 可以透過現有已建立的物件再建立，總得來說效能上更快。  </p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://lidemy.com/courses/enrolled/390599">JS201 進階 JavaScript：那些你一直搞不懂的地方</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;JavaScript 是物件導向的語言&lt;br&gt;但跟其他的物件導向語言使用 class 有點不同   &lt;/p&gt;
&lt;p&gt;恩 ? Javascript 不是也用 class 嗎 ?&lt;br&gt;不，&lt;code&gt;class&lt;/code&gt; 是語法糖，到 ES6 才問世&lt;br&gt;真正的 JavaScript 是使用 prototype 來達成物件導向  &lt;/p&gt;
&lt;p&gt;本系列將從現代開發用的 &lt;code&gt;class&lt;/code&gt; 來了解&lt;br&gt;再到認識真的原汁原味 &lt;code&gt;prototype&lt;/code&gt; 的作法  &lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/JavaScript/"/>
    
    
    <category term="OOP" scheme="https://blog.rosa.tw/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>筆記 | JavaScript - this (II) call、appaly、bind</title>
    <link href="https://blog.rosa.tw/JavaScript/JavaScript-this-II/"/>
    <id>https://blog.rosa.tw/JavaScript/JavaScript-this-II/</id>
    <published>2022-04-15T03:07:53.000Z</published>
    <updated>2022-06-18T13:50:26.918Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>除了透過執行環境與上下文來綁定之外<br>this 是可以改變的<br>改變 this 有三種方式  </p><span id="more"></span><h2 id="call-amp-apply"><a href="#call-amp-apply" class="headerlink" title="call &amp; apply"></a>call &amp; apply</h2><p>上一篇有簡略提過 <code>.call()</code><br>等同於 function 直接執行<br>而且是有帶 <code>this</code><br>第一個參數是指定 <code>this</code>，後面及是 <code>arguments</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 這樣是一樣的</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">test</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">test</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>這兩個執行是差不多的<br>差在後面的參數類型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> test <span class="token operator">=</span><span class="token punctuation">&#123;</span>a <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj <span class="token operator">=</span><span class="token punctuation">&#123;</span>a<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">&#125;</span>test<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 1 , 5</span><span class="token comment">// 改變 this </span>test<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 5 , 5</span>test<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 5 , 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>call</code> : 後面都用逗號隔開<br>   <code>.call(thisValue,args[0],args[1])</code> </li><li><code>apply</code> : 前面為 this，後面參數為類陣列。<br>  <code>.apply(thisValue,[args[0],args[1]])</code></li></ul><h3 id="call-跟-apply-為什麼同時存在"><a href="#call-跟-apply-為什麼同時存在" class="headerlink" title="call 跟 apply 為什麼同時存在 ?"></a>call 跟 apply 為什麼同時存在 ?</h3><p>例子是來自 <a href="https://blog.huli.tw/2020/04/18/javascript-function-is-awesome/">覺得 JavaScript function 很有趣的我是不是很奇怪</a><br>這篇也探討很有趣的 JS 問題  </p><ul><li>Math.max 的參數可以吃隨意數值</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果我們要從陣列中找出最大值呢 ?<br>直接呼叫會導致錯誤<br>可以運用 apply 的參數是 <strong>陣列</strong> 的方式帶入<br>或者用 ES6 展開  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 6</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 6 , 展開 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>總是會有不同的情境可以使用</p><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p>把 this 的值先綁死，不管後面怎麼 call<br>都不會變動。</p><blockquote><p>bind 回傳的是一個 <strong>function</strong></p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> b <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token comment">// function</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 10</span><span class="token function">b</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// 依舊是 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>非嚴格模式底下，無論是用 call、apply 還是 bind<br>傳進去的如果是 primitive 都會被轉成 <strong>object</strong>  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>  <span class="token function">hello</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token comment">// [Number: 123]</span><span class="token keyword">const</span> myHello <span class="token operator">=</span> <span class="token function">hello</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">'my'</span><span class="token punctuation">)</span><span class="token function">myHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// [String: 'my']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="箭頭函式-v-s-bind"><a href="#箭頭函式-v-s-bind" class="headerlink" title="箭頭函式 v.s bind"></a>箭頭函式 v.s bind</h2><p>初學時會認為 arrow funciton 有指向自己，綁定的意味<br>但兩者有很大的區別    </p><ul><li><code>.bind(this)</code> : 呼叫之前就先綁定，讓被呼叫的都有固定的 <code>this</code>。  </li><li>arrow function this : 箭頭函式沒有建立任何的 this，簡單來說是根本沒有自己的 this。<br>在箭頭函式使用 this，會像變數一樣，往外部尋找。   </li></ul><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="https://blog.huli.tw/2019/02/23/javascript-what-is-this/">淺談 JavaScript 頭號難題 this：絕對不完整，但保證好懂 - Huli</a></li><li><a href="https://blog.huli.tw/2020/04/18/javascript-function-is-awesome/">覺得 JavaScript function 很有趣的我是不是很奇怪</a></li><li><a href="https://zh.javascript.info/arrow-functions">深入理解箭头函数</a>  </li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;除了透過執行環境與上下文來綁定之外&lt;br&gt;this 是可以改變的&lt;br&gt;改變 this 有三種方式  &lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>筆記 | JavaScript - this (I) 基礎概念</title>
    <link href="https://blog.rosa.tw/JavaScript/JavaScript-this-I/"/>
    <id>https://blog.rosa.tw/JavaScript/JavaScript-this-I/</id>
    <published>2022-04-15T03:07:39.000Z</published>
    <updated>2022-06-18T13:50:31.429Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在學習 JavaScript 時很多課程會建議不要急著先用 <code>this</code><br>因為 this 會跑出讓新手無法預期的結果<br>在某些情況下使用 this 反而更棘手<br>藉由本次來初步了解這個奇妙的 <strong>this</strong>! </p><span id="more"></span><h2 id="什麼是-this"><a href="#什麼是-this" class="headerlink" title="什麼是 this ?"></a>什麼是 this ?</h2><ul><li>關鍵字</li><li>function 執行時，自動生成的內部物件</li><li>隨 function 執行場合不同，this 指向的值也會不同</li><li>大多數情況，this 代表的就是呼叫 function 的物件 (Owner Object of the function)。</li></ul><p>總得來說 :   </p><blockquote><p>this 會因 <strong>執行的環境與上下文</strong> (context) 的不同，而有不同的結果<br>翻譯機 : <strong>跟 function 在哪裡呼叫有關</strong></p></blockquote><p>空說 this 有點難以了解，this 其實在哪裡都可以使用(非嚴格模式下)<br>JavaScript 並沒有特別限制 this 綁定在哪，所以 this 是會變來變去的<br>正因如此才顯得有點麻煩    </p><h2 id="不同情況下的-this"><a href="#不同情況下的-this" class="headerlink" title="不同情況下的 this"></a>不同情況下的 this</h2><h3 id="物件導向的-this"><a href="#物件導向的-this" class="headerlink" title="物件導向的 this"></a>物件導向的 this</h3><p>this 就是 <code>instance</code> 本身，被 <strong>實例</strong> 出來的那個。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">&#123;</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">&#125;</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> toyota <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">'toyota'</span><span class="token punctuation">)</span>toyota<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這個例子就是 <code>toyota</code> 物件本身</p><h3 id="物件導向之外的-this"><a href="#物件導向之外的-this" class="headerlink" title="物件導向之外的 this"></a>物件導向之外的 this</h3><p>脫離 <code>class</code> 後，可以再細分成  </p><ol><li>一般 function 中的 this</li><li>DOM 事件中的 this</li><li><code>object</code> 的 this</li><li>arrow function 的 this <strong>(特別)</strong> ⭐</li></ol><blockquote><p>殺手鐧 : 可以用 <code>.call()</code> 來知道 this 的意義</p></blockquote><p><code>.call()</code> 是執行 function 另一種方式<br><code>.call(context,args[0],args[1])</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">p1<span class="token punctuation">,</span>p2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// undefined 1 2</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// undefined 1 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這兩個是一樣的，會發現原來一般呼叫 function 會少了 this<br>而這個 this 就是看執行的環境與上下文 (context) 而來的  </p><p><strong>物件中的 function 呢 ?</strong>     </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">p1<span class="token punctuation">,</span>p2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>func <span class="token operator">:</span> test<span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根據上面說的</p><blockquote><p><code>this</code> 代表的就是呼叫 function 的物件 </p></blockquote><p>物件呼叫，呼叫的 method 前面是 obj<br>所以 call 裡面的 this 位置是 <code>obj</code>     </p><h4 id="一般-function-中的-this"><a href="#一般-function-中的-this" class="headerlink" title="一般 function 中的 this"></a>一般 function 中的 this</h4><p>根據環境不同，結果不同<br>但是都是 global 的物件<br>在 <strong>非嚴格模式</strong> 下</p><ul><li>node.js : <code>this = global</code><br><img data-src="https://dsm01pap006files.storage.live.com/y4mBY1X7hZFvUS0mwa7p25amxq2Q5tXcp0SRBAKj7cJNx_37JCdjvCWa0cMAjfVWWbH4a8_YsBV0qOgYrNgcg6zJ5FhgIGuLqLlMT8euJQKJx8Dr9WTfy2FGVzvqh4ES1YzVoXlfdOCNR8Q_ndRIiDSyucw5IxbNHFsKeU5KRB71oZ9e096hhsMhYq6JT-FlHeR?width=1022&height=617&cropmode=none" alt="global 物件"></li><li>瀏覽器 : <code>this = window</code><br><img data-src="https://dsm01pap006files.storage.live.com/y4mkwi-WphtCQHHgZoUP5u8Q0AkSyEZZcX6U6ErkFF5AKuF0z1us2zGqqo2w-Ir8auT0FL7AbZxjEfLh3Y4wyVYyLU38xVibSCWD1r70lghQMdlCieK35uGdQSgT5HKX5iStqZw2ekAtQWqgxktoKIFmMjFBf-L3h8PkZ505ii9ON4qS1jF7nRxrEJz42_hQ7AL?width=662&height=300&cropmode=none" alt="window 是瀏覽器的全域物件"></li></ul><blockquote><p><strong>嚴格模式</strong> 下的 this 指向全域物件是 <code>undefined</code><br>因為 this 沒有綁定誰，所以會是 <code>undefined</code>。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span><span class="token comment">// 轉成 call</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// undefined ,沒有帶入東西，嚴格模式下是 undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DOM-事件中的-this"><a href="#DOM-事件中的-this" class="headerlink" title="DOM 事件中的 this"></a>DOM 事件中的 this</h4><p>對應到事件觸發的 <strong>元素</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以 click 為例， <code>this</code> 會導向被按到的 <strong>元素</strong> 本身  </p><p>但是在事件裡 <strong>呼叫其他 function</strong> 時就要特別注意了<br>由於內部的 function 沒有綁定物件， this 會是全域物件  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// ajax 的 this 是 window 全域物件</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>textContent<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以透過其他變數將 <code>this</code> 先存起來，直接在內部呼叫的函式替換。 </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 把這邊的 this 存起來，指向的是元素本身</span><span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token comment">// ajax 的 this 是 window</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 把 元素本身的 this 帶進來</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>textContent<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下一篇會提到如何用函式的方式綁定 this  </p><ul><li>轉成 <code>.call</code><br><code>el</code> 是 document 子結點取得的，這邊也可以看做一個物件<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>handler<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'type'</span><span class="token punctuation">,</span><span class="token function">handler</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// 放入的是 元素 本身</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="object-的-this"><a href="#object-的-this" class="headerlink" title="object 的 this"></a>object 的 this</h4><p>指 obj 本身。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function-variable function">test</span> <span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// obj</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 轉成 call</span>obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="arrow-function-的-this"><a href="#arrow-function-的-this" class="headerlink" title="arrow function 的 this"></a>arrow function 的 this</h4><blockquote><p>arrow function 沒有自己的 this<br>而是用外部的 this  </p></blockquote><p>箭頭函式之所以在 this 表現奇怪<br>跟其他狀況的 this 不同的是 <strong>不是哪裡被呼叫有關</strong><br>而是 <strong>在哪定義</strong> 有關<br>如果前面已定義了，就會用那個值<br>來看看例子  </p><ul><li>一般 function<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">hello</span><span class="token punctuation">&#123;</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>很明顯的 <code>new</code> 建構出來的物件<br>前面有提到是 <strong>實例</strong> 本身<br>但是裡面呼叫 function 的  this 呢 ?<br>是指 <strong>全域物件</strong><br>setTimeout 並沒有透過其他物件呼叫<br>就像在外部呼叫 <code>setTimeout</code>  </li></ul><p>既然是 hello 這個物件的東西<br>我們希望 <code>this</code> 指向的是 hello 本身建構出來的物件<br><code>arrow function</code> 就派上用場了  </p><ul><li>用 <code>arrow function</code><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">hello</span><span class="token punctuation">&#123;</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// hello&#123;&#125;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// hello&#123;&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>arrow function 本身沒有 this<br>而是根據定義在哪，this 就是那個值<br>通常也是指箭頭函是外部的 this  </li></ul><h2 id="this-與前後文本-context-的綁定基本原則"><a href="#this-與前後文本-context-的綁定基本原則" class="headerlink" title="this 與前後文本 (context) 的綁定基本原則"></a>this 與前後文本 (context) 的綁定基本原則</h2><p>this 綁定原則大概可以分四大種  </p><ul><li><strong>預設綁定</strong> (Default Binding)</li><li><strong>隱含式綁定</strong> (Implicit Binding)</li><li><strong>顯式綁定</strong> (Explicit Binding)</li><li>「<strong>new」關鍵字綁定</strong>  </li></ul><h3 id="預設綁定"><a href="#預設綁定" class="headerlink" title="預設綁定"></a>預設綁定</h3><p>宣告在 global scope 的變數，跟全域物件屬性是相同的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 直接讀</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 1 </span><span class="token comment">// 透過全域物件底下的屬性讀取</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span>  <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因為預設綁定，當 function 被呼叫的當下如果沒有值或是在 <code>func.call(null)</code> 或 <code>func.call(undefined)</code> 此類的情況下，此時裡面的 <code>this</code> 會<strong>自動指定至全域物件</strong>。</p><p>如果是嚴格模式， this 綁定全域物件是 <code>undefined</code></p><h3 id="隱含式綁定"><a href="#隱含式綁定" class="headerlink" title="隱含式綁定"></a>隱含式綁定</h3><p>function 被宣告的地方是在 global scope 中，只要它 <strong>成為某個物件的參考屬性</strong> (reference property)，在那個 function 被呼叫的當下，該 function 即被那個物件所包含。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a  <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  a<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  foo<span class="token operator">:</span> func <span class="token comment">// 引用 global 的 function</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2 , this是 obj 本身</span><span class="token keyword">var</span> func2 <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">;</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// undefined ， 這邊的 func 是 global 的，this 是 window，a 是找不到的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>決定 this 的關鍵不在於它屬於哪個物件，而是</p><blockquote><p>在於 function「呼叫的時機點」  </p></blockquote><p>透過物件呼叫某個方法 (method) 的時候，此時 this 就是那個物件 (owner object)。</p><h3 id="顯式綁定"><a href="#顯式綁定" class="headerlink" title="顯式綁定"></a>顯式綁定</h3><ol><li><code>.bind()</code>  </li><li><code>.call()</code> </li><li><code>.apply()</code> </li></ol><p>這類直接指定 this 的 function 都可被歸類至顯式綁定的類型。</p><h3 id="new-關鍵字綁定"><a href="#new-關鍵字綁定" class="headerlink" title="new 關鍵字綁定"></a>new 關鍵字綁定</h3><p>當一個 <code>function</code> 前面帶有 <code>new</code> 被呼叫時，會發生： </p><ul><li> 會產生一個新的物件 (物件被建構出來)</li><li> 這個新建構的物件會被設為那個 function 的 <code>this</code> 綁定目標，也就是 <code>this</code> 會指向新建構的物件。</li><li> 除非這個 function 指定回傳 (return) 了他自己的替代物件，否則這個透過 <code>new</code> 產生的物件會被自動回傳。</li></ul><p>關於 <code>new</code>，參考 : <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new#description">MDN 對 new 的說明</a>   </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span> <span class="token number">123</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> obj<span class="token punctuation">.</span>a <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="this-的應用-Cascade-組合技"><a href="#this-的應用-Cascade-組合技" class="headerlink" title="this 的應用 : Cascade 組合技"></a>this 的應用 : Cascade 組合技</h2><p>Cascade 也有人稱作 <strong>「Fluent Interface」</strong><br>可以讓 method 串串樂   </p><p>JavaScript 允許函式 <code>return undefined</code><br>那改成 <code>return this</code> 呢 ?  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">calNum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newNum</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">+=</span> newNum<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sub</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newNum</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">-=</span> newNum<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">multi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newNum</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">*=</span> newNum<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">division</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newNum</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">/=</span> newNum<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 透過 new 建立實體，this 是 calNum本身</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">calNum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 分開呼叫</span>a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a<span class="token punctuation">.</span>num <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 150</span>a<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a<span class="token punctuation">.</span>num <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>當回傳 this 時，指的是物件本身，可以往後串在一起，  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a<span class="token punctuation">.</span>num <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>JQuery 中的也是用 method chain (方法鏈) 這樣的方式  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'is-active'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'is-hide'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者 <code>Array</code> 的內建函式<br>是可以串聯不同的方法<br>而且回傳的都是 <strong>同類型</strong> 的陣列</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">el</span> <span class="token operator">=></span> e<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">el</span> <span class="token operator">=></span> el <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// [4,6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>除了轉成 <code>.call()</code> 來判斷 this<br>對於 this 也可以朝幾種方向來判斷  </p><ol><li>function 的呼叫，是透過 <code>new</code> 進行的嗎？<br> 如果是，那 this 就是被建構出來的物件。</li><li>function 是以 .call() 或 .apply() 的方式呼叫的嗎？ 或是 function 透過 .bind() 指定？<br> 如果是，那 this 就是被指定的物件。</li><li>function 被呼叫時，是否存在於某個物件？<br> 如果是，那 this 就是那個物件。</li><li>如果沒有滿足以上條件，此 function 裡的 this 就一定是全域物件<br>在嚴格模式下則是 undefined。</li></ol><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="https://blog.huli.tw/2019/02/23/javascript-what-is-this/">淺談 JavaScript 頭號難題 this：絕對不完整，但保證好懂 - Huli</a></li><li><a href="https://zhuanlan.zhihu.com/p/23804247">this 的值到底是什么？一次说清楚</a>  </li><li><a href="https://ithelp.ithome.com.tw/articles/10193193">重新認識 JavaScript: Day 20 What’s “THIS” in JavaScript (鐵人精華版)</a></li><li><a href="https://zh.javascript.info/object-methods">对象方法，”this”</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在學習 JavaScript 時很多課程會建議不要急著先用 &lt;code&gt;this&lt;/code&gt;&lt;br&gt;因為 this 會跑出讓新手無法預期的結果&lt;br&gt;在某些情況下使用 this 反而更棘手&lt;br&gt;藉由本次來初步了解這個奇妙的 &lt;strong&gt;this&lt;/strong&gt;! &lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>筆記 | JavaScript - Closure 閉包(II) 常見陷阱題</title>
    <link href="https://blog.rosa.tw/JavaScript/JavaScript-Closure-II/"/>
    <id>https://blog.rosa.tw/JavaScript/JavaScript-Closure-II/</id>
    <published>2022-04-13T13:51:51.000Z</published>
    <updated>2022-06-18T13:51:01.528Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前學習閉包沒辦法很容易連結到<br>尤其 Function 有一堆名詞變異體<br>總會好奇實際的應用情境   </p><p>那發生什麼問題才會使用到 Closure 呢?<br>又怎麼在真正的專案解決問題 ?   </p><span id="more"></span><h2 id="問題-在迴圈中呼叫函式"><a href="#問題-在迴圈中呼叫函式" class="headerlink" title="問題 : 在迴圈中呼叫函式"></a>問題 : 在迴圈中呼叫函式</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>複習一下 :</p><blockquote><p><code>var</code> 的切分單位是 <code>function</code>  </p></blockquote><p>直覺來說會覺得 <code>i</code> 是會按順序列出<br>結果是 <code>5 5</code><br>因為 for 設立的 <code>i</code> 會存在 global 中  </p><p><strong>試著把運作拆開來</strong> </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>當迴圈跑完時， <code>i</code> 是 5，<code>var i  = 5</code><br>因為 5 不符合迴圈條件跳出<br>所以不管 <code>arr[?]()</code>，直接印出 <code>i</code> 是 5    </p><h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><h4 id="閉包"><a href="#閉包" class="headerlink" title="閉包"></a>閉包</h4><p>把 function 獨立出來  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">logN</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//閉包，記住當下的 i</span><span class="token keyword">function</span> <span class="token function">logN</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//0</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="IIFE"><a href="#IIFE" class="headerlink" title="IIFE"></a>IIFE</h4><p>IIFE(Immediately Invoked Function Expression) 定義完就回傳的 function</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//拿到當下的 i</span>  arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//0</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把原本有名的函式改為匿名函式，用<code>()</code>包裹 function，尾巴是帶入參數<code>(參數)</code>，沒有的話為空</p><h4 id="ES6-的-let"><a href="#ES6-的-let" class="headerlink" title="ES6 的 let"></a>ES6 的 let</h4><p>上面出現的原因都是 <code>var</code> 的 scope 問題<br>ES6 的 let 將作用域限制在 block <code>&#123;&#125;</code>  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>只要 <code>var -&gt; let</code> ， 就解決問題了，離開之後就不會保留。</p></blockquote><h2 id="Closure-應用"><a href="#Closure-應用" class="headerlink" title="Closure 應用"></a>Closure 應用</h2><h3 id="Cache-暫存"><a href="#Cache-暫存" class="headerlink" title="Cache 暫存"></a>Cache 暫存</h3><p>計算量大的時候避免重新計算，預先把已算好的值存起來  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 複雜計算</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'calculate'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> num<span class="token operator">*</span>num<span class="token operator">*</span>num<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">cache</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 查看是不是有算過</span>  <span class="token keyword">var</span> ans <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//有的話回傳索引裡的值</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> ans<span class="token punctuation">[</span>num<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 沒有的話才做重新計算</span>    ans<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token keyword">return</span> ans<span class="token punctuation">[</span>num<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> cacheComplex <span class="token operator">=</span> <span class="token function">cahe</span><span class="token punctuation">(</span>complex<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">cacheComplex</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 第一次計算</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">cacheComplex</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 從 cache 拿到的值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">cacheComplex</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 從 cache 拿到的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用 <code>console.time</code> 計時執行的時間<br>比起直接用 complex 算再重新算<br>會發現第二次的計算的時間明顯縮短很多  </p><h3 id="隱匿資訊"><a href="#隱匿資訊" class="headerlink" title="隱匿資訊"></a>隱匿資訊</h3><p>想隱匿一些資訊，讓別人不可以直接更改。<br>把方法以及變數封裝在內部，別人要調用只能呼叫你規定好的方法。  </p><ul><li>以簡易計算機為例<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token parameter">initNum</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">var</span> sum <span class="token operator">=</span> initNum <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token function-variable function">add</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> sum <span class="token operator">+=</span>num<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token function-variable function">minus</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> sum <span class="token operator">-=</span>num<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token function-variable function">mutiply</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> sum <span class="token operator">*=</span>num<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token function-variable function">divided</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> sum<span class="token operator">/=</span>num<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token function-variable function">getresult</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> counter1 <span class="token operator">=</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">let</span> counter2 <span class="token operator">=</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>counter1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>counter2<span class="token punctuation">.</span><span class="token function">mutiply</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter1<span class="token punctuation">.</span><span class="token function">getresult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter2<span class="token punctuation">.</span><span class="token function">getresult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>一個簡單的計算機 (?)🤔<br>counter1 跟 counter2 並不會影響到彼此<br>我們只能透過現有的方法來修改 sum 的值  </li></ul><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>閉包讓我感覺是很神奇的東西<br>看起來不熟悉，但實際上我們都用到了🤔     </p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://lidemy.com/courses/enrolled/390599"> [JS201] 進階 JavaScript：那些你一直搞不懂的地方 </a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前學習閉包沒辦法很容易連結到&lt;br&gt;尤其 Function 有一堆名詞變異體&lt;br&gt;總會好奇實際的應用情境   &lt;/p&gt;
&lt;p&gt;那發生什麼問題才會使用到 Closure 呢?&lt;br&gt;又怎麼在真正的專案解決問題 ?   &lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>筆記 | JavaScript - Closure 閉包(I) 基礎概念</title>
    <link href="https://blog.rosa.tw/JavaScript/JavaScript-Closure-I/"/>
    <id>https://blog.rosa.tw/JavaScript/JavaScript-Closure-I/</id>
    <published>2022-04-13T13:51:39.000Z</published>
    <updated>2022-06-18T13:48:36.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Closure 是 JavaScript 很重要的基礎<br>藉由本篇幫助自己釐清 Closure 的概念  </p><span id="more"></span><h2 id="先認識-Scope-Chain"><a href="#先認識-Scope-Chain" class="headerlink" title="先認識 Scope Chain"></a>先認識 Scope Chain</h2><p><a href="https://blog.rosa.tw/Frontend/JavaScript/JavaScript-Hoisting-II/?highlight=scope#%E4%BD%9C%E7%94%A8%E5%9F%9F-Scope">Scope</a> 是變數生存的範圍，如果在自己層級找不到就會一層一層往外找，直到 Global 為止。  </p><p>這種行為就稱為「<strong>範圍鏈</strong>」(Scope Chain)。</p><blockquote><p>範圍鏈是在函式<strong>被定義的當下決定</strong> (lexical scope 來決定)的，不是在被呼叫的時候決定。</p></blockquote><h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'global'</span><span class="token keyword">function</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> a  <span class="token operator">=</span> <span class="token string">'change'</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// change</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">//global</span><span class="token punctuation">&#125;</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一開始會以為 <code>test()</code> 在 change 裡面呼叫，取得的變數 a 是 change 對不對 ? </p><p>NO NO NO,再重複一次 !      </p><blockquote><p>範圍鏈是在函式<strong>被定義的當下決定</strong> 的，不是在被呼叫的時候決定。</p></blockquote><p><code>test</code> 函式在 Lexical Environments 是 gloabal 的下一層，Scope Chain 是根據 Lexical scope 決定，往上找是 gloabl 那層，所以結果才會是 <code>&#39;global&#39;</code></p><h2 id="為什麼要有-Closure"><a href="#為什麼要有-Closure" class="headerlink" title="為什麼要有 Closure ?"></a>為什麼要有 Closure ?</h2><blockquote><p>反問 👉 <strong>沒有 Closure 會怎樣 ?</strong></p></blockquote><p>我們知道 Execution Context 執行環境在執行完 function 後，Stack 會抽掉，有關這個 function 的一切變數也會被回收而且不可再使用。</p><ul><li>如果要使用 function 裡的變數呢 ? (<code>private variable</code> 的概念)</li></ul><p>直覺可能會丟到 <code>global</code> 進行宣告，但當專案結構逐漸龐大，久而久之會造成 <strong>全域變數汙染</strong>  </p><p><strong>那閉包的出現解決了…</strong> :</p><ul><li>自由變數 (free variable)，只有在 function 內部可讀取變數，在外部則無法讀取。</li><li>變數暫存，減少重複的複雜計算</li></ul><h2 id="Closure-的優缺點"><a href="#Closure-的優缺點" class="headerlink" title="Closure 的優缺點"></a>Closure 的優缺點</h2><ul><li><p>優點 : </p><ol><li>避免 <strong>全域變數汙染</strong></li><li>提供 <strong>自由變數</strong>，讓該 function 執行完後，變數的作用域不會因 function 結束被回收，而是會繼續存在。</li><li>避免重複執行龐大的計算<br> 可以記錄前一次計算的狀態，下一次再呼叫不用重算一次 (cache 的概念)。  </li><li>在多人協作的時候，有些隱密的資訊不想讓人去修改，可以使用封裝閉包的方式。<br> 別人必須依照固定的寫法來取得資料，且不能修改到內部的資訊。<br> 在開源資料或 API 的方法常使用這樣的方式，以免改動到內部數值。</li></ol></li><li><p>缺點 :</p><ol><li>可能保留到一些不必要的變數或資訊，造成資源多餘消耗。</li><li>只能使用涵式提供的方法，因為內部的資訊被隱蔽，在更動上較不彈性。<br>  (但是相反如果不想要被改動會是優點)  </li></ol></li></ul><h2 id="什麼是閉包"><a href="#什麼是閉包" class="headerlink" title="什麼是閉包 ?"></a>什麼是閉包 ?</h2><p>除了自己本身的程式碼外，也可以取得了<strong>內部函式「當時環境」的變數值</strong>，記住了執行當時的環境，這就是「閉包」。 </p><h2 id="簡單的-Closure-範例"><a href="#簡單的-Closure-範例" class="headerlink" title="簡單的 Closure 範例"></a>簡單的 Closure 範例</h2><ul><li><p>沒有使用閉包  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> rate <span class="token operator">=</span> <span class="token number">.75</span><span class="token keyword">function</span> <span class="token function">itmePrice</span><span class="token punctuation">(</span><span class="token parameter">price</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> price <span class="token operator">>=</span> <span class="token number">100</span> <span class="token operator">?</span> price<span class="token operator">*</span>rate <span class="token operator">:</span> price<span class="token punctuation">&#125;</span>rate <span class="token operator">=</span> <span class="token number">.1</span> <span class="token keyword">let</span> bag <span class="token operator">=</span> <span class="token function">itmePrice</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以透過直接修改數值 (👎)<br>任何人都可以在外部進行修改</p></blockquote></li><li><p>使用閉包</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">itmePrice</span><span class="token punctuation">(</span><span class="token parameter">price</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 把 rate 變成私有變數</span><span class="token keyword">var</span> rate <span class="token operator">=</span> <span class="token number">.75</span><span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> price <span class="token operator">>=</span> <span class="token number">100</span> <span class="token operator">?</span> price<span class="token operator">*</span>rate <span class="token operator">:</span> price<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> bag <span class="token operator">=</span> <span class="token function">itmePrice</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>只要呼叫需要的東西即可 (👍)<br>不會被外部修改</p></blockquote></li></ul><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="https://blog.huli.tw/2018/12/08/javascript-closure/">所有的函式都是閉包：談 JS 中的作用域與 Closure - Huli</a></li><li><a href="https://javascript.info/closure#lexical-environment">Variable scope, closure</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10193009">重新認識 JavaScript: Day 19 閉包 Closure</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Closure 是 JavaScript 很重要的基礎&lt;br&gt;藉由本篇幫助自己釐清 Closure 的概念  &lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>筆記 | JavaScript - 事件機制原理 &amp; 事件代理</title>
    <link href="https://blog.rosa.tw/JavaScript/JavaScript-EventFlow-EventListener/"/>
    <id>https://blog.rosa.tw/JavaScript/JavaScript-EventFlow-EventListener/</id>
    <published>2022-04-12T02:24:14.000Z</published>
    <updated>2022-06-18T13:50:56.627Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>事件是什麼 ? 為什麼要用事件代理呢 ?<br>在不了解事件的流程與運作機制，是不是遇過點一下元素<br>結果跑出兩次以上的結果<br>透過本篇幫自己釐清事件各種大小事</p><span id="more"></span>  <h2 id="EventFlow-網頁元素接收事件的順序"><a href="#EventFlow-網頁元素接收事件的順序" class="headerlink" title="EventFlow : 網頁元素接收事件的順序"></a>EventFlow : 網頁元素接收事件的順序</h2><p><img data-src="https://dsm01pap006files.storage.live.com/y4m9V74R0Rbxh2VocqOo5K1vnxJNiyqAL1pr2Vw2o2yxenGxG5Uq3iMSm5n1bXDNs7hubkxY7rtnZfQtgz3tSNPDcX22k_WWBKKto5w_fnALPe1MSGDNDjlF11Yr7svwp8O0b8PmsLyMikVMa0Be3EWrsugI0ZsfWzkq9aYgX7R48Jm2YL0dJs6VWHvl3tqxowk?width=1208&height=1160&cropmode=none" alt="EventFlow"></p><ul><li><code>Capture phase</code> : 捕獲階段指由 <strong>上到下</strong> 傳下去的</li><li><code>Target phase</code> : 目標階段，本身被作用的目標才會在這個階段</li><li><code>Bubbling phase</code> : 冒泡階段 指由 <strong>下往上</strong> 傳去的</li></ul><p>透過 <code>e.eventPhase</code> 可以看見事件的階段<br>當我點下 link  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'link capturing'</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>eventPhase<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'link bubbling'</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>eventPhase<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'box capturing'</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>eventPhase<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'box bubbling'</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>eventPhase<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">box capturing <span class="token number">1</span>  <span class="token comment">// CAPTURING_PHASE</span>link capturing <span class="token number">2</span> <span class="token comment">// AT_TARGET </span>link bubbling <span class="token number">2</span> <span class="token comment">// AT_TARGET </span>box bubbling <span class="token number">3</span> <span class="token comment">// BUBBLING_PHASE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>出現的代碼就是事件的不同階段  </p><h3 id="事件冒泡-Event-Bubbling"><a href="#事件冒泡-Event-Bubbling" class="headerlink" title="事件冒泡 (Event Bubbling)"></a>事件冒泡 (Event Bubbling)</h3><p>啟動事件的元素往上傳遞到 <strong>根節點</strong> (document)  </p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>TITLE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>CLICK<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>冒泡傳遞方向 :<br>CLICK 事件本身元素 👉 body 👉 html 👉 document   </p><h3 id="事件捕獲-Event-Capturing"><a href="#事件捕獲-Event-Capturing" class="headerlink" title="事件捕獲 (Event Capturing)"></a>事件捕獲 (Event Capturing)</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>TITLE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>CLICK<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>捕獲傳遞方向 :<br>document 👉html 👉 body 👉CLICK 事件本身元素  </p><h3 id="事件是哪種機制"><a href="#事件是哪種機制" class="headerlink" title="事件是哪種機制 ?"></a>事件是哪種機制 ?</h3><p>兩種都會，當我按下按鈕，如果外層元素也有綁定 <strong>事件</strong>，同時也會被觸發</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.outer'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.inner'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>結果</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">hellohi <span class="token comment">// 冒泡而觸發</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>點擊 <code>inner</code> 時，同時出現 hello 跟 hi<br>因為冒泡的關係，outer 也被觸發。  </p><h3 id="事件的捕獲-amp-冒泡順序"><a href="#事件的捕獲-amp-冒泡順序" class="headerlink" title="事件的捕獲 &amp; 冒泡順序 ?"></a>事件的捕獲 &amp; 冒泡順序 ?</h3><ul><li><p>對於 <strong>非觸發事件</strong> 本身的元素</p><blockquote><p>先捕獲後冒泡</p></blockquote></li><li><p>事件本身<br>在以往的文章中都是 <strong>按照程式碼執行的順序</strong><br>當我試著執行後卻發現即使把冒泡放在前面，捕獲放後<br>一樣都是 <strong>先捕獲再冒泡</strong><br>仔細一查，才發現原來是 Chorme 89 以後的版本都會先捕獲再冒泡<br>89 之前的版本就會是看程式碼執行的順序    </p><blockquote><p>出現這樣的狀況是因為 shadow DOM 引起的，詳細原因請參考 <a href="https://juejin.cn/post/6965682915141386254#heading-2">這篇</a>  </p></blockquote></li></ul><p>所以，新版的瀏覽器不管是哪個都是 <strong>先捕獲再冒泡</strong>  </p><h2 id="事件的註冊綁定"><a href="#事件的註冊綁定" class="headerlink" title="事件的註冊綁定"></a>事件的註冊綁定</h2><ol><li><code>on-event</code> : 有 HTML 中 inline on-event；JS on-event 接 function</li><li><code>EventListener</code> : addEventListener、removeEventListener…等  </li></ol><h3 id="on-event"><a href="#on-event" class="headerlink" title="on-event"></a>on-event</h3><ol><li>Html <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre> 目前很少這樣寫，其一原因是不好維護  </li><li>非 Html <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.btn'</span><span class="token punctuation">)</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>我們最常看見 <code>window.onload</code> 也是事件的 on-event</p><h3 id="EventListener"><a href="#EventListener" class="headerlink" title="EventListener"></a>EventListener</h3><h4 id="addEventListener"><a href="#addEventListener" class="headerlink" title="addEventListener"></a>addEventListener</h4><p>有三個參數</p><ol><li>事件名稱</li><li>事件處理器 (觸發時執行的 function)</li><li>Boolen ，以 「捕獲」 或「冒泡」 機制執行， <code>false</code> (不指定) 為 冒泡</li></ol><blockquote><p>第三個布林值，不是改變事件傳遞的方式，而是在 <strong>哪裡進行監聽</strong></p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 冒泡</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'HI'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'HI'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 捕獲 </span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'HELLO'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="removeListener"><a href="#removeListener" class="headerlink" title="removeListener"></a>removeListener</h4><p>跟 addEventListener 一樣，如果要解除的話 handler 的 function 必須是同一個實體才行  </p><blockquote><p><strong>為什麼說是同一實體 ?</strong><br>回想這個例子 <code>&#123;&#125; === &#123;&#125; // false</code><br>function 也是 Object 的一種<br>匿名函式沒有指定給變數時，都是屬於不同的記憶體位址    </p></blockquote><p>事件監聽使用匿名函式的寫法，就像潑出去的水，回不來了 🤔  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'HI'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 移除事件，但是沒用</span>btn<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'HI'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解決此問題，把 handler 的 function <strong>獨立出來</strong>  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">clickhandler</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'HI'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>clickhandler<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 移除事件，ok!</span>btn<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>clickhandler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="on-event-v-s-EventListener"><a href="#on-event-v-s-EventListener" class="headerlink" title="on-event v.s EventListener"></a>on-event v.s EventListener</h3><ul><li><p><code>EventListener</code> : 可以重複指定多個「處理器」(handler) 給同一個元素的同一個事件</p></li><li><p><code>on-event</code> : 只認一個，後面多寫的會覆蓋前面的事件</p></li><li><p>on-event</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi!'</span><span class="token punctuation">)</span> <span class="token comment">// 不會出現</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello!'</span><span class="token punctuation">)</span> <span class="token comment">// 會出現 hello</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>EventListener</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi!'</span><span class="token punctuation">)</span> <span class="token comment">// 出現 hi</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello!'</span><span class="token punctuation">)</span> <span class="token comment">// 再出現 hello</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="EventHandler-中的-“event”"><a href="#EventHandler-中的-“event”" class="headerlink" title="EventHandler 中的 “event”"></a>EventHandler 中的 “event”</h2><p>事件物件會依照 <strong>觸發的事件</strong>(click、change) ，內容會有稍微不同<br>通常看到 <code>event</code> 寫成 <code>e</code> 、<code>evt</code> 是為了方便，也可以自訂譯名稱<br>只是大家會選擇有意義的名稱且好記    </p><p>可以試著在事件觸發印出 <code>e</code>   </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  常見的屬性   -   </span><span class="token template-punctuation string">`</span></span>type<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> : 表示事件的名稱-   </span><span class="token template-punctuation string">`</span></span>target<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> : 表示觸發事件的元素-   </span><span class="token template-punctuation string">`</span></span>bubbles<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> : 表示這事件是否是在「冒泡」階段觸發 (</span><span class="token template-punctuation string">`</span></span><span class="token boolean">true</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> / </span><span class="token template-punctuation string">`</span></span><span class="token boolean">false</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">)-   </span><span class="token template-punctuation string">`</span></span>pageX<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> / </span><span class="token template-punctuation string">`</span></span>pageY<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> : 表示事件觸發時，滑鼠座標在網頁的相對位置  ### 阻擋預設行為 event.preventDefault()>並不會阻止事件向上傳遞 (事件冒泡) </span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>javascript<span class="token keyword">let</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.link'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span> <span class="token comment">// 依然會出現</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>on-event</code> 在 eventhandler function 的<strong>最後</strong>加上 <code>return false;</code> 也會有 <code>event.preventDefault()</code> 的效果  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.link'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 等於 e.preventDefault()</span>link<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="應用範例一-表單-submit-前的檢查"><a href="#應用範例一-表單-submit-前的檢查" class="headerlink" title="應用範例一 : 表單 submit 前的檢查"></a>應用範例一 : 表單 submit 前的檢查</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>        帳號        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>        密碼        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用者按下 submit 按鈕會送出表單<br>前端可以先做驗證，確認使用者的輸入是不是符合   </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"form"</span><span class="token punctuation">)</span>form<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//先阻止送出</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> username <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"[name='username']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value    <span class="token keyword">let</span> password <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"[name='password']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value    <span class="token comment">// 檢查欄位</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>username<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'請輸入使用者帳號'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>password<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'請輸入密碼'</span><span class="token punctuation">)</span>    <span class="token comment">// 都有輸入就送出</span>    form<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="應用範例二-避免超連結造成網頁跳轉"><a href="#應用範例二-避免超連結造成網頁跳轉" class="headerlink" title="應用範例二 : 避免超連結造成網頁跳轉"></a>應用範例二 : 避免超連結造成網頁跳轉</h4><p>按下 <code>a</code> 的時候會找網頁的錨點，如果沒有的話會跳 <code>#</code> 井字號<br>如果不想要出現井字號呢 ?<br>有些是對外連結，有些是內連結使用，總不能阻擋每個吧 !</p><p>這邊用我使用 <code>class</code> 分開外部連結</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>www.example.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是普通超連結<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>gotoTop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 選沒有 link class 的 a 標籤</span><span class="token keyword">let</span> actionLink <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'a:not(.link)'</span><span class="token punctuation">)</span>actionLink<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token parameter">a</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    a<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 判斷各個 actionLink 要做的事</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這樣就可以分出哪些是外部連結，哪些是內網頁連結，而且不會出現 <code>#</code> 井字號 😃</p><h3 id="阻擋事件冒泡傳遞-event-stopPropagation"><a href="#阻擋事件冒泡傳遞-event-stopPropagation" class="headerlink" title="阻擋事件冒泡傳遞 event.stopPropagation()"></a>阻擋事件冒泡傳遞 event.stopPropagation()</h3><blockquote><p>阻止的動作，加在冒泡發生的元素上</p></blockquote><p>如果不要讓 box 出現，加在想停止冒泡的地方 <code>event.stopPropagation()</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.link'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 這裡會發生冒泡，要阻止上傳</span>link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span> <span class="token comment">// 不會出現</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以試著註解 <code>e.stopPropagation();</code> 會發現當你按下 link<br>因為 link 冒泡機制導致 box 的事件也觸發而印出 <code>&#39;box&#39;</code></p><h4 id="阻止任何的傳遞-event-stopImmediatePropagation"><a href="#阻止任何的傳遞-event-stopImmediatePropagation" class="headerlink" title="阻止任何的傳遞 event.stopImmediatePropagation()"></a>阻止任何的傳遞 event.stopImmediatePropagation()</h4><p>如果同一個元素有掛兩個 <code>addEventListener</code><br>點擊時兩個都會在 <code>Target phase</code><br>A 跟 B 事件一樣會觸發<br>在 A 加入 <code>stopImmediatePropagation()</code> 會把 B 停掉  </p><p>以上面的例子來說，link 掛兩個事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// A 事件</span>link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  e<span class="token punctuation">.</span><span class="token function">stopImmediatePropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i am A'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// B 事件</span>link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i am B'</span><span class="token punctuation">)</span> <span class="token comment">//不會出現，在 A target pharse 阻止 B 冒泡階段發生</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span> <span class="token comment">// 不會出現，因為阻止了冒泡</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="應用範例-label-amp-input"><a href="#應用範例-label-amp-input" class="headerlink" title="應用範例 : label &amp; input"></a>應用範例 : label &amp; input</h4><p>label 跟 input 的組合需要多一個 id<br>為了不浪費 id，我們常常會用 label 把 input 包起來。  </p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>開關<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>label</code> 綁上監聽事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> labelone<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'label'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>labelone<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>神奇的是，hi 會出現兩次<br>checkbox 也會接收到 click 事件，改變了狀態<br>發生冒泡到 label 元素，再次觸發 label 的事件    </p><p><strong>重點複習</strong>  </p><blockquote><p><strong>阻止的動作，加在冒泡發生的元素上</strong></p></blockquote><p>冒泡發生的是 <strong>input</strong> ，所以 <code>stopPropagation</code> 是要加在 input 而非 label</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> labelone<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'label'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> inputone<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>labelone<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>inputone<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事件-“本身”-指的是-target-v-s-currentTarget-this"><a href="#事件-“本身”-指的是-target-v-s-currentTarget-this" class="headerlink" title="事件 “本身” 指的是 ? target v.s currentTarget (this)"></a>事件 “本身” 指的是 ? target v.s currentTarget (this)</h3><p>我們知道在 function 當中是可以使用 <code>this</code><br>那這邊的 <code>this</code> 是指什麼呢 ?   </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> labelone<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'label'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>labelone<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tagName<span class="token punctuation">)</span> <span class="token comment">// LABEL</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>this</code> 代表的會是「觸發事件的<strong>目標</strong>」元素<br>也就是 <code>event.currentTarget</code> 而不是 <code>e.target</code>。</p></blockquote><p>那 <code>e.target</code> 指的是 ?</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> labelone<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'label'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>labelone<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tagName<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> inputone<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inputone<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tagName<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>點擊 label</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"LABEL"</span> <span class="token number">1</span> <span class="token comment">// e.target</span><span class="token string">"LABEL"</span> <span class="token number">1</span> <span class="token comment">// this</span><span class="token string">"INPUT"</span> <span class="token number">2</span> <span class="token comment">// e.target</span><span class="token string">"INPUT"</span> <span class="token number">2</span> <span class="token comment">// this</span><span class="token string">"INPUT"</span> <span class="token number">1</span> <span class="token comment">// checkbox 冒泡上來的而觸發 labelone，e.target</span><span class="token string">"LABEL"</span> <span class="token number">1</span> <span class="token comment">// checkbox 冒泡上來的而觸發 labelone， this</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>e.target</code> 其實是「觸發事件的元素」</p></blockquote><p>如果不考慮事件傳遞的情況下，<code>this</code> 實質上就等同於 <code>e.target</code> 了。</p><h2 id="事件指派-Event-Delegation"><a href="#事件指派-Event-Delegation" class="headerlink" title="事件指派 (Event Delegation)"></a>事件指派 (Event Delegation)</h2><p>用 JavaScript 新增的元素並不會綁到事件  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> items <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.list-item'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 一個個手動加入</span>items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> newItem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'LI'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> txt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">creatTextNode</span><span class="token punctuation">(</span><span class="token string">'new'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newIten<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span>list<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newItem<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>newItem</code> 不會有 click 事件<br>為避免每次新增要重新綁定事件，又要移除監聽，造成 memory leak 的嚴重問題<br><strong>事件指派</strong> 是比較好的做法。</p><p><strong>事件代理人</strong> 透過判斷 <strong>目標節點</strong>，再執行動作</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// list 直接看底下的子元素</span>list<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> newItem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'LI'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> txt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">creatTextNode</span><span class="token punctuation">(</span><span class="token string">'new'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newIten<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span>list<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newItem<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>搭拉 ! <code>newItem</code> 就有點擊的效果</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>事件是 JavaScript 的基本，當我們了解機制的運作<br>遇到奇怪的觸發多次時，記得想起事件的流程  </p><blockquote><p>先捕獲再冒泡  </p></blockquote><p>還有相關的  </p><ul><li>阻止預設行為 <code>preventDefault</code> </li><li>阻擋冒泡行為 <code>stopPropagtion</code></li></ul><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="https://ithelp.ithome.com.tw/articles/10191970">重新認識 JavaScript: Day 14 事件機制的原理</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10192015">重新認識 JavaScript: Day 15 隱藏在 “事件” 之中的秘密</a></li><li><a href="https://blog.techbridge.cc/2017/07/15/javascript-event-propagation/">DOM 的事件傳遞機制：捕獲與冒泡</a></li><li><a href="https://juejin.cn/post/6965682915141386254#heading-2">Chrome 89 更新事件触发顺序，导致99%的文章都错了（包括MDN）</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;事件是什麼 ? 為什麼要用事件代理呢 ?&lt;br&gt;在不了解事件的流程與運作機制，是不是遇過點一下元素&lt;br&gt;結果跑出兩次以上的結果&lt;br&gt;透過本篇幫自己釐清事件各種大小事&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSSZeroToOneSeries  | 10 | 破格式設計</title>
    <link href="https://blog.rosa.tw/Front-end/CSSSeriesZeroToOne-10/"/>
    <id>https://blog.rosa.tw/Front-end/CSSSeriesZeroToOne-10/</id>
    <published>2022-04-10T04:36:53.000Z</published>
    <updated>2022-06-18T13:48:00.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/QWOZgzP">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4mc1SNrsZu-Jd9u35WNRJfQgL79lh5rKUE-T708KZoUgmfj1e0iFbqwtXItGPmNayXFew5OcaISpno8uR1h5a0KOuWpfs9NvwytLMedU4ijzl-h2mJT3AKapQU7kA5rNBSPp_QOV-6viFwczOvlSgU65TDbCQlby6ccQSZ4Rvcith2HND8fQOqhBUHkD3FrJAo?width=1024&height=586&cropmode=none" alt="破格式設計"></p><span id="more"></span><h3 id="margin-值的數量"><a href="#margin-值的數量" class="headerlink" title="margin 值的數量"></a>margin 值的數量</h3><ul><li>兩個數值<br>  margin : &lt;上下&gt;  &lt;左右&gt;</li><li>四個數值<br>  margin : &lt;上&gt; &lt;右&gt; &lt;下&gt; &lt;左&gt;</li><li>三個數值<br>  margin : &lt;上&gt; &lt;左右&gt; &lt;下&gt;</li></ul><p>比較常用到置中 <code>margin : 0 auto</code>，auto 是把剩餘的空間分配給左右，因此才會置中。<br>實際上 margin : auto ，雖然是寫全部自動分配，但是 <a href="https://www.zhihu.com/question/21644198">上下並沒有作用</a>。  </p><p>css 的預設 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/writing-mode">write-mode (書寫模式)</a> 的方向是 <strong>水平</strong> 的，當我們用 margin-top : auto 或 margin-bottom : auto ，因為高度並無固定值，無法參照，剩餘空間也是 0 。</p><h3 id="line-height-單行垂直居中"><a href="#line-height-單行垂直居中" class="headerlink" title="line-height 單行垂直居中"></a>line-height 單行垂直居中</h3><p>如果是文字單行居中容器，可以把 <code>line-height</code> 設定跟容器高一樣  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span><span class="token punctuation">&#123;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="border-區塊位置計算-要記得扣掉"><a href="#border-區塊位置計算-要記得扣掉" class="headerlink" title="border 區塊位置計算 : 要記得扣掉"></a>border 區塊位置計算 : 要記得扣掉</h3><p>實作是 icon 的利用 <code>:before</code> 的 border 做圓框，粗度是 10 px。<br><code>top : 0、left : 0</code>，把版面定位到父層起始左上角一樣，此時 border 粗度上下左右都會增長 10px，如果要置中，必須把 border 多出來的在 top、left 扣掉，元素才能擺到中間填滿。  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.icon:before</span><span class="token punctuation">&#123;</span><span class="token property">position</span> <span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 10px solid red<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> -10px<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> -10px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token property">width</span> <span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="border-上下左右的呈現方式"><a href="#border-上下左右的呈現方式" class="headerlink" title="border 上下左右的呈現方式"></a>border 上下左右的呈現方式</h3><p>以半圓框為例，我們知道 border 的切齊點是對角線 (下圖)，變成圓形的話，上下左右並不是剛好從 0 切齊到 90 度<br>如果想要得到半圓，必須是鄰近兩個 border 再做旋轉 45 度。   </p><ul><li>width、height 為 0 ，單純的 border  </li></ul><p><img data-src="https://dsm01pap006files.storage.live.com/y4mVu7eeg2awMupFoD5T_nq55dVmzodISxqWR8paqvV46NhzCf4-VPLWZ0Xlm_JLUFsOCEGTcqVb6SoH4icdXFX9V3ZLR39nFB5YYYyNr-ENP529_4MNud_lE-ksXUdUOblMf7y8cah3KcaOjNIgJr_9l8o-fXeE4FZotOCa1CSDMl5pHcz4tP-0UtZeuurM5DG?width=496&height=488&cropmode=none" alt="純 border 圓形">  </p><blockquote><p>正確的半圓是相鄰兩邊的 border 組合出來的<br>像是 <a href="../CSSSeriesZeroToOne-03/#%E8%A3%9C%E5%85%85-%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E9%99%B0%E5%BD%B1">03 篇</a>能出現陰影的三角形一樣的概念</p></blockquote><h3 id="子層物件整體高度超出父層-padding-擠回去"><a href="#子層物件整體高度超出父層-padding-擠回去" class="headerlink" title="子層物件整體高度超出父層 : padding 擠回去"></a>子層物件整體高度超出父層 : padding 擠回去</h3><p>因為 icon margin-top 是 -75 px，比原本父層凸出 75 px ，必須在整體的 padding 把多的補回去，把子容器的元素都包含在內。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="https://www.zhihu.com/question/21644198">为什么「margin:auto」可以让块级元素水平居中？</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;本篇成果&quot;&gt;&lt;a href=&quot;#本篇成果&quot; class=&quot;headerlink&quot; title=&quot;本篇成果&quot;&gt;&lt;/a&gt;本篇成果&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codepen.io/shan473/pen/QWOZgzP&quot;&gt;Codepen&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://dsm01pap006files.storage.live.com/y4mc1SNrsZu-Jd9u35WNRJfQgL79lh5rKUE-T708KZoUgmfj1e0iFbqwtXItGPmNayXFew5OcaISpno8uR1h5a0KOuWpfs9NvwytLMedU4ijzl-h2mJT3AKapQU7kA5rNBSPp_QOV-6viFwczOvlSgU65TDbCQlby6ccQSZ4Rvcith2HND8fQOqhBUHkD3FrJAo?width=1024&amp;height=586&amp;cropmode=none&quot; alt=&quot;破格式設計&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Front-end" scheme="https://blog.rosa.tw/categories/Front-end/"/>
    
    
    <category term="CSS" scheme="https://blog.rosa.tw/tags/CSS/"/>
    
    <category term="CSSZeroToOneSeries" scheme="https://blog.rosa.tw/tags/CSSZeroToOneSeries/"/>
    
  </entry>
  
  <entry>
    <title>CSSZeroToOneSeries | 09 | 方塊酥版</title>
    <link href="https://blog.rosa.tw/Front-end/CSSSeriesZeroToOne-09/"/>
    <id>https://blog.rosa.tw/Front-end/CSSSeriesZeroToOne-09/</id>
    <published>2022-04-10T04:36:49.000Z</published>
    <updated>2022-06-18T13:47:58.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/wvPYowG?editors=0100">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4mRHJR5nKjd7Mry0fH-Eevw_EuUBALAe_xSDwFAsLc-jhOf9MVukfDscCyR0aOVgn_lXXMo0TTA9P005lZ17bfeeA1u1cH1pUKDVEDHN8e9zgJptSKT1iav8eWY0i6YhYCS8uM0UuTvFQpSWlDK4sLzuIjHGVDA8aLixITKrKveAHX73wjxjTY1VgK64Xx19fM?width=1024&height=585&cropmode=none" alt="方塊酥版"></p><span id="more"></span><h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><p>子層設定 float 的時候，會脫離原本的排版序，會導致父層的高度錯誤或抓不到，就要清除浮動 (clearfix)，以免後面的元素不照順序擠上來。</p><h4 id="清除浮動-overflow"><a href="#清除浮動-overflow" class="headerlink" title="清除浮動 : overflow"></a>清除浮動 : overflow</h4><blockquote><p>父層消除 float </p></blockquote><p>父層 <code>overflow:hidden</code> ，讓父層可以抓到子層的高度。<br>overflow 是處理多餘的內容，hidden 隱藏起來</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>左邊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>右邊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我要在下面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #fa0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.left</span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span>80%<span class="token punctuation">;</span>  <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span>20%<span class="token punctuation">;</span>  <span class="token property">float</span><span class="token punctuation">:</span>right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="清除浮動-多一個-clearfix-元素"><a href="#清除浮動-多一個-clearfix-元素" class="headerlink" title="清除浮動 : 多一個 clearfix 元素"></a>清除浮動 : 多一個 clearfix 元素</h4><blockquote><p>重點在於子元素，如果下一個想要按照自己的流向排，可以在前面加上 <code>clearfix</code> 斬斷 float 的排版</p></blockquote><p>在想要正常排版在子元素屁股後面，設定 <code>clear : both</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>float 左邊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>float 右邊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>按照老方法往下排<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.left</span><span class="token punctuation">&#123;</span> <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span><span class="token punctuation">&#123;</span> <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.clearfix</span><span class="token punctuation">&#123;</span><span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按下開關可以看有無 float 的效果   </p><iframe height="300" style="width: 100%;" scrolling="no" title="float clearfix" src="https://codepen.io/shan473/embed/NWwObjj?default-tab=result&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/shan473/pen/NWwObjj">  float clearfix</a> by YanShanHong (<a href="https://codepen.io/shan473">@shan473</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe><h4 id="清除浮動-父層-after"><a href="#清除浮動-父層-after" class="headerlink" title="清除浮動 : 父層 :after"></a>清除浮動 : 父層 :after</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>左邊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>右邊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我要在下面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #fa0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box >div</span><span class="token punctuation">&#123;</span><span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box:after</span><span class="token punctuation">&#123;</span><span class="token property">content</span> <span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span><span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>偽元素一定要設定 <code>block</code>，讓寬度撐開  </p></blockquote><h3 id="波浪號選擇器"><a href="#波浪號選擇器" class="headerlink" title="~ 波浪號選擇器"></a>~ 波浪號選擇器</h3><p>波浪號是兄弟選擇器，在同一層的後面兄弟都選起來</p><p>常用 <strong>第一個  ~  到底的元素</strong> 都選起來，<a href="../CSSSeriesZeroToOne-08.md">08 篇</a> 的麵包屑除了 <code>(p + p)</code>，波浪號也可以使用</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>no.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>no.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>no.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>no.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p:first-child ~p</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>另一種是想選到同一層的某個東西(們)，除了直接選取外，也可以透過 波浪號</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是一段文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是 span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是 span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>我是連結<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>我是連結<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是 span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p~a</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="not-排擠你"><a href="#not-排擠你" class="headerlink" title=":not : 排擠你"></a>:not : 排擠你</h3><p>屬於逆向思考，如果要選取除了第一個以外的其他方框，除了用波浪號</p><ul><li>一般波浪號排擠  </li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>波浪號式排擠<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>一號走開<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>一號走開<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>一號走開<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p~p</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>:not</code> : 排擠，麻瓜翻譯機，要選到 <strong>非第一個的 p</strong></li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p:not(:first-child)</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="試著用-Grid"><a href="#試著用-Grid" class="headerlink" title="試著用 Grid"></a>試著用 Grid</h2><p>同樣的架構，把 float 去除，利用軌道線進行排版。<br><a href="https://codepen.io/shan473/pen/ZEvRByL?editors=0100">Codepen</a></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.wrapper</span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span>grid<span class="token punctuation">;</span>  <span class="token property">grid-template</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>3<span class="token punctuation">,</span>1fr<span class="token punctuation">)</span> / <span class="token function">repeat</span><span class="token punctuation">(</span>4<span class="token punctuation">,</span>1fr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.item:first-child</span><span class="token punctuation">&#123;</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> 1 / 1 / 3 / 3<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="https://medium.com/ui-ux%E7%B7%B4%E5%8A%9F%E5%9D%8A/%E8%A7%A3%E9%99%A4-float-%E5%B1%AC%E6%80%A7%E7%9A%84%E6%96%B9%E6%B3%95-5e29cc30777d">解除 float 屬性的方法. 使用 float 屬性一定要清除浮動，否則會有版面錯置或失去高度的情況</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;本篇成果&quot;&gt;&lt;a href=&quot;#本篇成果&quot; class=&quot;headerlink&quot; title=&quot;本篇成果&quot;&gt;&lt;/a&gt;本篇成果&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codepen.io/shan473/pen/wvPYowG?editors=0100&quot;&gt;Codepen&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://dsm01pap006files.storage.live.com/y4mRHJR5nKjd7Mry0fH-Eevw_EuUBALAe_xSDwFAsLc-jhOf9MVukfDscCyR0aOVgn_lXXMo0TTA9P005lZ17bfeeA1u1cH1pUKDVEDHN8e9zgJptSKT1iav8eWY0i6YhYCS8uM0UuTvFQpSWlDK4sLzuIjHGVDA8aLixITKrKveAHX73wjxjTY1VgK64Xx19fM?width=1024&amp;height=585&amp;cropmode=none&quot; alt=&quot;方塊酥版&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Front-end" scheme="https://blog.rosa.tw/categories/Front-end/"/>
    
    
    <category term="CSS" scheme="https://blog.rosa.tw/tags/CSS/"/>
    
    <category term="CSSZeroToOneSeries" scheme="https://blog.rosa.tw/tags/CSSZeroToOneSeries/"/>
    
  </entry>
  
  <entry>
    <title>CSSZeroToOneSeries | 08 | 網站麵包屑</title>
    <link href="https://blog.rosa.tw/Front-end/CSSSeriesZeroToOne-08/"/>
    <id>https://blog.rosa.tw/Front-end/CSSSeriesZeroToOne-08/</id>
    <published>2022-04-10T04:36:38.000Z</published>
    <updated>2022-06-18T13:47:56.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/MWOqRoJ">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4m2Ut7v52DvB4HXKmhJiPfdh0fC0SYoIg5T6XnWySFOIDNRpNgeG6BkVMmRRZ1qoFlUYVdtq9et8hdrrwbuKF_IqtJFFUTFY2ZI0HDP4tw4ma1Jx9JaMbE6WmvD7YYOv32FJlbpmUwIGLUMzWi1CyKgXyGm598Nl1TZPipEnVfdXC5t8p5GdEi7KevsBdw7Zou?width=1024&height=585&cropmode=none" alt="麵包屑"></p><span id="more"></span><h2 id="before-偽元素"><a href="#before-偽元素" class="headerlink" title="::before 偽元素"></a>::before 偽元素</h2><p><code>::before</code> 或是 <code>:before</code> 寫法都可以<br>利用 <code>content</code> 內容產生的箭頭，可以隨時替換<br>箭頭也屬裝飾性，不用再特別寫 html tag  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.breadcrumb li + li:before</span><span class="token punctuation">&#123;</span><span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'>'</span><span class="token punctuation">;</span><span class="token property">padding-left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>content 覺得圖案太少，也可以利用網頁編碼 UTF-8 的特殊字元來顯示</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.breadcrumb li + li:before</span><span class="token punctuation">&#123;</span><span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'\003E'</span><span class="token punctuation">;</span><span class="token property">padding-left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>這兩者是一樣的，但前提是要在 html 加入 <code>&lt;meta charset=&quot;utf-8&quot;&gt;</code> 設定編碼<br>參考 : <a href="https://www.toptal.com/designers/htmlarrows/">快速編碼箭頭</a></p><h2 id="再深入偽元素"><a href="#再深入偽元素" class="headerlink" title="再深入偽元素"></a>再深入偽元素</h2><h3 id="偽元素出現的位置"><a href="#偽元素出現的位置" class="headerlink" title="偽元素出現的位置 ?"></a>偽元素出現的位置 ?</h3><p>偽元素需要經過瀏覽器的運算跟渲染之後才會出現，所以 <strong>檢視原始碼</strong> 是看不到的</p><h3 id="content"><a href="#content" class="headerlink" title="content"></a>content</h3><p>偽元素一定要有 <code>content</code> ，不然就不會出現了<br>其中 content 包含各式各樣的屬性  </p><ol><li> none</li><li> normal</li><li> <code>string</code></li><li> url</li><li> <code>counter</code></li><li> <code>attr</code></li><li> open-quote</li><li> close-quote</li><li> no-open-quote</li><li> no-close-quote</li></ol><p>這邊舉例常見的幾個樣式  </p><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>一般的文字或是空內容，拿來裝飾元素<br>像本篇的箭頭就是 string   </p><h3 id="counter-讓-css-數數"><a href="#counter-讓-css-數數" class="headerlink" title="counter : 讓 css 數數"></a>counter : 讓 css 數數</h3><p>在父層新建一個 reset 計時器<br><code>counter-reset : &lt;計時器名稱&gt; &lt;起始值&gt;</code>，如果沒有寫起始值是從 0 開始  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span><span class="token property">counter-reset</span><span class="token punctuation">:</span> Section 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其實也可以多層  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span><span class="token property">counter-reset</span><span class="token punctuation">:</span> Section 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">section</span><span class="token punctuation">&#123;</span>  <span class="token property">counter-reset</span><span class="token punctuation">:</span> P 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">section:before</span><span class="token punctuation">&#123;</span><span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'Section'</span> <span class="token function">counter</span><span class="token punctuation">(</span>Section<span class="token punctuation">)</span><span class="token string">' .'</span><span class="token punctuation">;</span><span class="token property">counter-increment</span><span class="token punctuation">:</span> Section 1<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">p:before</span><span class="token punctuation">&#123;</span><span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'P'</span> <span class="token function">counter</span><span class="token punctuation">(</span>Section<span class="token punctuation">)</span><span class="token string">'-'</span><span class="token function">counter</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token string">' .'</span><span class="token punctuation">;</span><span class="token property">counter-increment</span><span class="token punctuation">:</span> P 1<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子層的偽元素可以使用 counter 進行計數</p><ul><li>content : counter(<code>&lt;計數器名稱&gt;</code>)</li><li>counter-increment : <code>&lt;計數器名稱&gt; &lt;要增加的數字&gt;</code> 也可以是負數       </li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span><span class="token property">counter-reset</span><span class="token punctuation">:</span> Title<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h1:before</span><span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'Title '</span><span class="token function">counter</span><span class="token punctuation">(</span>Title<span class="token punctuation">)</span><span class="token string">' .'</span><span class="token punctuation">;</span>  <span class="token property">counter-increment</span><span class="token punctuation">:</span> Title 1<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="attr"><a href="#attr" class="headerlink" title="attr"></a>attr</h3><p>可以拿到 <code>data-</code> 屬性的值，如果跟資料有關的不要放在偽元素，瀏覽器在解析時是讀取不到的。  </p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">data-title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>商店<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">data-title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>品項<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">data-title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>貨物<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">span:before</span><span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">attr</span><span class="token punctuation">(</span>data-title<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><iframe height="300" style="width: 100%;" scrolling="no" title="css counter" src="https://codepen.io/shan473/embed/podGNON?default-tab=result&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/shan473/pen/podGNON">  css counter</a> by YanShanHong (<a href="https://codepen.io/shan473">@shan473</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe><h3 id="url-沒作用的圖片"><a href="#url-沒作用的圖片" class="headerlink" title="url 沒作用的圖片"></a>url 沒作用的圖片</h3><p>content 中的 <a href="http://csscoke.com/2013/09/22/%E4%BD%BF%E7%94%A8before-%E8%88%87-after%E4%BE%86%E8%A3%BD%E4%BD%9C%E5%8F%AF%E5%88%97%E5%8D%B0%E7%9A%84logo%E5%9C%96%E7%89%87/">url 圖片雖然能被列印出來</a>，但不能調整寬高尺寸，只能利用 scale 來縮放。</p><p>根據 <a href="https://segmentfault.com/q/1010000004569689">這篇文</a>，偽元素預設是 inline 的一種，就算調成 block，因為 content 並不是實際計算範圍，block 算的是匿名元素的 <code>width</code> 跟 <code>height</code>  </p><p>真的想放圖片可以使用 background-imge，再透過 background-size 調整大小，但是就不能被影印</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>為了 SEO 著想，偽元素出現在裝飾性上就好，資訊類就不建議了</p><h2 id="兄弟選擇器-，我的隔壁"><a href="#兄弟選擇器-，我的隔壁" class="headerlink" title="兄弟選擇器 (+) ，我的隔壁"></a>兄弟選擇器 (+) ，我的隔壁</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>排擠我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我有<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我有<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我是防守員<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>排擠我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我有<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">a + a</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在 sass 會寫 <code>&amp; + &amp;</code>，通常是排除第一個，因為第一個的前面並沒有元素  </p><p>或者寫 <code>:not</code> 把第一個給排除掉  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">a</span><span class="token punctuation">:</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token punctuation">:</span>first-child<span class="token punctuation">)</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="網頁色彩-HSL"><a href="#網頁色彩-HSL" class="headerlink" title="網頁色彩 HSL"></a>網頁色彩 HSL</h2><p><code>hsl (色相角度&lt;0~360&gt; , 色彩飽和度 , 色彩的明度 )</code><br>色彩是 RGB，分別各佔 120 度    </p><p><a href="http://csscoke.com/2015/01/01/rgb-hsl-hex/"><img data-src="https://dsm01pap006files.storage.live.com/y4mzaFTHqTQKFWQ2sQ_sISqYOCtvikOQA4Dmli4z7vpaNjUQ7Nirr4UbVRGbiS9uCI9vba3kPgs7-_xx4wqwjkXxMs-VnajXcBBhswICqcXV54qi9lLN5lSAO_A-G5MdHISuaULUSfhoHKbgA1KFfLD6bcojrfSyoJJqCwIodr7i0AGpp8ainTKi0Fl7MV7y3XO?width=500&height=424&cropmode=none" alt="HSL 色相環圖片"> 來自《RGB、HSL、Hex 網頁色彩碼，看完這篇全懂了 | CSS可樂》</a>  </p><ul><li><code>Hue</code> : 色相</li><li><code>Saturation</code> : 飽和度。 預設是 100%，越低越接近灰黑</li><li><code>Lightness</code> : 亮度。 預設是 50%。 有點像相機的曝光度，增加白色或黑色的量</li></ul><p>例 :  綠色  <code>hsl (120,100%,50%)</code></p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="https://segmentfault.com/q/1010000004569689">伪类before/after中的图片大小是不是不能设置的? - SegmentFault 思否</a>   </li><li><a href="http://csscoke.com/2013/09/22/%E4%BD%BF%E7%94%A8before-%E8%88%87-after%E4%BE%86%E8%A3%BD%E4%BD%9C%E5%8F%AF%E5%88%97%E5%8D%B0%E7%9A%84logo%E5%9C%96%E7%89%87/">使用::before 與 ::after來製作可列印的logo圖片</a>  </li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;本篇成果&quot;&gt;&lt;a href=&quot;#本篇成果&quot; class=&quot;headerlink&quot; title=&quot;本篇成果&quot;&gt;&lt;/a&gt;本篇成果&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codepen.io/shan473/pen/MWOqRoJ&quot;&gt;Codepen&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://dsm01pap006files.storage.live.com/y4m2Ut7v52DvB4HXKmhJiPfdh0fC0SYoIg5T6XnWySFOIDNRpNgeG6BkVMmRRZ1qoFlUYVdtq9et8hdrrwbuKF_IqtJFFUTFY2ZI0HDP4tw4ma1Jx9JaMbE6WmvD7YYOv32FJlbpmUwIGLUMzWi1CyKgXyGm598Nl1TZPipEnVfdXC5t8p5GdEi7KevsBdw7Zou?width=1024&amp;height=585&amp;cropmode=none&quot; alt=&quot;麵包屑&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Front-end" scheme="https://blog.rosa.tw/categories/Front-end/"/>
    
    
    <category term="CSS" scheme="https://blog.rosa.tw/tags/CSS/"/>
    
    <category term="CSSZeroToOneSeries" scheme="https://blog.rosa.tw/tags/CSSZeroToOneSeries/"/>
    
  </entry>
  
  <entry>
    <title>CSSZeroToOneSeries | 07 | 導覽列 &amp; 變化導覽列</title>
    <link href="https://blog.rosa.tw/Front-end/CSSSeriesZeroToOne-07/"/>
    <id>https://blog.rosa.tw/Front-end/CSSSeriesZeroToOne-07/</id>
    <published>2022-04-09T14:46:25.000Z</published>
    <updated>2022-06-18T13:47:53.629Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/abVaLWx">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4m9T4H16Ta75kDzYcQq5DvDiixK4mUT7-zgyeMbwFltHZbFafI5uejyNEI2PKXuVsHwbitph6KpHB-W1twOqWHvFYJXV0ZHqpaK31pEbAbsnH7ffzVJrY4jCn-DQT8BuQlWSI7mhiwxpMOte8vgXL82SlBMc9CDVnRs4GQaX5zSfAIPFEVdD6wo429FOHMt4kh?width=1024&height=133&cropmode=none" alt="導覽列"></p><p>LOGO 放中央的四種不同寫法導覽列<br><a href="https://codepen.io/shan473/pen/NWwLwmZ">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4mxh2kVWQGz5Y5blS98ignQpvNJzpOWFoegrfNdnwioXN37pRMs_UAXWIjV38dGFgg2z4HSQGInRsfJzwzxhUc1-TL4o4jsjhWV_PINth18C_qZ2JEo-KuJm3UAaU8ePorHvVKZABYHV6LJ9mgFTP4YdVPGUP2DmOSCmHehmX01KVzjrVlFs-xp9IVKe_3hKWO?width=660&height=444&cropmode=none" alt="變化導覽列"></p><span id="more"></span><h3 id="max-width-最大寬度"><a href="#max-width-最大寬度" class="headerlink" title="max-width : 最大寬度"></a>max-width : 最大寬度</h3><p>避免現代螢幕過寬(高解析度螢幕)導致元素被擠在邊邊，如果原本是 width 是填滿的情況，使用 <code>display : flex，justify-content : space-between</code>，元素會被分散在螢幕的邊邊角角。 </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">&#123;</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="input-focus"><a href="#input-focus" class="headerlink" title="input : focus"></a>input : focus</h3><p>input 在打字時會有預設的外框線 **(outline)**，可以把框線消失，讓視覺體驗更加。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">input:foucs</span><span class="token punctuation">&#123;</span>  <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="a-tag-不能-transform-的原因"><a href="#a-tag-不能-transform-的原因" class="headerlink" title="a tag 不能 transform 的原因"></a>a tag 不能 transform 的原因</h3><p>幫連結加上浮上去的漸變動畫， a 的預設 display 是 <code> inline</code>，會發現直接加上去 a 並不會有變化。  </p><p>實際上 inline 屬性的元素並不支援，修改 display 屬性就可以了。</p><p>參考 : </p><ul><li><a href="https://stackoverflow.com/questions/14883250/css-transform-doesnt-work-on-inline-elements">CSS transform doesn’t work on inline elements - Stack Overflow</a></li></ul><blockquote><p>根據 CSS 規格書，有提到區塊元素或者 <code>inline-auto</code> 這類才可以 transform。 </p></blockquote><h3 id="border-畫線效果"><a href="#border-畫線效果" class="headerlink" title="border 畫線效果"></a>border 畫線效果</h3><p>position 讓我們可以利用 top、bottom、left、right 四邊進行定位，也可以撐開全版面。<br>也可以利用偽元素的 <code>left</code>、<code>right</code> 來創造線條收縮的效果。  </p><blockquote><p>為什麼用偽元素 ? 這邊的底線只是 <strong>裝飾作用</strong> 不具任何資訊，盡量不要創造新的 tag 來裝</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container nav a:after</span><span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span>50%<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span>50%<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid <span class="token function">var</span><span class="token punctuation">(</span>--txtColor<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span>left .3s ease<span class="token punctuation">,</span>right .3 ease<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.container nav a:hover:after</span><span class="token punctuation">&#123;</span>  <span class="token property">left</span><span class="token punctuation">:</span>1em<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span>1em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>後來想想這樣的寫法不太好，原因在於 <a href="https://csstriggers.com/top"><code>top</code></a> 這類定位是會 <code>reflow</code> (重排)，效能上比較不好，選擇只有 <code>repaint</code> (重繪) 的 <a href="https://csstriggers.com/transform">transform</a></p></blockquote><p>改成 transform  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container nav a:after</span><span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 0.1em<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">transform-origin</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> transform .3s ease<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.container nav a:hover:after</span><span class="token punctuation">&#123;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>.8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>transition 不要使用 <code>all</code>，針對要件漸變的部分設定就好，以免效能上的浪費。</p></blockquote><h2 id="導覽列變化手法"><a href="#導覽列變化手法" class="headerlink" title="導覽列變化手法"></a>導覽列變化手法</h2><ol><li>把 LOGO 擺中間  </li><li>flexbox 改變 order  </li><li>直接改寫 HTML 結構</li><li>利用絕對定位   </li></ol><p>個人最喜歡 flexbox 的部份，既不修改結構，又保有彈性修改，哪天想讓 LOGO 到最前面只要修改 <code>order</code> 即可。 </p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;本篇成果&quot;&gt;&lt;a href=&quot;#本篇成果&quot; class=&quot;headerlink&quot; title=&quot;本篇成果&quot;&gt;&lt;/a&gt;本篇成果&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codepen.io/shan473/pen/abVaLWx&quot;&gt;Codepen&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://dsm01pap006files.storage.live.com/y4m9T4H16Ta75kDzYcQq5DvDiixK4mUT7-zgyeMbwFltHZbFafI5uejyNEI2PKXuVsHwbitph6KpHB-W1twOqWHvFYJXV0ZHqpaK31pEbAbsnH7ffzVJrY4jCn-DQT8BuQlWSI7mhiwxpMOte8vgXL82SlBMc9CDVnRs4GQaX5zSfAIPFEVdD6wo429FOHMt4kh?width=1024&amp;height=133&amp;cropmode=none&quot; alt=&quot;導覽列&quot;&gt;&lt;/p&gt;
&lt;p&gt;LOGO 放中央的四種不同寫法導覽列&lt;br&gt;&lt;a href=&quot;https://codepen.io/shan473/pen/NWwLwmZ&quot;&gt;Codepen&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://dsm01pap006files.storage.live.com/y4mxh2kVWQGz5Y5blS98ignQpvNJzpOWFoegrfNdnwioXN37pRMs_UAXWIjV38dGFgg2z4HSQGInRsfJzwzxhUc1-TL4o4jsjhWV_PINth18C_qZ2JEo-KuJm3UAaU8ePorHvVKZABYHV6LJ9mgFTP4YdVPGUP2DmOSCmHehmX01KVzjrVlFs-xp9IVKe_3hKWO?width=660&amp;height=444&amp;cropmode=none&quot; alt=&quot;變化導覽列&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Front-end" scheme="https://blog.rosa.tw/categories/Front-end/"/>
    
    
    <category term="CSS" scheme="https://blog.rosa.tw/tags/CSS/"/>
    
    <category term="CSSZeroToOneSeries" scheme="https://blog.rosa.tw/tags/CSSZeroToOneSeries/"/>
    
  </entry>
  
  <entry>
    <title>筆記 | 初探 CSS Grid</title>
    <link href="https://blog.rosa.tw/Front-end/CSS-Grid/"/>
    <id>https://blog.rosa.tw/Front-end/CSS-Grid/</id>
    <published>2022-04-09T10:55:08.000Z</published>
    <updated>2022-06-18T14:03:07.400Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>眾所皆知 flex 是排版神器，尤其在一維的排版非常好用<br>那在二維的排版呢 ?<br>就不得提到 grid，雖然 grid 在舊的瀏覽器支援性沒到很高，現代瀏覽器是幾乎都有支援。(<a href="https://caniuse.com/css-grid">caniuse</a>)   </p><span id="more"></span>  <h2 id="grid-container-容器布局"><a href="#grid-container-容器布局" class="headerlink" title="grid-container 容器布局"></a>grid-container 容器布局</h2><p>要建立網格，起手式先建造一個容器，準備讓子項網格排列    </p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>item1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>item2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>item3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>item4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>item5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="display-grid"><a href="#display-grid" class="headerlink" title="display : grid"></a>display : grid</h3><p>grid 是二維的版面排版，透過 columns 跟 rows 來安排，直接 加上 grid 不會有變化。  </p><p>display 有關 grid 的有 2 個值，就像 <code>inline-flex</code> 跟 <code>flex</code>    </p><ol><li><code>inline-grid</code>  </li><li><code>grid</code> : 2D 布局  </li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span> grid | inline-grid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="格線軌道（Grid-Track）"><a href="#格線軌道（Grid-Track）" class="headerlink" title="格線軌道（Grid Track）"></a>格線軌道（Grid Track）</h3><p>在 grid 中有不同的布局方式，來決定網格的架構     </p><ol><li>軌道   </li><li>fr 分塊，利用百分比算格數，具有彈性</li></ol><h3 id="明式格線（explicit-grid）"><a href="#明式格線（explicit-grid）" class="headerlink" title="明式格線（explicit grid）"></a>明式格線（explicit grid）</h3><p>明式是自定義軌道，有明就會有暗，暗式是 CSS 幫我們建立的線。  </p><h4 id="grid-template-columns-橫向軌道"><a href="#grid-template-columns-橫向軌道" class="headerlink" title="grid-template-columns : 橫向軌道"></a>grid-template-columns : 橫向軌道</h4><p>橫向網格的寬度。<br>合法的絕對單位 :   </p><ul><li>% </li><li>px</li><li>em</li><li>rem  </li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">&#123;</span><span class="token property">grid-template-columns</span> <span class="token punctuation">:</span> 100px 100px 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>橫向放入三個元素，各別有寬度。  </p><ul><li><p><code>fr</code> : 可用空間的分塊（fraction）。全都 <code>fr</code> 的單位就像切分成幾分之幾，但是類似帶有 flex-grow 、flex-shrink 的功能。  </p>  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">&#123;</span><span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 2fr 3fr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  橫向呈現兩個元素，前者占 2/5，後者 3/5</p></li><li><p><code>auto</code> : 如果是搭配 fr 單位，會是子元素分配剩餘的空間</p></li></ul><p>如果有重複的版面，除了一個個手打，也可以利用 repeat 快速重複</p><ul><li><code>repeat(&lt;次數&gt;,&lt;單位&gt;)</code>  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span>grid<span class="token punctuation">;</span><span class="token property">grid-template-columns</span> <span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>5<span class="token punctuation">,</span>1fr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>  容器會被橫向切成五塊。  <h4 id="gird-template-rows"><a href="#gird-template-rows" class="headerlink" title="gird-template-rows"></a>gird-template-rows</h4>直排間的大小，跟 columns 很像<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span>grid<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span> <span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>5<span class="token punctuation">,</span>1fr<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>5<span class="token punctuation">,</span>1fr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.item:nth-child(2n)</span><span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.item:nth-child(2n+1)</span><span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #ccc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>延伸上一個 columns 的例子，這樣就完成 5X5 的網格版面。<br>做個簡單的就是黑白棋盤格<br><img data-src="https://dsm01pap006files.storage.live.com/y4mWjsi1VFCz1a4Y4PYgBdGH4nr_koMsXMKau9gYdZw6NHUWT6BZTF5VZzybgEZeTgEWRW7yShbHrosym0pS8SwRMoz8afSelU59UktSX_elpmKmC2GyvE1HQY_PVkefILEXPrnQoaOVZqP-h3mlpRPRv7Ma6NWNF8bWxiFgg0LCDBQ5pAgdUJKSyhR__iTjKM-?width=1024&height=558&cropmode=none" alt="軌道式布局"></li></ul><h4 id="grid-template-混合式布局"><a href="#grid-template-混合式布局" class="headerlink" title="grid-template : 混合式布局"></a>grid-template : 混合式布局</h4><blockquote><p>先 row 再 column</p></blockquote><ul><li><p>grid-template : <code>&lt;rows-template&gt; / &lt;columns-template&gt;</code></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 軌道式 */</span><span class="token selector">.container</span><span class="token punctuation">&#123;</span><span class="token comment">/* ...略 */</span>  <span class="token property">grid-template</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>5<span class="token punctuation">,</span>1fr<span class="token punctuation">)</span> / <span class="token function">repeat</span><span class="token punctuation">(</span>5<span class="token punctuation">,</span>1fr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了軌道也可以用命名式的，上面的例子可以改成，下面會再提到命名式的寫法    </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 軌道式 */</span><span class="token selector">.container</span><span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span>grid<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>  <span class="token property">grid-template</span><span class="token punctuation">:</span>     <span class="token string">". . . . ."</span>    <span class="token string">". . . . ."</span>    <span class="token string">". . . . ."</span>    <span class="token string">". . . . ."</span>    <span class="token string">". . . . ."</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img data-src="https://dsm01pap006files.storage.live.com/y4munCQNLVYAOI_NYCgXrtU1bv1eLPQS8Nb_33cNyi0-DhiHRAeXzLCZYZi73nysSdYiALn5Ht-_Hoj0uD1VBw3tiLw5HE95LAuvmENJX9hSx2GnjRXwx_yHe8D5LthivgCGVNW_EuGXFJ8I3fJAtqTZVAbSFx8Zxvx_1Av9IqqrTFpH78MQSYy0dVnBEuy4Eeo?width=1024&height=558&cropmode=none" alt="命名式布局"></p><h3 id="暗式格線（implicit-grid）"><a href="#暗式格線（implicit-grid）" class="headerlink" title="暗式格線（implicit grid）"></a>暗式格線（implicit grid）</h3><p>瀏覽器將剩餘的空間自行運用產生的<br>設定剩下沒有指定 template 的 rows</p><blockquote><p><strong>implicit grid 預設的寬度會根據內容的大小來改變</strong><br>如果 定格到超出的 track ，CSS 會自動補上 implicit grid</p></blockquote><h4 id="grid-auto-rows-amp-grid-auto-columns"><a href="#grid-auto-rows-amp-grid-auto-columns" class="headerlink" title="grid-auto-rows &amp;  grid-auto-columns"></a>grid-auto-rows &amp;  grid-auto-columns</h4><p>容器預設寬高。  </p></li><li><p> <code>minmax</code> 可以設定最小和最大值  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">&#123;</span><span class="token property">grid-auto-rows</span> <span class="token punctuation">:</span> <span class="token function">minmax</span><span class="token punctuation">(</span>`&lt;min><span class="token punctuation">,</span>&lt;max>`<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="網格間距"><a href="#網格間距" class="headerlink" title="網格間距"></a>網格間距</h3><h4 id="grid-gap"><a href="#grid-gap" class="headerlink" title="grid-gap"></a>grid-gap</h4><ul><li><code>grid-gap-row</code> : 直向元素的間距</li><li><code>grid-gap-column</code> : 橫向元素的間距</li></ul><p>兩個合併設定 grid-gap :  <code>&lt;row&gt; &lt;column&gt;</code><br>一樣是 <strong>先 row 再 column</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">&#123;</span><span class="token property">grid-gap</span> <span class="token punctuation">:</span> &lt;row-gap> &lt;column-gap><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="另一種布局-命名式"><a href="#另一種布局-命名式" class="headerlink" title="另一種布局 : 命名式"></a>另一種布局 : 命名式</h2><h3 id="grid-template-areas-命名式布局"><a href="#grid-template-areas-命名式布局" class="headerlink" title="grid-template-areas : 命名式布局"></a>grid-template-areas : 命名式布局</h3><p>透過命名的方式給空間<br>在父層 <code>grid-template-areas</code> 定義版面<br>子層元素透過 <code>grid-area</code> 設定別名 </p><p>常見的範例，快速排出 <strong>三欄式布局</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span><span class="token property">grid-template-areas</span> <span class="token punctuation">:</span> <span class="token string">"header header"</span><span class="token string">"sidebar content"</span><span class="token string">"footer footer"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="grid-area-定格之命名式定格"><a href="#grid-area-定格之命名式定格" class="headerlink" title="grid-area : 定格之命名式定格"></a>grid-area : 定格之命名式定格</h3><p>上面有提到軌道式的合併寫法也可以 <code>grid-area</code> 起點 &amp; 終點，而在命名式布局可以對想要的元素命名，再到布局進行排列。  </p><p>延續上面的三欄式布局，對個別的區塊 <strong>命名</strong><br>再個別設定區塊大小。  <a href="https://codepen.io/shan473/pen/yLpjwaK">Codepen 三欄式</a></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 100px 1fr<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> 200px 1fr 64px<span class="token punctuation">;</span><span class="token property">grid-template-areas</span> <span class="token punctuation">:</span> <span class="token string">"header header"</span><span class="token string">"sidebar content"</span><span class="token string">"footer footer"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.header</span><span class="token punctuation">&#123;</span><span class="token property">grid-area</span> <span class="token punctuation">:</span> header<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #ccc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.sidebar</span><span class="token punctuation">&#123;</span><span class="token property">grid-area</span> <span class="token punctuation">:</span> sidebar<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #fa0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.content</span><span class="token punctuation">&#123;</span><span class="token property">grid-area</span> <span class="token punctuation">:</span> content <span class="token punctuation">;</span>   <span class="token property">background-color</span><span class="token punctuation">:</span> #0fa<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.footer</span><span class="token punctuation">&#123;</span><span class="token property">grid-area</span> <span class="token punctuation">:</span> footer<span class="token punctuation">;</span>   <span class="token property">background-color</span><span class="token punctuation">:</span> violet<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>個人覺得這種方式很直覺，做常規版面規劃就可以很快速😃  </p><h2 id="grid-item-子項定格"><a href="#grid-item-子項定格" class="headerlink" title="grid-item 子項定格"></a>grid-item 子項定格</h2><h3 id="grid-row-column-start-amp-end-個別設定定格"><a href="#grid-row-column-start-amp-end-個別設定定格" class="headerlink" title="grid-row/column start &amp; end 個別設定定格"></a>grid-row/column start &amp; end 個別設定定格</h3><p>有兩種方式來讓格子被佔據</p><ol><li>軌道範圍</li><li>佔據格數 </li></ol><h4 id="透過軸線起終點來指定佔據的範圍"><a href="#透過軸線起終點來指定佔據的範圍" class="headerlink" title="透過軸線起終點來指定佔據的範圍"></a>透過軸線起終點來指定佔據的範圍</h4><ul><li><code>grid-column-start</code> :  column 的佔據軌道起點</li><li><code>grid-column-end</code> : column 的佔據軌道終點</li></ul><p>打開 Devtools 按下 grid 的格線視覺工具就可以看見<br><img data-src="https://dsm01pap006files.storage.live.com/y4mFIFKSjXekpoog3xRQ2ne9NlGlppe2cMmpEyFJah7PMyNkDaFqG3BIrKWtESIgciPHiZw_qqYVFJRFYWO0OHTqvcyjR_0APRrrlZb7mVrKDkTDLsBclQunblwKtk4aoAwiGEk-E8u68pOAqaRSyu6NQ2Cb69euzI-d_02dR7VNk2rk15g-bDZqscdaCPFbDn0?width=1024&height=588&cropmode=none" alt="Devtools grid"></p><p>合併寫法</p><ul><li><code>grid-column</code> : &lt;起點&gt; /  &lt;終點&gt;</li></ul><p>如果想要 <strong>占據整行</strong>，除了從 <strong>第一行 / 末行</strong> 這樣寫，也可以利用負數來達成。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-1</span><span class="token punctuation">&#123;</span><span class="token property">grid-column</span> <span class="token punctuation">:</span> 1/-1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="span-數格數"><a href="#span-數格數" class="headerlink" title="span : 數格數"></a>span : 數格數</h4><p>預設 grid-column 是 <code>span 1</code>，就是按照 flow 占據一格  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-2</span><span class="token punctuation">&#123;</span><span class="token property">grid-colum</span> <span class="token punctuation">:</span> span 2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="grid-area-軌道混合式定格"><a href="#grid-area-軌道混合式定格" class="headerlink" title="grid-area : 軌道混合式定格"></a>grid-area : 軌道混合式定格</h3><p>grid-area : <code>&lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;</code>。</p><p>按照老規矩 <strong>先 row 開始再 column</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span><span class="token punctuation">&#123;</span><span class="token property">grid-area</span> <span class="token punctuation">:</span> 1 / 2 / 3 / 4 <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="order-順序"><a href="#order-順序" class="headerlink" title="order 順序"></a>order 順序</h2><p>跟 <code>flex</code> 一樣 grid 是可以改變順序的。  </p><ul><li><code>order : 0</code> 照原本的排序</li><li><code>order : -1</code> : order 也可以是負值，屬於往前排。    </li></ul><p>order 的起始點是從 <strong>整體的排列</strong> 後面開始算起。<br>首先要知道 grid 的排列順序，預設是 row ，也就是從 row 的尾巴開始，如果有兩列，就是從第二列的尾巴開始。  </p><iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/shan473/embed/vYpjMZW?default-tab=result&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/shan473/pen/vYpjMZW">  Untitled</a> by YanShanHong (<a href="https://codepen.io/shan473">@shan473</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe><h2 id="對齊"><a href="#對齊" class="headerlink" title="對齊"></a>對齊</h2><h3 id="整體垂直與水平對齊"><a href="#整體垂直與水平對齊" class="headerlink" title="整體垂直與水平對齊"></a>整體垂直與水平對齊</h3><p>設定在父層，控制 <strong>整個網格</strong> 的位置</p><ul><li><code>justify-content</code> : 所有的子項水平位置。</li><li><code>align-content</code> :  所有的子項垂直位置</li></ul><blockquote><p>   flex-end(start) 這是給 flexbox 用的，gird 寫法是 start 跟 end</p></blockquote><p>設定在父層，控制 <strong>所有網格中的內容對齊</strong></p><ul><li><code>justify-items</code> : 預設是 stretch，個別設定會按照子項內容的 <strong>寬</strong> 再去水平對齊。</li><li><code>align-items</code> : 預設是 stretch，個別設定會按照子項內容的 <strong>高</strong> 再去垂直對齊。</li></ul><h3 id="個別設定子項內容對齊"><a href="#個別設定子項內容對齊" class="headerlink" title="個別設定子項內容對齊"></a>個別設定子項內容對齊</h3><p>設定在子層，控制 <strong>個別網格中的內容對齊</strong><br>子項的內容物想要客製化的對齊，複寫 justify-items &amp; align-items 的控制。  </p><ul><li><code>align-self</code> : 預設是 stretch，使用跟 align-items 差不多。</li><li><code>justufy-self</code> :  預設是 stretch，使用跟 justify-items 差不多。</li></ul><iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/shan473/embed/PoEevZg?default-tab=result&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/shan473/pen/PoEevZg">  Untitled</a> by YanShanHong (<a href="https://codepen.io/shan473">@shan473</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe><h2 id="z-index-圖層"><a href="#z-index-圖層" class="headerlink" title="z-index 圖層"></a>z-index 圖層</h2><p>以往我們要用到 <code>z-index</code> 都會是在絕對定位的時候，在 grid 中是可以把項目堆疊的，透過 <code>z-index</code> 來前後順序。  </p><p>預設的圖層順序是 html 結構 <strong>後面的會覆蓋前面的</strong>，可以直接透過 <code>z-index</code> 改變順序。  </p><p>這個例子兩個有重疊的部分，item-5 寫上後蓋住了 item-1，為了讓 item-1 被看見，圖層寫得比 item-5 高就行了。  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-1</span><span class="token punctuation">&#123;</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> 1 / 2 / 1 / 2<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.item-5</span><span class="token punctuation">&#123;</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> 1 / 1 / 1 / 3<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>本篇還有很多 grid 的應用還沒研究到，未來再專研 !<br>很推 <strong>CSS-tricks</strong> 上的文章，很多寫法都很實用</p><h2 id="練習"><a href="#練習" class="headerlink" title="練習"></a>練習</h2><ul><li>以 <strong><a href="https://zh.wikipedia.org/wiki/%E7%9A%AE%E7%89%B9%C2%B7%E8%92%99%E5%BE%B7%E9%87%8C%E5%AE%89">皮特·蒙德里安</a></strong> 的《紅、藍、黃的構成》做為練習，說到網格自然就想到這幅畫  XD。<br>   <a href="https://codepen.io/shan473/pen/KKZRmRm">Codepen</a><br>   <img data-src="https://dsm01pap006files.storage.live.com/y4meQohOpsPirn8FgIW6-32dz_PV_9ldr3h7XdfuoLRBgBMVuweq_tSNsV7Osnk8yDBjyZhV4cVT0RuzJnF4Mf5bLcYc5KKVnVXBuu0bOvra6l8WSV33Yu6krcT-r8yl7TlqLB1ir3IPN2crKR6HWWWwN7avpOZB6UabLXjVNMBVnGxMiRl_8PrB3Gs8xKtehAv?width=1022&height=1024&cropmode=none" alt="CSS 版-紅、藍、黃的構成"></li><li>額外來自 Frontend Mentor 的練習題，利用 grid 進行排版<br><a href="https://meitung473.github.io/testimonials-grid-section-main/">Frontend Mentor | Rosa Hong</a></li><li>grid-graden (已破關) : <a href="https://cssgridgarden.com/">Grid Garden - A game for learning CSS grid </a>  <blockquote><p>心得 :<br>遊戲式的 grid 很容易理解，<br>template 除了正數以外，也可以使用 <strong>負數</strong>。<br>個人遇到 26 關卡了一下，其他掌握住如何算軌道跟知道格數怎麼應用就沒什麼障礙。對齊的部份，都在另一個 flexbox frog。</p></blockquote></li></ul><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li>快速查表 :  <a href="https://grid.malven.co/">GRID: A simple visual cheatsheet for CSS Grid Layout (malven.co)</a></li><li>好筆記 : <a href="https://pjchender.dev/css/css-grid-layout/">[CSS] Grid Layout | PJCHENder 未整理筆記</a></li><li>非常詳盡的圖文並茂解說 : <a href="https://css-tricks.com/snippets/css/complete-guide-grid/">A Complete Guide to Grid | CSS-Tricks - CSS-Tricks</a> 。我也很推 flexbox 的教學  </li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;眾所皆知 flex 是排版神器，尤其在一維的排版非常好用&lt;br&gt;那在二維的排版呢 ?&lt;br&gt;就不得提到 grid，雖然 grid 在舊的瀏覽器支援性沒到很高，現代瀏覽器是幾乎都有支援。(&lt;a href=&quot;https://caniuse.com/css-grid&quot;&gt;caniuse&lt;/a&gt;)   &lt;/p&gt;</summary>
    
    
    
    <category term="Front-end" scheme="https://blog.rosa.tw/categories/Front-end/"/>
    
    
    <category term="CSS" scheme="https://blog.rosa.tw/tags/CSS/"/>
    
    <category term="grid" scheme="https://blog.rosa.tw/tags/grid/"/>
    
  </entry>
  
  <entry>
    <title>筆記 | JavaScript - 參數傳遞 call by value or call by reference &amp; call by sharing</title>
    <link href="https://blog.rosa.tw/JavaScript/JavaScript-call-by-what/"/>
    <id>https://blog.rosa.tw/JavaScript/JavaScript-call-by-what/</id>
    <published>2022-03-26T15:12:05.000Z</published>
    <updated>2022-06-18T13:47:08.098Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直以來 JavaScript 的參數傳遞都蠻有爭議性的<br>可能聽過</p><blockquote><p>原始型態是 call by value；物件型態是 call by reference </p></blockquote><p>甚至有人說 JavaScript 只有 <code>call by sharing</code> 或是根本只有 <code>call by value</code><br>到底是哪種 ? 眾說紛紜，本篇針對這三種名詞進行解釋幫助自己去來理解   </p><p>如果有誤再麻煩各路大大指點    </p><span id="more"></span>   <h2 id="call-by-value-傳值"><a href="#call-by-value-傳值" class="headerlink" title="call by value : 傳值"></a>call by value : 傳值</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">let</span> b <span class="token operator">=</span> aa<span class="token operator">=</span><span class="token number">10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>定義變數 a 並且賦予 5 這個值，假設會被存在記憶體 <code>00x1</code> 這個位址</li></ul><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td>a</td><td>00x1</td><td>5</td></tr></tbody></table><ul><li>定義變數 b 等於 a ，b 拷貝 a 的值，另外存在新的記憶體位址  <code>00x3</code></li></ul><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td>a</td><td>00x1</td><td>5</td></tr><tr><td>b</td><td>00x3</td><td>5 (copy from a)</td></tr></tbody></table><ul><li>當你改變 a 的值，因為 b 指向不同記憶體位置，所以跟 b 沒有關係</li></ul><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td>a</td><td>00x1</td><td>10</td></tr><tr><td>b</td><td>00x3</td><td>5</td></tr></tbody></table><p>即使修改 a 或 b 其中一項，a 、 b 值互不相干擾，稱作 <code>call by value</code><br>而且 JavaScript 對於 Primitive type 的操作都是 <code>call by value</code><br>拷貝 「<strong>值</strong>」 但不拷貝 「<strong>址</strong>」</p><p>這也為什麼說 Primitive type 是 <strong>immutable</strong> (不可變)<br>這邊指的不可變 b 雖然等於 a，但你修改 a 並不會去變動到其他的值   </p><h3 id="Function-中參數的傳遞-by-value"><a href="#Function-中參數的傳遞-by-value" class="headerlink" title="Function 中參數的傳遞 : by value"></a>Function 中參數的傳遞 : by value</h3><p><a href="https://blog.techbridge.cc/2018/06/23/javascript-call-by-value-or-reference/">Huli 大的文章</a> 中也舉例變數 function 做為參數，並在 funciton 中進行新賦值的問題   </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">revalue</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">revalue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把變數 a 跟變數 b 都當作參數傳進 <code>revalue</code> 這個 function，而參數只是複製傳進來的值，並不會影響到在外面的 a 跟 b。  </p><blockquote><p>這邊的參數 a、b 作為傳進來的值的別名 (alias)而已，跟外部定義的 a、b 是無關的  </p></blockquote><h2 id="call-by-reference-傳址"><a href="#call-by-reference-傳址" class="headerlink" title="call by reference : 傳址"></a>call by reference : 傳址</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> obj1obj1<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">===</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1 <span class="token operator">===</span> obj2<span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 object 型態的判斷來看，空物件不會等於空物件，因為記憶體儲存的位址不同<br>但這裡 <code>obj1 === obj2</code> 是 true 的時候，代表兩個變數是指向同一個地方 ，是一樣的。  </p><p>接著看怎麼運作的  </p><ul><li>定義變數 obj1 並且賦予 <code>&#123;a : 1&#125;</code> 這個值，記憶體 <code>00x1</code> 這個位址 ，會存有 <code>&#123;a: 1&#125;</code> 這個值。而 obj1 的值則引用 (reference) <code>00x1</code> 位子的值</li></ul><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td></td><td>00x1</td><td>{a: 1}</td></tr><tr><td>obj1</td><td>00x2</td><td>00x1</td></tr></tbody></table><ul><li>定義變數 obj2 等於 obj1，也就是參照同一個 <strong>位址</strong> 的值</li></ul><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td></td><td>00x1</td><td>{a: 1}</td></tr><tr><td>obj1</td><td>00x2</td><td>00x1</td></tr><tr><td>obj2</td><td>00x2</td><td>00x1</td></tr></tbody></table><ul><li>當 <code>obj1.a</code> 改變時，是改動到位在 <code>00x1</code> 記憶體的值 <code>&#123;a : 5&#125;</code>，因為 obj2 也參照這裡的位址的值，在運作上連同 obj2 也被改動到</li></ul><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td></td><td>00x1</td><td><code>&#123;a: 5&#125;</code></td></tr><tr><td>obj1</td><td>00x2</td><td>00x1</td></tr><tr><td>obj2</td><td>00x2</td><td>00x1</td></tr></tbody></table><p>由此可知當改動到 obj1.a 的值 obj2.a 也會改變稱作 call by reference<br>Object type 通常是 call by reference<br>拷貝 「<strong>值</strong>」 <strong>也拷貝址</strong></p><p>跟 Primitive type 相反的是 Object type 是 <strong>mutable</strong> (可變)<br>改動 a 的值卻也會變動到 b<br>在 <a href="https://www.slideshare.net/YiTaiLin/java-script-63031051">Tommy 大簡報第 12 頁有清楚的流程</a> 可以參考  </p><h3 id="Function-中參數的傳遞-by-reference"><a href="#Function-中參數的傳遞-by-reference" class="headerlink" title="Function 中參數的傳遞 : by reference"></a>Function 中參數的傳遞 : by reference</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">revalue</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>obj<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token function">revalue</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span> <span class="token comment">// &#123;a: 1,b :5 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 revalue 函式中我們對參數 obj 進行更新<br>而外部的 obj1 也會變動到，因為指向的記憶體位址是同一處。  </p><ul><li>obj1 作為引數，帶入 obj 參數時，複製一份 obj1 進去  </li></ul><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td></td><td>00x1</td><td>{a : 1}</td></tr><tr><td>obj1</td><td>00x2</td><td>00x1</td></tr><tr><td></td><td>00x4</td><td>funtion revalue()…</td></tr><tr><td>revalue</td><td>00x5</td><td>00x4</td></tr><tr><td>參數 <strong>obj</strong></td><td>00x2</td><td>00x1</td></tr></tbody></table><ul><li>obj.b = 5 (不是變數重新賦值 !)</li></ul><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td></td><td>00x1</td><td><code>&#123;a:1,b:5&#125;</code></td></tr><tr><td>obj1</td><td>00x2</td><td>00x1</td></tr><tr><td></td><td>00x4</td><td>funtion revalue()…</td></tr><tr><td>revalue</td><td>00x5</td><td>00x4</td></tr><tr><td>參數 <strong>obj</strong></td><td>00x2</td><td>00x1</td></tr></tbody></table><h3 id="例外狀況-重新賦值"><a href="#例外狀況-重新賦值" class="headerlink" title="例外狀況 : 重新賦值"></a>例外狀況 : 重新賦值</h3><p>凡事總有個例外… </p><ol><li>Object Literals 重新賦值 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> obj1obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1 <span class="token operator">===</span> obj2<span class="token punctuation">)</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 按照上面來說，參照同一記憶體位址， obj2 變動應該會連同 obj1 也改變，結果沒有。  <ul><li>obj2 = obj1，obj2 複製 obj1</li></ul></li></ol><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td></td><td>00x1</td><td><code>&#123;a:1,b:5&#125;</code></td></tr><tr><td>obj1</td><td>00x2</td><td>00x1</td></tr><tr><td>obj2</td><td>00x2</td><td>00x1</td></tr></tbody></table><pre><code>- obj2 新賦值 </code></pre><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td></td><td>00x1</td><td>{a:1}</td></tr><tr><td></td><td>00x5</td><td><code>&#123;a: 3&#125;</code></td></tr><tr><td>obj1</td><td>00x2</td><td>00x1</td></tr><tr><td>obj2</td><td>00x6</td><td>00x5</td></tr></tbody></table><pre><code>obj2 在新賦值時，物件創造新的記憶體位址賦予值，obj2 也創造一個新的記憶體位址並且複製物件位址到自己的值  obj1 跟 obj2 正式分道揚鑣 ~ 成為陌生人      </code></pre><ol start="2"><li> Function 中參數的傳遞 : Object 重新賦值<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">revalue</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>obj<span class="token operator">=</span><span class="token punctuation">&#123;</span> a <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">revalue</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span> <span class="token comment">// &#123;a: 1&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>在裡面重新賦值，外部的引數並不會改動到原本的值<br>跟著跑一遍  </li></ol><ul><li>obj1 作為引數，帶入 obj 參數時，複製一份 obj1 進去  </li></ul><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td></td><td>00x1</td><td>{a : 1}</td></tr><tr><td>obj1</td><td>00x2</td><td>00x1</td></tr><tr><td></td><td>00x4</td><td>funtion revalue()…</td></tr><tr><td>revalue</td><td>00x5</td><td>00x4</td></tr><tr><td>參數 <strong>obj</strong></td><td>00x2</td><td><code>00x1</code></td></tr></tbody></table><ul><li>obj={ a : 3}  重新賦值</li></ul><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td></td><td>00x1</td><td>{ a : 1 }</td></tr><tr><td>obj1</td><td>00x2</td><td>00x1</td></tr><tr><td></td><td>00x4</td><td>funtion revalue()…</td></tr><tr><td>revalue</td><td>00x5</td><td>00x4</td></tr><tr><td>參數 <strong>obj</strong></td><td><code>00x8</code></td><td><code>00x6</code></td></tr><tr><td></td><td>00x6</td><td>{a : 3}</td></tr></tbody></table><ul><li>根據 Scope 作用域，函式的變數作用範圍等函式結束後就會釋放記憶體。</li></ul><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td></td><td>00x1</td><td>{ a : 1 }</td></tr><tr><td>obj1</td><td>00x2</td><td>00x1</td></tr><tr><td></td><td>00x4</td><td>funtion revalue()…</td></tr></tbody></table><p>obj1 依然不會變動到。  </p><p>不過你發現了嗎 ?<br>Object Type 新賦值的行為是複製值而已，很像 call by value  </p><h2 id="不是-by-value-也不是-by-renference-而是-by-sharing"><a href="#不是-by-value-也不是-by-renference-而是-by-sharing" class="headerlink" title="不是 by value 也不是 by renference 而是 by sharing"></a>不是 by value 也不是 by renference 而是 by sharing</h2><p>哦不，我的頭開始痛了<br>那我前面認識的難道是假的嗎 ?  </p><p>不，sharing 就像綜合體一樣<br>按上面所述，我們可以把情況分成三種  </p><ol><li>Primitive type 表現行為是 call by value</li><li>Object type 沒有新賦值的情況，而是對內容操作，表現行為像是 call by reference</li><li>Object type 重新賦值，表現則是 call by value，會建立一個新的記憶體位置，並且複製其(記憶體位址的)值  </li></ol><p>可知 call by sharing 在不同情況下會就會有不同的表現行為</p><p>借一下 Huli 大的圖…<br><img data-src="https://dsm01pap006files.storage.live.com/y4mnEy3INPdoo5FZIkuPSKskoOVfwI9iapT5pvdWu6c0BSovTa8z0rEaeST_jxZaxA8prHXyxrT_9IWaaoniKLBb6GJz6tdT60tRupMq7E0LMnDVcO97Oc8H1Rk2WzVxmlnTRFYoLOjzbHqdeFe5cLtaWuG_x4SY9Mt6GLI8HYXkVicjUFYT5QsvmVzYogaIAxS?width=949&height=702&cropmode=none" alt="call by sharing"></p><p>文章中有提及其實 JavaScript 嚴格意義上是沒有 call by reference 的，因為函式的引數重新賦值並不會修改到外部變數的值。<br>(C++ 能修改到是跟指標有關)<br>由於我不是很熟 C 跟 C++… 先不做討論     </p><p>由上圖可知，JavaScript 可以說    </p><blockquote><p>Primitive 是 Pass by Value，Object 是 Pass by sharing。</p></blockquote><h2 id="全都是-call-by-value-的觀點"><a href="#全都是-call-by-value-的觀點" class="headerlink" title="全都是 call by value 的觀點"></a>全都是 call by value 的觀點</h2><p>那全是 call by value 是怎麼回事 ?<br>造成爭論的點在於這邊的 value 並未定義說是 <strong>內容的值</strong> 還是 <strong>存放在變數記憶體位址裡的值</strong>  </p><ul><li>以 <strong>內容的值</strong> 觀點來看        </li></ul><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td>a</td><td>00x1</td><td><strong>5(被複製到 b)</strong></td></tr><tr><td>b</td><td>00x3</td><td>5</td></tr></tbody></table><ul><li>以 <strong>記憶體位址裡的值</strong> 觀點來看  </li></ul><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td></td><td><strong>00x1 (被複製)</strong></td><td>{a: 1}</td></tr><tr><td>obj1</td><td>00x5</td><td>00x1</td></tr><tr><td>obj2</td><td>00x5</td><td>00x1</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>b 複製 a ， a 也是複製記憶體 <code>(00x1)</code> 位址這個值，所以也可以說是 <strong>call by value</strong><br>在定義上的不同，導致不同的觀點與結論   </p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li>帶你跑一次 : <a href="https://www.slideshare.net/YiTaiLin/java-script-63031051">簡單介紹JavaScript參數傳遞 (slideshare.net)</a></li><li>簡單論述 : <a href="https://ithelp.ithome.com.tw/articles/10191057">重新認識 JavaScript: Day 05 JavaScript 是「傳值」或「傳址」？</a></li><li>從各方面來看 : <a href="https://blog.techbridge.cc/2018/06/23/javascript-call-by-value-or-reference/">深入探討 JavaScript 中的參數傳遞：call by value 還是 reference？</a></li><li>好懂得位址概念 : <a href="https://ithelp.ithome.com.tw/articles/10209104">你不可不知的 JavaScript 二三事#Day26：程式界的哈姆雷特 —— Pass by value, or Pass by reference？</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一直以來 JavaScript 的參數傳遞都蠻有爭議性的&lt;br&gt;可能聽過&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原始型態是 call by value；物件型態是 call by reference &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;甚至有人說 JavaScript 只有 &lt;code&gt;call by sharing&lt;/code&gt; 或是根本只有 &lt;code&gt;call by value&lt;/code&gt;&lt;br&gt;到底是哪種 ? 眾說紛紜，本篇針對這三種名詞進行解釋幫助自己去來理解   &lt;/p&gt;
&lt;p&gt;如果有誤再麻煩各路大大指點    &lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>筆記 | JavaScript - first class function (一級函式)</title>
    <link href="https://blog.rosa.tw/JavaScript/JavaScript-First-Class-Function/"/>
    <id>https://blog.rosa.tw/JavaScript/JavaScript-First-Class-Function/</id>
    <published>2022-03-26T05:34:14.000Z</published>
    <updated>2022-06-18T13:47:31.273Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JavaScript 中的 function 是很神奇的東西<br>在初學時看到很多名詞<br>像 callback function(回呼函式)、First-Class Function(一級函式)、High-Order Function(高階函式)<br>還有 Closure(閉包) 等等的，總是會霧撒撒…<br>本篇來初步認識 function 中的 First-Class Function 概念   </p><span id="more"></span><h2 id="一級函式"><a href="#一級函式" class="headerlink" title="一級函式"></a>一級函式</h2><blockquote><p>函式可以被視為其他變數一樣，像是 function 可以指定成變數，也可以做為參數傳入別的 funciton。  </p></blockquote><p>JavaScript 的 function 符合 first class function    </p><ul><li>函式只是物件的一種  </li><li>function 可以儲存成變數 (function expression)    <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">greet</span> <span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>function 可以當作參數傳入別的 function 中，這邊把 function 當作 <strong>值</strong> 來使用。<br>  (這樣的方式會稱這個 function 是 callback function)    <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">'hello,'</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span>name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">greet</span><span class="token punctuation">(</span>hello<span class="token punctuation">,</span><span class="token string">'rosa!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>function 裡面又回傳另一個 function。<pre><code>只要接收函式作為參數，或是回傳函式作為輸出的函式</code></pre>  就稱作高階函式 ( <strong>Higher-Order Function</strong> )<br>  像是 Array 中的 <code>map</code> function  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token operator">=></span> num <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token comment">// 實作</span><span class="token keyword">function</span> <span class="token function">arrayMap</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">let</span> length <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token keyword">let</span> newArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>newArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> newArray<span class="token punctuation">&#125;</span><span class="token function">arrayMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> item <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>function 跟物件一樣有屬性 (property)<br>下面進行說明</li></ul><h2 id="函式也是物件的一種"><a href="#函式也是物件的一種" class="headerlink" title="函式也是物件的一種 ?"></a>函式也是物件的一種 ?</h2><p>範例 : </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'invoke this'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 直接執行</span>hello<span class="token punctuation">.</span>people<span class="token operator">=</span><span class="token string">'rosa'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span>people<span class="token punctuation">)</span> <span class="token comment">// output : rosa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>執行 (invoke) 函式，是透過 <code>()</code></li><li>可以直接用 <code>.</code> 建立物件中的 key-value  </li></ol><p>證明 function 是一種特殊的物件，也可以當作物件來使用。 </p><h2 id="補充-函式回傳一個另一個函式"><a href="#補充-函式回傳一個另一個函式" class="headerlink" title="補充 : 函式回傳一個另一個函式"></a>補充 : 函式回傳一個另一個函式</h2><p>調用函式與回傳的函式有幾種做法  </p><ol><li>存成變數<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sayhi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello, Rosa!'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">const</span> myFunc <span class="token operator">=</span> <span class="token function">sayhi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// myFunc 接收的是一個 function</span><span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 呼叫</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>雙括號直接呼叫<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sayhi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello, Rosa!'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token function">sayhi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>IIFE (Immediately Invoked Function Expression): 定義完就回傳的 function<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sayhi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello, Rosa!'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token function">sayhi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>IIFE 的例子很常在 JQuery 看見  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//$ = jQuery</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="https://pjchender.blogspot.com/2016/03/javascriptfunctionobjects.html">[筆記] JavaScript 中函式就是一種物件 ─ 談談 first class function（一等公民函式） ~ PJCHENder 那些沒告訴你的小細節</a></li><li><a href="https://developer.mozilla.org/zh-TW/docs/Glossary/First-class_Function">一級函式（First-class Function） - 術語表 | MDN (mozilla.org)</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10224519">JS 原力覺醒 Day19 - 一級函式與高階函式</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;JavaScript 中的 function 是很神奇的東西&lt;br&gt;在初學時看到很多名詞&lt;br&gt;像 callback function(回呼函式)、First-Class Function(一級函式)、High-Order Function(高階函式)&lt;br&gt;還有 Closure(閉包) 等等的，總是會霧撒撒…&lt;br&gt;本篇來初步認識 function 中的 First-Class Function 概念   &lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/tags/JavaScript/"/>
    
  </entry>
  
</feed>
