<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>健忘雜記</title>
  
  <subtitle>紀錄學習與生活</subtitle>
  <link href="https://blog.rosa.tw/atom.xml" rel="self"/>
  
  <link href="https://blog.rosa.tw/"/>
  <updated>2022-04-12T02:24:14.834Z</updated>
  <id>https://blog.rosa.tw/</id>
  
  <author>
    <name>Rosa Hong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - 事件機制原理 &amp; 事件代理</title>
    <link href="https://blog.rosa.tw/Frontend/JavaScript/JavaScript-EventFlow-EventListener/"/>
    <id>https://blog.rosa.tw/Frontend/JavaScript/JavaScript-EventFlow-EventListener/</id>
    <published>2022-04-12T02:24:14.000Z</published>
    <updated>2022-04-12T02:24:14.834Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>事件是什麼 ? 為什麼要用事件代理呢 ?<br>在不了解事件的流程與運作機制，是不是遇過點一下元素<br>結果跑出兩次以上的結果<br>透過本篇幫自己釐清事件各種大小事</p><span id="more"></span>  <h2 id="EventFlow-網頁元素接收事件的順序"><a href="#EventFlow-網頁元素接收事件的順序" class="headerlink" title="EventFlow : 網頁元素接收事件的順序"></a>EventFlow : 網頁元素接收事件的順序</h2><p><img data-src="https://dsm01pap006files.storage.live.com/y4m9V74R0Rbxh2VocqOo5K1vnxJNiyqAL1pr2Vw2o2yxenGxG5Uq3iMSm5n1bXDNs7hubkxY7rtnZfQtgz3tSNPDcX22k_WWBKKto5w_fnALPe1MSGDNDjlF11Yr7svwp8O0b8PmsLyMikVMa0Be3EWrsugI0ZsfWzkq9aYgX7R48Jm2YL0dJs6VWHvl3tqxowk?width=1208&height=1160&cropmode=none" alt="EventFlow"></p><ul><li><code>Capture phase</code> : 捕獲階段指由 <strong>上到下</strong> 傳下去的</li><li><code>Target phase</code> : 目標階段，本身被作用的目標才會在這個階段</li><li><code>Bubbling phase</code> : 冒泡階段 指由 <strong>下往上</strong> 傳去的</li></ul><p>透過 <code>e.eventPhase</code> 可以看見事件的階段<br>當我點下 link  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'link capturing'</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>eventPhase<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'link bubbling'</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>eventPhase<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'box capturing'</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>eventPhase<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'box bubbling'</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>eventPhase<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">box capturing <span class="token number">1</span>  <span class="token comment">// CAPTURING_PHASE</span>link capturing <span class="token number">2</span> <span class="token comment">// AT_TARGET </span>link bubbling <span class="token number">2</span> <span class="token comment">// AT_TARGET </span>box bubbling <span class="token number">3</span> <span class="token comment">// BUBBLING_PHASE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>出現的代碼就是事件的不同階段  </p><h3 id="事件冒泡-Event-Bubbling"><a href="#事件冒泡-Event-Bubbling" class="headerlink" title="事件冒泡 (Event Bubbling)"></a>事件冒泡 (Event Bubbling)</h3><p>啟動事件的元素往上傳遞到 <strong>根節點</strong> (document)  </p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>TITLE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>CLICK<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>冒泡傳遞方向 :<br>CLICK 事件本身元素 👉 body 👉 html 👉 document   </p><h3 id="事件捕獲-Event-Capturing"><a href="#事件捕獲-Event-Capturing" class="headerlink" title="事件捕獲 (Event Capturing)"></a>事件捕獲 (Event Capturing)</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>TITLE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>CLICK<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>捕獲傳遞方向 :<br>document 👉html 👉 body 👉CLICK 事件本身元素  </p><h3 id="事件是哪種機制"><a href="#事件是哪種機制" class="headerlink" title="事件是哪種機制 ?"></a>事件是哪種機制 ?</h3><p>兩種都會，當我按下按鈕，如果外層元素也有綁定 <strong>事件</strong>，同時也會被觸發</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.outer'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.inner'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>結果</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">hellohi <span class="token comment">// 冒泡而觸發</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>點擊 <code>inner</code> 時，同時出現 hello 跟 hi<br>因為冒泡的關係，outer 也被觸發。  </p><h3 id="事件的捕獲-amp-冒泡順序"><a href="#事件的捕獲-amp-冒泡順序" class="headerlink" title="事件的捕獲 &amp; 冒泡順序 ?"></a>事件的捕獲 &amp; 冒泡順序 ?</h3><ul><li><p>對於 <strong>非觸發事件</strong> 本身的元素</p><blockquote><p>先捕獲後冒泡</p></blockquote></li><li><p>事件本身<br>在以往的文章中都是 <strong>按照程式碼執行的順序</strong><br>當我試著執行後卻發現即使把冒泡放在前面，捕獲放後<br>一樣都是 <strong>先捕獲再冒泡</strong><br>仔細一查，才發現原來是 Chorme 89 以後的版本都會先捕獲再冒泡<br>89 之前的版本就會是看程式碼執行的順序    </p><blockquote><p>出現這樣的狀況是因為 shadow DOM 引起的，詳細原因請參考 <a href="https://juejin.cn/post/6965682915141386254#heading-2">這篇</a>  </p></blockquote></li></ul><p>所以，新版的瀏覽器不管是哪個都是 <strong>先捕獲再冒泡</strong>  </p><h2 id="事件的註冊綁定"><a href="#事件的註冊綁定" class="headerlink" title="事件的註冊綁定"></a>事件的註冊綁定</h2><ol><li><code>on-event</code> : 有 HTML 中 inline on-event；JS on-event 接 function</li><li><code>EventListener</code> : addEventListener、removeEventListener…等  </li></ol><h3 id="on-event"><a href="#on-event" class="headerlink" title="on-event"></a>on-event</h3><ol><li>Html <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre> 目前很少這樣寫，其一原因是不好維護  </li><li>非 Html <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.btn'</span><span class="token punctuation">)</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>我們最常看見 <code>window.onload</code> 也是事件的 on-event</p><h3 id="EventListener"><a href="#EventListener" class="headerlink" title="EventListener"></a>EventListener</h3><h4 id="addEventListener"><a href="#addEventListener" class="headerlink" title="addEventListener"></a>addEventListener</h4><p>有三個參數</p><ol><li>事件名稱</li><li>事件處理器 (觸發時執行的 function)</li><li>Boolen ，以 「捕獲」 或「冒泡」 機制執行， <code>false</code> (不指定) 為 冒泡</li></ol><blockquote><p>第三個布林值，不是改變事件傳遞的方式，而是在 <strong>哪裡進行監聽</strong></p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 冒泡</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'HI'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'HI'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 捕獲 </span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'HELLO'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="removeListener"><a href="#removeListener" class="headerlink" title="removeListener"></a>removeListener</h4><p>跟 addEventListener 一樣，如果要解除的話 handler 的 function 必須是同一個實體才行  </p><blockquote><p><strong>為什麼說是同一實體 ?</strong><br>回想這個例子 <code>&#123;&#125; === &#123;&#125; // false</code><br>function 也是 Object 的一種<br>匿名函式沒有指定給變數時，都是屬於不同的記憶體位址    </p></blockquote><p>事件監聽使用匿名函式的寫法，就像潑出去的水，回不來了 🤔  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'HI'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 移除事件，但是沒用</span>btn<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'HI'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解決此問題，把 handler 的 function <strong>獨立出來</strong>  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">clickhandler</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'HI'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>clickhandler<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 移除事件，ok!</span>btn<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>clickhandler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="on-event-v-s-EventListener"><a href="#on-event-v-s-EventListener" class="headerlink" title="on-event v.s EventListener"></a>on-event v.s EventListener</h3><ul><li><p><code>EventListener</code> : 可以重複指定多個「處理器」(handler) 給同一個元素的同一個事件</p></li><li><p><code>on-event</code> : 只認一個，後面多寫的會覆蓋前面的事件</p></li><li><p>on-event</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi!'</span><span class="token punctuation">)</span> <span class="token comment">// 不會出現</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello!'</span><span class="token punctuation">)</span> <span class="token comment">// 會出現 hello</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>EventListener</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi!'</span><span class="token punctuation">)</span> <span class="token comment">// 出現 hi</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello!'</span><span class="token punctuation">)</span> <span class="token comment">// 再出現 hello</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="EventHandler-中的-“event”"><a href="#EventHandler-中的-“event”" class="headerlink" title="EventHandler 中的 “event”"></a>EventHandler 中的 “event”</h2><p>事件物件會依照 <strong>觸發的事件</strong>(click、change) ，內容會有稍微不同<br>通常看到 <code>event</code> 寫成 <code>e</code> 、<code>evt</code> 是為了方便，也可以自訂譯名稱<br>只是大家會選擇有意義的名稱且好記    </p><p>可以試著在事件觸發印出 <code>e</code>   </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  常見的屬性   -   </span><span class="token template-punctuation string">`</span></span>type<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> : 表示事件的名稱-   </span><span class="token template-punctuation string">`</span></span>target<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> : 表示觸發事件的元素-   </span><span class="token template-punctuation string">`</span></span>bubbles<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> : 表示這事件是否是在「冒泡」階段觸發 (</span><span class="token template-punctuation string">`</span></span><span class="token boolean">true</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> / </span><span class="token template-punctuation string">`</span></span><span class="token boolean">false</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">)-   </span><span class="token template-punctuation string">`</span></span>pageX<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> / </span><span class="token template-punctuation string">`</span></span>pageY<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> : 表示事件觸發時，滑鼠座標在網頁的相對位置  ### 阻擋預設行為 event.preventDefault()>並不會阻止事件向上傳遞 (事件冒泡) </span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>javascript<span class="token keyword">let</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.link'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span> <span class="token comment">// 依然會出現</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>on-event</code> 在 eventhandler function 的<strong>最後</strong>加上 <code>return false;</code> 也會有 <code>event.preventDefault()</code> 的效果  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.link'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 等於 e.preventDefault()</span>link<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="應用範例一-表單-submit-前的檢查"><a href="#應用範例一-表單-submit-前的檢查" class="headerlink" title="應用範例一 : 表單 submit 前的檢查"></a>應用範例一 : 表單 submit 前的檢查</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>        帳號        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>        密碼        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用者按下 submit 按鈕會送出表單<br>前端可以先做驗證，確認使用者的輸入是不是符合   </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"form"</span><span class="token punctuation">)</span>form<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//先阻止送出</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> username <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"[name='username']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value    <span class="token keyword">let</span> password <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"[name='password']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value    <span class="token comment">// 檢查欄位</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>username<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'請輸入使用者帳號'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>password<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'請輸入密碼'</span><span class="token punctuation">)</span>    <span class="token comment">// 都有輸入就送出</span>    form<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="應用範例二-避免超連結造成網頁跳轉"><a href="#應用範例二-避免超連結造成網頁跳轉" class="headerlink" title="應用範例二 : 避免超連結造成網頁跳轉"></a>應用範例二 : 避免超連結造成網頁跳轉</h4><p>按下 <code>a</code> 的時候會找網頁的錨點，如果沒有的話會跳 <code>#</code> 井字號<br>如果不想要出現井字號呢 ?<br>有些是對外連結，有些是內連結使用，總不能阻擋每個吧 !</p><p>這邊用我使用 <code>class</code> 分開外部連結</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>www.example.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是普通超連結<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>gotoTop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 選沒有 link class 的 a 標籤</span><span class="token keyword">let</span> actionLink <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'a:not(.link)'</span><span class="token punctuation">)</span>actionLink<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token parameter">a</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    a<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 判斷各個 actionLink 要做的事</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這樣就可以分出哪些是外部連結，哪些是內網頁連結，而且不會出現 <code>#</code> 井字號 😃</p><h3 id="阻擋事件冒泡傳遞-event-stopPropagation"><a href="#阻擋事件冒泡傳遞-event-stopPropagation" class="headerlink" title="阻擋事件冒泡傳遞 event.stopPropagation()"></a>阻擋事件冒泡傳遞 event.stopPropagation()</h3><blockquote><p>阻止的動作，加在冒泡發生的元素上</p></blockquote><p>如果不要讓 box 出現，加在想停止冒泡的地方 <code>event.stopPropagation()</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.link'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 這裡會發生冒泡，要阻止上傳</span>link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span> <span class="token comment">// 不會出現</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以試著註解 <code>e.stopPropagation();</code> 會發現當你按下 link<br>因為 link 冒泡機制導致 box 的事件也觸發而印出 <code>&#39;box&#39;</code></p><h4 id="阻止任何的傳遞-event-stopImmediatePropagation"><a href="#阻止任何的傳遞-event-stopImmediatePropagation" class="headerlink" title="阻止任何的傳遞 event.stopImmediatePropagation()"></a>阻止任何的傳遞 event.stopImmediatePropagation()</h4><p>如果同一個元素有掛兩個 <code>addEventListener</code><br>點擊時兩個都會在 <code>Target phase</code><br>A 跟 B 事件一樣會觸發<br>在 A 加入 <code>stopImmediatePropagation()</code> 會把 B 停掉  </p><p>以上面的例子來說，link 掛兩個事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// A 事件</span>link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  e<span class="token punctuation">.</span><span class="token function">stopImmediatePropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i am A'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// B 事件</span>link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i am B'</span><span class="token punctuation">)</span> <span class="token comment">//不會出現，在 A target pharse 阻止 B 冒泡階段發生</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span> <span class="token comment">// 不會出現，因為阻止了冒泡</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="應用範例-label-amp-input"><a href="#應用範例-label-amp-input" class="headerlink" title="應用範例 : label &amp; input"></a>應用範例 : label &amp; input</h4><p>label 跟 input 的組合需要多一個 id<br>為了不浪費 id，我們常常會用 label 把 input 包起來。  </p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>開關<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>label</code> 綁上監聽事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> labelone<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'label'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>labelone<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>神奇的是，hi 會出現兩次<br>checkbox 也會接收到 click 事件，改變了狀態<br>發生冒泡到 label 元素，再次觸發 label 的事件    </p><p><strong>重點複習</strong>  </p><blockquote><p><strong>阻止的動作，加在冒泡發生的元素上</strong></p></blockquote><p>冒泡發生的是 <strong>input</strong> ，所以 <code>stopPropagation</code> 是要加在 input 而非 label</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> labelone<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'label'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> inputone<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>labelone<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>inputone<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事件-“本身”-指的是-target-v-s-currentTarget-this"><a href="#事件-“本身”-指的是-target-v-s-currentTarget-this" class="headerlink" title="事件 “本身” 指的是 ? target v.s currentTarget (this)"></a>事件 “本身” 指的是 ? target v.s currentTarget (this)</h3><p>我們知道在 function 當中是可以使用 <code>this</code><br>那這邊的 <code>this</code> 是指什麼呢 ?   </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> labelone<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'label'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>labelone<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tagName<span class="token punctuation">)</span> <span class="token comment">// LABEL</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>this</code> 代表的會是「觸發事件的<strong>目標</strong>」元素<br>也就是 <code>event.currentTarget</code> 而不是 <code>e.target</code>。</p></blockquote><p>那 <code>e.target</code> 指的是 ?</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> labelone<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'label'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>labelone<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tagName<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> inputone<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inputone<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tagName<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>點擊 label</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"LABEL"</span> <span class="token number">1</span> <span class="token comment">// e.target</span><span class="token string">"LABEL"</span> <span class="token number">1</span> <span class="token comment">// this</span><span class="token string">"INPUT"</span> <span class="token number">2</span> <span class="token comment">// e.target</span><span class="token string">"INPUT"</span> <span class="token number">2</span> <span class="token comment">// this</span><span class="token string">"INPUT"</span> <span class="token number">1</span> <span class="token comment">// checkbox 冒泡上來的而觸發 labelone，e.target</span><span class="token string">"LABEL"</span> <span class="token number">1</span> <span class="token comment">// checkbox 冒泡上來的而觸發 labelone， this</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>e.target</code> 其實是「觸發事件的元素」</p></blockquote><p>如果不考慮事件傳遞的情況下，<code>this</code> 實質上就等同於 <code>e.target</code> 了。</p><h2 id="事件指派-Event-Delegation"><a href="#事件指派-Event-Delegation" class="headerlink" title="事件指派 (Event Delegation)"></a>事件指派 (Event Delegation)</h2><p>用 JavaScript 新增的元素並不會綁到事件  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> items <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.list-item'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 一個個手動加入</span>items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> newItem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'LI'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> txt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">creatTextNode</span><span class="token punctuation">(</span><span class="token string">'new'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newIten<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span>list<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newItem<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>newItem</code> 不會有 click 事件<br>為避免每次新增要重新綁定事件，又要移除監聽，造成 memory leak 的嚴重問題<br><strong>事件指派</strong> 是比較好的做法。</p><p><strong>事件代理人</strong> 透過判斷 <strong>目標節點</strong>，再執行動作</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// list 直接看底下的子元素</span>list<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> newItem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'LI'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> txt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">creatTextNode</span><span class="token punctuation">(</span><span class="token string">'new'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newIten<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span>list<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newItem<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>搭拉 ! <code>newItem</code> 就有點擊的效果</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>事件是 JavaScript 的基本，當我們了解機制的運作<br>遇到奇怪的觸發多次時，記得想起事件的流程  </p><blockquote><p>先捕獲再冒泡  </p></blockquote><p>還有相關的  </p><ul><li>阻止預設行為 <code>preventDefault</code> </li><li>阻擋冒泡行為 <code>stopPropagtion</code></li></ul><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="https://ithelp.ithome.com.tw/articles/10191970">重新認識 JavaScript: Day 14 事件機制的原理</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10192015">重新認識 JavaScript: Day 15 隱藏在 “事件” 之中的秘密</a></li><li><a href="https://blog.techbridge.cc/2017/07/15/javascript-event-propagation/">DOM 的事件傳遞機制：捕獲與冒泡</a></li><li><a href="https://juejin.cn/post/6965682915141386254#heading-2">Chrome 89 更新事件触发顺序，导致99%的文章都错了（包括MDN）</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;事件是什麼 ? 為什麼要用事件代理呢 ?&lt;br&gt;在不了解事件的流程與運作機制，是不是遇過點一下元素&lt;br&gt;結果跑出兩次以上的結果&lt;br&gt;透過本篇幫自己釐清事件各種大小事&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/Frontend/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSSZeroToOneSeries  | 10 | 破格式設計</title>
    <link href="https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-10/"/>
    <id>https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-10/</id>
    <published>2022-04-10T04:36:53.000Z</published>
    <updated>2022-04-12T02:50:02.831Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/QWOZgzP">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4mc1SNrsZu-Jd9u35WNRJfQgL79lh5rKUE-T708KZoUgmfj1e0iFbqwtXItGPmNayXFew5OcaISpno8uR1h5a0KOuWpfs9NvwytLMedU4ijzl-h2mJT3AKapQU7kA5rNBSPp_QOV-6viFwczOvlSgU65TDbCQlby6ccQSZ4Rvcith2HND8fQOqhBUHkD3FrJAo?width=1024&height=586&cropmode=none" alt="破格式設計"></p><span id="more"></span><h3 id="margin-值的數量"><a href="#margin-值的數量" class="headerlink" title="margin 值的數量"></a>margin 值的數量</h3><ul><li>兩個數值<br>  margin : &lt;上下&gt;  &lt;左右&gt;</li><li>四個數值<br>  margin : &lt;上&gt; &lt;右&gt; &lt;下&gt; &lt;左&gt;</li><li>三個數值<br>  margin : &lt;上&gt; &lt;左右&gt; &lt;下&gt;</li></ul><p>比較常用到置中 <code>margin : 0 auto</code>，auto 是把剩餘的空間分配給左右，因此才會置中。<br>實際上 margin : auto ，雖然是寫全部自動分配，但是 <a href="https://www.zhihu.com/question/21644198">上下並沒有作用</a>。  </p><p>css 的預設 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/writing-mode">write-mode (書寫模式)</a> 的方向是 <strong>水平</strong> 的，當我們用 margin-top : auto 或 margin-bottom : auto ，因為高度並無固定值，無法參照，剩餘空間也是 0 。</p><h3 id="line-height-單行垂直居中"><a href="#line-height-單行垂直居中" class="headerlink" title="line-height 單行垂直居中"></a>line-height 單行垂直居中</h3><p>如果是文字單行居中容器，可以把 <code>line-height</code> 設定跟容器高一樣  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span><span class="token punctuation">&#123;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="border-區塊位置計算-要記得扣掉"><a href="#border-區塊位置計算-要記得扣掉" class="headerlink" title="border 區塊位置計算 : 要記得扣掉"></a>border 區塊位置計算 : 要記得扣掉</h3><p>實作是 icon 的利用 <code>:before</code> 的 border 做圓框，粗度是 10 px。<br><code>top : 0、left : 0</code>，把版面定位到父層起始左上角一樣，此時 border 粗度上下左右都會增長 10px，如果要置中，必須把 border 多出來的在 top、left 扣掉，元素才能擺到中間填滿。  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.icon:before</span><span class="token punctuation">&#123;</span><span class="token property">position</span> <span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 10px solid red<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> -10px<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> -10px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token property">width</span> <span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="border-上下左右的呈現方式"><a href="#border-上下左右的呈現方式" class="headerlink" title="border 上下左右的呈現方式"></a>border 上下左右的呈現方式</h3><p>以半圓框為例，我們知道 border 的切齊點是對角線 (下圖)，變成圓形的話，上下左右並不是剛好從 0 切齊到 90 度<br>如果想要得到半圓，必須是鄰近兩個 border 再做旋轉 45 度。   </p><ul><li>width、height 為 0 ，單純的 border  </li></ul><p><img data-src="https://dsm01pap006files.storage.live.com/y4mVu7eeg2awMupFoD5T_nq55dVmzodISxqWR8paqvV46NhzCf4-VPLWZ0Xlm_JLUFsOCEGTcqVb6SoH4icdXFX9V3ZLR39nFB5YYYyNr-ENP529_4MNud_lE-ksXUdUOblMf7y8cah3KcaOjNIgJr_9l8o-fXeE4FZotOCa1CSDMl5pHcz4tP-0UtZeuurM5DG?width=496&height=488&cropmode=none" alt="純 border 圓形">  </p><blockquote><p>正確的半圓是相鄰兩邊的 border 組合出來的<br>像是 <a href="../CSSSeriesZeroToOne-03/#%E8%A3%9C%E5%85%85-%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E9%99%B0%E5%BD%B1">03 篇</a>能出現陰影的三角形一樣的概念</p></blockquote><h3 id="子層物件整體高度超出父層-padding-擠回去"><a href="#子層物件整體高度超出父層-padding-擠回去" class="headerlink" title="子層物件整體高度超出父層 : padding 擠回去"></a>子層物件整體高度超出父層 : padding 擠回去</h3><p>因為 icon margin-top 是 -75 px，比原本父層凸出 75 px ，必須在整體的 padding 把多的補回去，把子容器的元素都包含在內。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="https://www.zhihu.com/question/21644198">为什么「margin:auto」可以让块级元素水平居中？</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;本篇成果&quot;&gt;&lt;a href=&quot;#本篇成果&quot; class=&quot;headerlink&quot; title=&quot;本篇成果&quot;&gt;&lt;/a&gt;本篇成果&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codepen.io/shan473/pen/QWOZgzP&quot;&gt;Codepen&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://dsm01pap006files.storage.live.com/y4mc1SNrsZu-Jd9u35WNRJfQgL79lh5rKUE-T708KZoUgmfj1e0iFbqwtXItGPmNayXFew5OcaISpno8uR1h5a0KOuWpfs9NvwytLMedU4ijzl-h2mJT3AKapQU7kA5rNBSPp_QOV-6viFwczOvlSgU65TDbCQlby6ccQSZ4Rvcith2HND8fQOqhBUHkD3FrJAo?width=1024&amp;height=586&amp;cropmode=none&quot; alt=&quot;破格式設計&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="CSS" scheme="https://blog.rosa.tw/categories/Frontend/CSS/"/>
    
    
    <category term="CSS" scheme="https://blog.rosa.tw/tags/CSS/"/>
    
    <category term="CSSZeroToOneSeries" scheme="https://blog.rosa.tw/tags/CSSZeroToOneSeries/"/>
    
  </entry>
  
  <entry>
    <title>CSSZeroToOneSeries | 09 | 方塊酥版</title>
    <link href="https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-09/"/>
    <id>https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-09/</id>
    <published>2022-04-10T04:36:49.000Z</published>
    <updated>2022-04-12T02:28:35.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/wvPYowG?editors=0100">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4mRHJR5nKjd7Mry0fH-Eevw_EuUBALAe_xSDwFAsLc-jhOf9MVukfDscCyR0aOVgn_lXXMo0TTA9P005lZ17bfeeA1u1cH1pUKDVEDHN8e9zgJptSKT1iav8eWY0i6YhYCS8uM0UuTvFQpSWlDK4sLzuIjHGVDA8aLixITKrKveAHX73wjxjTY1VgK64Xx19fM?width=1024&height=585&cropmode=none" alt="方塊酥版"></p><span id="more"></span><h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><p>子層設定 float 的時候，會脫離原本的排版序，會導致父層的高度錯誤或抓不到，就要清除浮動 (clearfix)，以免後面的元素不照順序擠上來。</p><h4 id="清除浮動-overflow"><a href="#清除浮動-overflow" class="headerlink" title="清除浮動 : overflow"></a>清除浮動 : overflow</h4><blockquote><p>父層消除 float </p></blockquote><p>父層 <code>overflow:hidden</code> ，讓父層可以抓到子層的高度。<br>overflow 是處理多餘的內容，hidden 隱藏起來</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>左邊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>右邊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我要在下面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #fa0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.left</span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span>80%<span class="token punctuation">;</span>  <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span>20%<span class="token punctuation">;</span>  <span class="token property">float</span><span class="token punctuation">:</span>right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="清除浮動-多一個-clearfix-元素"><a href="#清除浮動-多一個-clearfix-元素" class="headerlink" title="清除浮動 : 多一個 clearfix 元素"></a>清除浮動 : 多一個 clearfix 元素</h4><blockquote><p>重點在於子元素，如果下一個想要按照自己的流向排，可以在前面加上 <code>clearfix</code> 斬斷 float 的排版</p></blockquote><p>在想要正常排版在子元素屁股後面，設定 <code>clear : both</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>float 左邊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>float 右邊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>按照老方法往下排<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.left</span><span class="token punctuation">&#123;</span> <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span><span class="token punctuation">&#123;</span> <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.clearfix</span><span class="token punctuation">&#123;</span><span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按下開關可以看有無 float 的效果   </p><iframe height="300" style="width: 100%;" scrolling="no" title="float clearfix" src="https://codepen.io/shan473/embed/NWwObjj?default-tab=result&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/shan473/pen/NWwObjj">  float clearfix</a> by YanShanHong (<a href="https://codepen.io/shan473">@shan473</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe><h4 id="清除浮動-父層-after"><a href="#清除浮動-父層-after" class="headerlink" title="清除浮動 : 父層 :after"></a>清除浮動 : 父層 :after</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>左邊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>右邊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我要在下面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #fa0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box >div</span><span class="token punctuation">&#123;</span><span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box:after</span><span class="token punctuation">&#123;</span><span class="token property">content</span> <span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span><span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>偽元素一定要設定 <code>block</code>，讓寬度撐開  </p></blockquote><h3 id="波浪號選擇器"><a href="#波浪號選擇器" class="headerlink" title="~ 波浪號選擇器"></a>~ 波浪號選擇器</h3><p>波浪號是兄弟選擇器，在同一層的後面兄弟都選起來</p><p>常用 <strong>第一個  ~  到底的元素</strong> 都選起來，<a href="../CSSSeriesZeroToOne-08.md">08 篇</a> 的麵包屑除了 <code>(p + p)</code>，波浪號也可以使用</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>no.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>no.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>no.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>no.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p:first-child ~p</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>另一種是想選到同一層的某個東西(們)，除了直接選取外，也可以透過 波浪號</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是一段文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是 span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是 span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>我是連結<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>我是連結<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是 span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p~a</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="not-排擠你"><a href="#not-排擠你" class="headerlink" title=":not : 排擠你"></a>:not : 排擠你</h3><p>屬於逆向思考，如果要選取除了第一個以外的其他方框，除了用波浪號</p><ul><li>一般波浪號排擠  </li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>波浪號式排擠<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>一號走開<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>一號走開<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>一號走開<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p~p</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>:not</code> : 排擠，麻瓜翻譯機，要選到 <strong>非第一個的 p</strong></li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p:not(:first-child)</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="試著用-Grid"><a href="#試著用-Grid" class="headerlink" title="試著用 Grid"></a>試著用 Grid</h2><p>同樣的架構，把 float 去除，利用軌道線進行排版。<br><a href="https://codepen.io/shan473/pen/ZEvRByL?editors=0100">Codepen</a></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.wrapper</span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span>grid<span class="token punctuation">;</span>  <span class="token property">grid-template</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>3<span class="token punctuation">,</span>1fr<span class="token punctuation">)</span> / <span class="token function">repeat</span><span class="token punctuation">(</span>4<span class="token punctuation">,</span>1fr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.item:first-child</span><span class="token punctuation">&#123;</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> 1 / 1 / 3 / 3<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="https://medium.com/ui-ux%E7%B7%B4%E5%8A%9F%E5%9D%8A/%E8%A7%A3%E9%99%A4-float-%E5%B1%AC%E6%80%A7%E7%9A%84%E6%96%B9%E6%B3%95-5e29cc30777d">解除 float 屬性的方法. 使用 float 屬性一定要清除浮動，否則會有版面錯置或失去高度的情況</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;本篇成果&quot;&gt;&lt;a href=&quot;#本篇成果&quot; class=&quot;headerlink&quot; title=&quot;本篇成果&quot;&gt;&lt;/a&gt;本篇成果&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codepen.io/shan473/pen/wvPYowG?editors=0100&quot;&gt;Codepen&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://dsm01pap006files.storage.live.com/y4mRHJR5nKjd7Mry0fH-Eevw_EuUBALAe_xSDwFAsLc-jhOf9MVukfDscCyR0aOVgn_lXXMo0TTA9P005lZ17bfeeA1u1cH1pUKDVEDHN8e9zgJptSKT1iav8eWY0i6YhYCS8uM0UuTvFQpSWlDK4sLzuIjHGVDA8aLixITKrKveAHX73wjxjTY1VgK64Xx19fM?width=1024&amp;height=585&amp;cropmode=none&quot; alt=&quot;方塊酥版&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="CSS" scheme="https://blog.rosa.tw/categories/Frontend/CSS/"/>
    
    
    <category term="CSS" scheme="https://blog.rosa.tw/tags/CSS/"/>
    
    <category term="CSSZeroToOneSeries" scheme="https://blog.rosa.tw/tags/CSSZeroToOneSeries/"/>
    
  </entry>
  
  <entry>
    <title>CSSZeroToOneSeries | 08 | 網站麵包屑</title>
    <link href="https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-08/"/>
    <id>https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-08/</id>
    <published>2022-04-10T04:36:38.000Z</published>
    <updated>2022-04-12T02:28:31.558Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/MWOqRoJ">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4m2Ut7v52DvB4HXKmhJiPfdh0fC0SYoIg5T6XnWySFOIDNRpNgeG6BkVMmRRZ1qoFlUYVdtq9et8hdrrwbuKF_IqtJFFUTFY2ZI0HDP4tw4ma1Jx9JaMbE6WmvD7YYOv32FJlbpmUwIGLUMzWi1CyKgXyGm598Nl1TZPipEnVfdXC5t8p5GdEi7KevsBdw7Zou?width=1024&height=585&cropmode=none" alt="麵包屑"></p><span id="more"></span><h2 id="before-偽元素"><a href="#before-偽元素" class="headerlink" title="::before 偽元素"></a>::before 偽元素</h2><p><code>::before</code> 或是 <code>:before</code> 寫法都可以<br>利用 <code>content</code> 內容產生的箭頭，可以隨時替換<br>箭頭也屬裝飾性，不用再特別寫 html tag  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.breadcrumb li + li:before</span><span class="token punctuation">&#123;</span><span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'>'</span><span class="token punctuation">;</span><span class="token property">padding-left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>content 覺得圖案太少，也可以利用網頁編碼 UTF-8 的特殊字元來顯示</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.breadcrumb li + li:before</span><span class="token punctuation">&#123;</span><span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'\003E'</span><span class="token punctuation">;</span><span class="token property">padding-left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>這兩者是一樣的，但前提是要在 html 加入 <code>&lt;meta charset=&quot;utf-8&quot;&gt;</code> 設定編碼<br>參考 : <a href="https://www.toptal.com/designers/htmlarrows/">快速編碼箭頭</a></p><h2 id="再深入偽元素"><a href="#再深入偽元素" class="headerlink" title="再深入偽元素"></a>再深入偽元素</h2><h3 id="偽元素出現的位置"><a href="#偽元素出現的位置" class="headerlink" title="偽元素出現的位置 ?"></a>偽元素出現的位置 ?</h3><p>偽元素需要經過瀏覽器的運算跟渲染之後才會出現，所以 <strong>檢視原始碼</strong> 是看不到的</p><h3 id="content"><a href="#content" class="headerlink" title="content"></a>content</h3><p>偽元素一定要有 <code>content</code> ，不然就不會出現了<br>其中 content 包含各式各樣的屬性  </p><ol><li> none</li><li> normal</li><li> <code>string</code></li><li> url</li><li> <code>counter</code></li><li> <code>attr</code></li><li> open-quote</li><li> close-quote</li><li> no-open-quote</li><li> no-close-quote</li></ol><p>這邊舉例常見的幾個樣式  </p><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>一般的文字或是空內容，拿來裝飾元素<br>像本篇的箭頭就是 string   </p><h3 id="counter-讓-css-數數"><a href="#counter-讓-css-數數" class="headerlink" title="counter : 讓 css 數數"></a>counter : 讓 css 數數</h3><p>在父層新建一個 reset 計時器<br><code>counter-reset : &lt;計時器名稱&gt; &lt;起始值&gt;</code>，如果沒有寫起始值是從 0 開始  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span><span class="token property">counter-reset</span><span class="token punctuation">:</span> Section 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其實也可以多層  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span><span class="token property">counter-reset</span><span class="token punctuation">:</span> Section 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">section</span><span class="token punctuation">&#123;</span>  <span class="token property">counter-reset</span><span class="token punctuation">:</span> P 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">section:before</span><span class="token punctuation">&#123;</span><span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'Section'</span> <span class="token function">counter</span><span class="token punctuation">(</span>Section<span class="token punctuation">)</span><span class="token string">' .'</span><span class="token punctuation">;</span><span class="token property">counter-increment</span><span class="token punctuation">:</span> Section 1<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">p:before</span><span class="token punctuation">&#123;</span><span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'P'</span> <span class="token function">counter</span><span class="token punctuation">(</span>Section<span class="token punctuation">)</span><span class="token string">'-'</span><span class="token function">counter</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token string">' .'</span><span class="token punctuation">;</span><span class="token property">counter-increment</span><span class="token punctuation">:</span> P 1<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子層的偽元素可以使用 counter 進行計數</p><ul><li>content : counter(<code>&lt;計數器名稱&gt;</code>)</li><li>counter-increment : <code>&lt;計數器名稱&gt; &lt;要增加的數字&gt;</code> 也可以是負數       </li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span><span class="token property">counter-reset</span><span class="token punctuation">:</span> Title<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h1:before</span><span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'Title '</span><span class="token function">counter</span><span class="token punctuation">(</span>Title<span class="token punctuation">)</span><span class="token string">' .'</span><span class="token punctuation">;</span>  <span class="token property">counter-increment</span><span class="token punctuation">:</span> Title 1<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="attr"><a href="#attr" class="headerlink" title="attr"></a>attr</h3><p>可以拿到 <code>data-</code> 屬性的值，如果跟資料有關的不要放在偽元素，瀏覽器在解析時是讀取不到的。  </p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">data-title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>商店<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">data-title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>品項<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">data-title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>貨物<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">span:before</span><span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">attr</span><span class="token punctuation">(</span>data-title<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><iframe height="300" style="width: 100%;" scrolling="no" title="css counter" src="https://codepen.io/shan473/embed/podGNON?default-tab=result&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/shan473/pen/podGNON">  css counter</a> by YanShanHong (<a href="https://codepen.io/shan473">@shan473</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe><h3 id="url-沒作用的圖片"><a href="#url-沒作用的圖片" class="headerlink" title="url 沒作用的圖片"></a>url 沒作用的圖片</h3><p>content 中的 <a href="http://csscoke.com/2013/09/22/%E4%BD%BF%E7%94%A8before-%E8%88%87-after%E4%BE%86%E8%A3%BD%E4%BD%9C%E5%8F%AF%E5%88%97%E5%8D%B0%E7%9A%84logo%E5%9C%96%E7%89%87/">url 圖片雖然能被列印出來</a>，但不能調整寬高尺寸，只能利用 scale 來縮放。</p><p>根據 <a href="https://segmentfault.com/q/1010000004569689">這篇文</a>，偽元素預設是 inline 的一種，就算調成 block，因為 content 並不是實際計算範圍，block 算的是匿名元素的 <code>width</code> 跟 <code>height</code>  </p><p>真的想放圖片可以使用 background-imge，再透過 background-size 調整大小，但是就不能被影印</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>為了 SEO 著想，偽元素出現在裝飾性上就好，資訊類就不建議了</p><h2 id="兄弟選擇器-，我的隔壁"><a href="#兄弟選擇器-，我的隔壁" class="headerlink" title="兄弟選擇器 (+) ，我的隔壁"></a>兄弟選擇器 (+) ，我的隔壁</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>排擠我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我有<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我有<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我是防守員<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>排擠我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我有<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">a + a</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在 sass 會寫 <code>&amp; + &amp;</code>，通常是排除第一個，因為第一個的前面並沒有元素  </p><p>或者寫 <code>:not</code> 把第一個給排除掉  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">a</span><span class="token punctuation">:</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token punctuation">:</span>first-child<span class="token punctuation">)</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="網頁色彩-HSL"><a href="#網頁色彩-HSL" class="headerlink" title="網頁色彩 HSL"></a>網頁色彩 HSL</h2><p><code>hsl (色相角度&lt;0~360&gt; , 色彩飽和度 , 色彩的明度 )</code><br>色彩是 RGB，分別各佔 120 度    </p><p><a href="http://csscoke.com/2015/01/01/rgb-hsl-hex/"><img data-src="https://dsm01pap006files.storage.live.com/y4mzaFTHqTQKFWQ2sQ_sISqYOCtvikOQA4Dmli4z7vpaNjUQ7Nirr4UbVRGbiS9uCI9vba3kPgs7-_xx4wqwjkXxMs-VnajXcBBhswICqcXV54qi9lLN5lSAO_A-G5MdHISuaULUSfhoHKbgA1KFfLD6bcojrfSyoJJqCwIodr7i0AGpp8ainTKi0Fl7MV7y3XO?width=500&height=424&cropmode=none" alt="HSL 色相環圖片"> 來自《RGB、HSL、Hex 網頁色彩碼，看完這篇全懂了 | CSS可樂》</a>  </p><ul><li><code>Hue</code> : 色相</li><li><code>Saturation</code> : 飽和度。 預設是 100%，越低越接近灰黑</li><li><code>Lightness</code> : 亮度。 預設是 50%。 有點像相機的曝光度，增加白色或黑色的量</li></ul><p>例 :  綠色  <code>hsl (120,100%,50%)</code></p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="https://segmentfault.com/q/1010000004569689">伪类before/after中的图片大小是不是不能设置的? - SegmentFault 思否</a>   </li><li><a href="http://csscoke.com/2013/09/22/%E4%BD%BF%E7%94%A8before-%E8%88%87-after%E4%BE%86%E8%A3%BD%E4%BD%9C%E5%8F%AF%E5%88%97%E5%8D%B0%E7%9A%84logo%E5%9C%96%E7%89%87/">使用::before 與 ::after來製作可列印的logo圖片</a>  </li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;本篇成果&quot;&gt;&lt;a href=&quot;#本篇成果&quot; class=&quot;headerlink&quot; title=&quot;本篇成果&quot;&gt;&lt;/a&gt;本篇成果&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codepen.io/shan473/pen/MWOqRoJ&quot;&gt;Codepen&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://dsm01pap006files.storage.live.com/y4m2Ut7v52DvB4HXKmhJiPfdh0fC0SYoIg5T6XnWySFOIDNRpNgeG6BkVMmRRZ1qoFlUYVdtq9et8hdrrwbuKF_IqtJFFUTFY2ZI0HDP4tw4ma1Jx9JaMbE6WmvD7YYOv32FJlbpmUwIGLUMzWi1CyKgXyGm598Nl1TZPipEnVfdXC5t8p5GdEi7KevsBdw7Zou?width=1024&amp;height=585&amp;cropmode=none&quot; alt=&quot;麵包屑&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="CSS" scheme="https://blog.rosa.tw/categories/Frontend/CSS/"/>
    
    
    <category term="CSS" scheme="https://blog.rosa.tw/tags/CSS/"/>
    
    <category term="CSSZeroToOneSeries" scheme="https://blog.rosa.tw/tags/CSSZeroToOneSeries/"/>
    
  </entry>
  
  <entry>
    <title>CSSZeroToOneSeries | 07 | 導覽列 &amp; 變化導覽列</title>
    <link href="https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-07/"/>
    <id>https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-07/</id>
    <published>2022-04-09T14:46:25.000Z</published>
    <updated>2022-04-12T02:28:26.955Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/abVaLWx">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4m9T4H16Ta75kDzYcQq5DvDiixK4mUT7-zgyeMbwFltHZbFafI5uejyNEI2PKXuVsHwbitph6KpHB-W1twOqWHvFYJXV0ZHqpaK31pEbAbsnH7ffzVJrY4jCn-DQT8BuQlWSI7mhiwxpMOte8vgXL82SlBMc9CDVnRs4GQaX5zSfAIPFEVdD6wo429FOHMt4kh?width=1024&height=133&cropmode=none" alt="導覽列"></p><p>LOGO 放中央的四種不同寫法導覽列<br><a href="https://codepen.io/shan473/pen/NWwLwmZ">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4mxh2kVWQGz5Y5blS98ignQpvNJzpOWFoegrfNdnwioXN37pRMs_UAXWIjV38dGFgg2z4HSQGInRsfJzwzxhUc1-TL4o4jsjhWV_PINth18C_qZ2JEo-KuJm3UAaU8ePorHvVKZABYHV6LJ9mgFTP4YdVPGUP2DmOSCmHehmX01KVzjrVlFs-xp9IVKe_3hKWO?width=660&height=444&cropmode=none" alt="變化導覽列"></p><span id="more"></span><h3 id="max-width-最大寬度"><a href="#max-width-最大寬度" class="headerlink" title="max-width : 最大寬度"></a>max-width : 最大寬度</h3><p>避免現代螢幕過寬(高解析度螢幕)導致元素被擠在邊邊，如果原本是 width 是填滿的情況，使用 <code>display : flex，justify-content : space-between</code>，元素會被分散在螢幕的邊邊角角。 </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">&#123;</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="input-focus"><a href="#input-focus" class="headerlink" title="input : focus"></a>input : focus</h3><p>input 在打字時會有預設的外框線 **(outline)**，可以把框線消失，讓視覺體驗更加。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">input:foucs</span><span class="token punctuation">&#123;</span>  <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="a-tag-不能-transform-的原因"><a href="#a-tag-不能-transform-的原因" class="headerlink" title="a tag 不能 transform 的原因"></a>a tag 不能 transform 的原因</h3><p>幫連結加上浮上去的漸變動畫， a 的預設 display 是 <code> inline</code>，會發現直接加上去 a 並不會有變化。  </p><p>實際上 inline 屬性的元素並不支援，修改 display 屬性就可以了。</p><p>參考 : </p><ul><li><a href="https://stackoverflow.com/questions/14883250/css-transform-doesnt-work-on-inline-elements">CSS transform doesn’t work on inline elements - Stack Overflow</a></li></ul><blockquote><p>根據 CSS 規格書，有提到區塊元素或者 <code>inline-auto</code> 這類才可以 transform。 </p></blockquote><h3 id="border-畫線效果"><a href="#border-畫線效果" class="headerlink" title="border 畫線效果"></a>border 畫線效果</h3><p>position 讓我們可以利用 top、bottom、left、right 四邊進行定位，也可以撐開全版面。<br>也可以利用偽元素的 <code>left</code>、<code>right</code> 來創造線條收縮的效果。  </p><blockquote><p>為什麼用偽元素 ? 這邊的底線只是 <strong>裝飾作用</strong> 不具任何資訊，盡量不要創造新的 tag 來裝</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container nav a:after</span><span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span>50%<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span>50%<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid <span class="token function">var</span><span class="token punctuation">(</span>--txtColor<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span>left .3s ease<span class="token punctuation">,</span>right .3 ease<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.container nav a:hover:after</span><span class="token punctuation">&#123;</span>  <span class="token property">left</span><span class="token punctuation">:</span>1em<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span>1em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>後來想想這樣的寫法不太好，原因在於 <a href="https://csstriggers.com/top"><code>top</code></a> 這類定位是會 <code>reflow</code> (重排)，效能上比較不好，選擇只有 <code>repaint</code> (重繪) 的 <a href="https://csstriggers.com/transform">transform</a></p></blockquote><p>改成 transform  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container nav a:after</span><span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 0.1em<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">transform-origin</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> transform .3s ease<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.container nav a:hover:after</span><span class="token punctuation">&#123;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>.8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>transition 不要使用 <code>all</code>，針對要件漸變的部分設定就好，以免效能上的浪費。</p></blockquote><h2 id="導覽列變化手法"><a href="#導覽列變化手法" class="headerlink" title="導覽列變化手法"></a>導覽列變化手法</h2><ol><li>把 LOGO 擺中間  </li><li>flexbox 改變 order  </li><li>直接改寫 HTML 結構</li><li>利用絕對定位   </li></ol><p>個人最喜歡 flexbox 的部份，既不修改結構，又保有彈性修改，哪天想讓 LOGO 到最前面只要修改 <code>order</code> 即可。 </p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;本篇成果&quot;&gt;&lt;a href=&quot;#本篇成果&quot; class=&quot;headerlink&quot; title=&quot;本篇成果&quot;&gt;&lt;/a&gt;本篇成果&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codepen.io/shan473/pen/abVaLWx&quot;&gt;Codepen&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://dsm01pap006files.storage.live.com/y4m9T4H16Ta75kDzYcQq5DvDiixK4mUT7-zgyeMbwFltHZbFafI5uejyNEI2PKXuVsHwbitph6KpHB-W1twOqWHvFYJXV0ZHqpaK31pEbAbsnH7ffzVJrY4jCn-DQT8BuQlWSI7mhiwxpMOte8vgXL82SlBMc9CDVnRs4GQaX5zSfAIPFEVdD6wo429FOHMt4kh?width=1024&amp;height=133&amp;cropmode=none&quot; alt=&quot;導覽列&quot;&gt;&lt;/p&gt;
&lt;p&gt;LOGO 放中央的四種不同寫法導覽列&lt;br&gt;&lt;a href=&quot;https://codepen.io/shan473/pen/NWwLwmZ&quot;&gt;Codepen&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://dsm01pap006files.storage.live.com/y4mxh2kVWQGz5Y5blS98ignQpvNJzpOWFoegrfNdnwioXN37pRMs_UAXWIjV38dGFgg2z4HSQGInRsfJzwzxhUc1-TL4o4jsjhWV_PINth18C_qZ2JEo-KuJm3UAaU8ePorHvVKZABYHV6LJ9mgFTP4YdVPGUP2DmOSCmHehmX01KVzjrVlFs-xp9IVKe_3hKWO?width=660&amp;height=444&amp;cropmode=none&quot; alt=&quot;變化導覽列&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="CSS" scheme="https://blog.rosa.tw/categories/Frontend/CSS/"/>
    
    
    <category term="CSS" scheme="https://blog.rosa.tw/tags/CSS/"/>
    
    <category term="CSSZeroToOneSeries" scheme="https://blog.rosa.tw/tags/CSSZeroToOneSeries/"/>
    
  </entry>
  
  <entry>
    <title>⟬ 筆記 ⟭ 初探 CSS Grid</title>
    <link href="https://blog.rosa.tw/Frontend/CSS/CSS-Grid/"/>
    <id>https://blog.rosa.tw/Frontend/CSS/CSS-Grid/</id>
    <published>2022-04-09T10:55:08.000Z</published>
    <updated>2022-04-09T10:55:08.091Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>眾所皆知 flex 是排版神器，尤其在一維的排版非常好用<br>那在二維的排版呢 ?<br>就不得提到 grid，雖然 grid 在舊的瀏覽器支援性沒到很高，現代瀏覽器是幾乎都有支援。(<a href="https://caniuse.com/css-grid">caniuse</a>)   </p><span id="more"></span>  <h2 id="grid-container-容器布局"><a href="#grid-container-容器布局" class="headerlink" title="grid-container 容器布局"></a>grid-container 容器布局</h2><p>要建立網格，起手式先建造一個容器，準備讓子項網格排列    </p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>item1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>item2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>item3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>item4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>item5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="display-grid"><a href="#display-grid" class="headerlink" title="display : grid"></a>display : grid</h3><p>grid 是二維的版面排版，透過 columns 跟 rows 來安排，直接 加上 grid 不會有變化。  </p><p>display 有關 grid 的有 2 個值，就像 <code>inline-flex</code> 跟 <code>flex</code>    </p><ol><li><code>inline-grid</code>  </li><li><code>grid</code> : 2D 布局  </li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span> grid | inline-grid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="格線軌道（Grid-Track）"><a href="#格線軌道（Grid-Track）" class="headerlink" title="格線軌道（Grid Track）"></a>格線軌道（Grid Track）</h3><p>在 grid 中有不同的布局方式，來決定網格的架構     </p><ol><li>軌道   </li><li>fr 分塊，利用百分比算格數，具有彈性</li></ol><h3 id="明式格線（explicit-grid）"><a href="#明式格線（explicit-grid）" class="headerlink" title="明式格線（explicit grid）"></a>明式格線（explicit grid）</h3><p>明式是自定義軌道，有明就會有暗，暗式是 CSS 幫我們建立的線。  </p><h4 id="grid-template-columns-橫向軌道"><a href="#grid-template-columns-橫向軌道" class="headerlink" title="grid-template-columns : 橫向軌道"></a>grid-template-columns : 橫向軌道</h4><p>橫向網格的寬度。<br>合法的絕對單位 :   </p><ul><li>% </li><li>px</li><li>em</li><li>rem  </li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">&#123;</span><span class="token property">grid-template-columns</span> <span class="token punctuation">:</span> 100px 100px 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>橫向放入三個元素，各別有寬度。  </p><ul><li><p><code>fr</code> : 可用空間的分塊（fraction）。全都 <code>fr</code> 的單位就像切分成幾分之幾，但是類似帶有 flex-grow 、flex-shrink 的功能。  </p>  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">&#123;</span><span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 2fr 3fr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  橫向呈現兩個元素，前者占 2/5，後者 3/5</p></li><li><p><code>auto</code> : 如果是搭配 fr 單位，會是子元素分配剩餘的空間</p></li></ul><p>如果有重複的版面，除了一個個手打，也可以利用 repeat 快速重複</p><ul><li><code>repeat(&lt;次數&gt;,&lt;單位&gt;)</code>  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span>grid<span class="token punctuation">;</span><span class="token property">grid-template-columns</span> <span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>5<span class="token punctuation">,</span>1fr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>  容器會被橫向切成五塊。  <h4 id="gird-template-rows"><a href="#gird-template-rows" class="headerlink" title="gird-template-rows"></a>gird-template-rows</h4>直排間的大小，跟 columns 很像<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span>grid<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span> <span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>5<span class="token punctuation">,</span>1fr<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>5<span class="token punctuation">,</span>1fr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.item:nth-child(2n)</span><span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.item:nth-child(2n+1)</span><span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #ccc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>延伸上一個 columns 的例子，這樣就完成 5X5 的網格版面。<br>做個簡單的就是黑白棋盤格<br><img data-src="https://dsm01pap006files.storage.live.com/y4mWjsi1VFCz1a4Y4PYgBdGH4nr_koMsXMKau9gYdZw6NHUWT6BZTF5VZzybgEZeTgEWRW7yShbHrosym0pS8SwRMoz8afSelU59UktSX_elpmKmC2GyvE1HQY_PVkefILEXPrnQoaOVZqP-h3mlpRPRv7Ma6NWNF8bWxiFgg0LCDBQ5pAgdUJKSyhR__iTjKM-?width=1024&height=558&cropmode=none" alt="軌道式布局"></li></ul><h4 id="grid-template-混合式布局"><a href="#grid-template-混合式布局" class="headerlink" title="grid-template : 混合式布局"></a>grid-template : 混合式布局</h4><blockquote><p>先 row 再 column</p></blockquote><ul><li><p>grid-template : <code>&lt;rows-template&gt; / &lt;columns-template&gt;</code></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 軌道式 */</span><span class="token selector">.container</span><span class="token punctuation">&#123;</span><span class="token comment">/* ...略 */</span>  <span class="token property">grid-template</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>5<span class="token punctuation">,</span>1fr<span class="token punctuation">)</span> / <span class="token function">repeat</span><span class="token punctuation">(</span>5<span class="token punctuation">,</span>1fr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了軌道也可以用命名式的，上面的例子可以改成，下面會再提到命名式的寫法    </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 軌道式 */</span><span class="token selector">.container</span><span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span>grid<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>  <span class="token property">grid-template</span><span class="token punctuation">:</span>     <span class="token string">". . . . ."</span>    <span class="token string">". . . . ."</span>    <span class="token string">". . . . ."</span>    <span class="token string">". . . . ."</span>    <span class="token string">". . . . ."</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img data-src="https://dsm01pap006files.storage.live.com/y4munCQNLVYAOI_NYCgXrtU1bv1eLPQS8Nb_33cNyi0-DhiHRAeXzLCZYZi73nysSdYiALn5Ht-_Hoj0uD1VBw3tiLw5HE95LAuvmENJX9hSx2GnjRXwx_yHe8D5LthivgCGVNW_EuGXFJ8I3fJAtqTZVAbSFx8Zxvx_1Av9IqqrTFpH78MQSYy0dVnBEuy4Eeo?width=1024&height=558&cropmode=none" alt="命名式布局"></p><h3 id="暗式格線（implicit-grid）"><a href="#暗式格線（implicit-grid）" class="headerlink" title="暗式格線（implicit grid）"></a>暗式格線（implicit grid）</h3><p>瀏覽器將剩餘的空間自行運用產生的<br>設定剩下沒有指定 template 的 rows</p><blockquote><p><strong>implicit grid 預設的寬度會根據內容的大小來改變</strong><br>如果 定格到超出的 track ，CSS 會自動補上 implicit grid</p></blockquote><h4 id="grid-auto-rows-amp-grid-auto-columns"><a href="#grid-auto-rows-amp-grid-auto-columns" class="headerlink" title="grid-auto-rows &amp;  grid-auto-columns"></a>grid-auto-rows &amp;  grid-auto-columns</h4><p>容器預設寬高。  </p></li><li><p> <code>minmax</code> 可以設定最小和最大值  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">&#123;</span><span class="token property">grid-auto-rows</span> <span class="token punctuation">:</span> <span class="token function">minmax</span><span class="token punctuation">(</span>`&lt;min><span class="token punctuation">,</span>&lt;max>`<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="網格間距"><a href="#網格間距" class="headerlink" title="網格間距"></a>網格間距</h3><h4 id="grid-gap"><a href="#grid-gap" class="headerlink" title="grid-gap"></a>grid-gap</h4><ul><li><code>grid-gap-row</code> : 直向元素的間距</li><li><code>grid-gap-column</code> : 橫向元素的間距</li></ul><p>兩個合併設定 grid-gap :  <code>&lt;row&gt; &lt;column&gt;</code><br>一樣是 <strong>先 row 再 column</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">&#123;</span><span class="token property">grid-gap</span> <span class="token punctuation">:</span> &lt;row-gap> &lt;column-gap><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="另一種布局-命名式"><a href="#另一種布局-命名式" class="headerlink" title="另一種布局 : 命名式"></a>另一種布局 : 命名式</h2><h3 id="grid-template-areas-命名式布局"><a href="#grid-template-areas-命名式布局" class="headerlink" title="grid-template-areas : 命名式布局"></a>grid-template-areas : 命名式布局</h3><p>透過命名的方式給空間<br>在父層 <code>grid-template-areas</code> 定義版面<br>子層元素透過 <code>grid-area</code> 設定別名 </p><p>常見的範例，快速排出 <strong>三欄式布局</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span><span class="token property">grid-template-areas</span> <span class="token punctuation">:</span> <span class="token string">"header header"</span><span class="token string">"sidebar content"</span><span class="token string">"footer footer"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="grid-area-定格之命名式定格"><a href="#grid-area-定格之命名式定格" class="headerlink" title="grid-area : 定格之命名式定格"></a>grid-area : 定格之命名式定格</h3><p>上面有提到軌道式的合併寫法也可以 <code>grid-area</code> 起點 &amp; 終點，而在命名式布局可以對想要的元素命名，再到布局進行排列。  </p><p>延續上面的三欄式布局，對個別的區塊 <strong>命名</strong><br>再個別設定區塊大小。  <a href="https://codepen.io/shan473/pen/yLpjwaK">Codepen 三欄式</a></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 100px 1fr<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> 200px 1fr 64px<span class="token punctuation">;</span><span class="token property">grid-template-areas</span> <span class="token punctuation">:</span> <span class="token string">"header header"</span><span class="token string">"sidebar content"</span><span class="token string">"footer footer"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.header</span><span class="token punctuation">&#123;</span><span class="token property">grid-area</span> <span class="token punctuation">:</span> header<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #ccc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.sidebar</span><span class="token punctuation">&#123;</span><span class="token property">grid-area</span> <span class="token punctuation">:</span> sidebar<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #fa0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.content</span><span class="token punctuation">&#123;</span><span class="token property">grid-area</span> <span class="token punctuation">:</span> content <span class="token punctuation">;</span>   <span class="token property">background-color</span><span class="token punctuation">:</span> #0fa<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.footer</span><span class="token punctuation">&#123;</span><span class="token property">grid-area</span> <span class="token punctuation">:</span> footer<span class="token punctuation">;</span>   <span class="token property">background-color</span><span class="token punctuation">:</span> violet<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>個人覺得這種方式很直覺，做常規版面規劃就可以很快速😃  </p><h2 id="grid-item-子項定格"><a href="#grid-item-子項定格" class="headerlink" title="grid-item 子項定格"></a>grid-item 子項定格</h2><h3 id="grid-row-column-start-amp-end-個別設定定格"><a href="#grid-row-column-start-amp-end-個別設定定格" class="headerlink" title="grid-row/column start &amp; end 個別設定定格"></a>grid-row/column start &amp; end 個別設定定格</h3><p>有兩種方式來讓格子被佔據</p><ol><li>軌道範圍</li><li>佔據格數 </li></ol><h4 id="透過軸線起終點來指定佔據的範圍"><a href="#透過軸線起終點來指定佔據的範圍" class="headerlink" title="透過軸線起終點來指定佔據的範圍"></a>透過軸線起終點來指定佔據的範圍</h4><ul><li><code>grid-column-start</code> :  column 的佔據軌道起點</li><li><code>grid-column-end</code> : column 的佔據軌道終點</li></ul><p>打開 Devtools 按下 grid 的格線視覺工具就可以看見<br><img data-src="https://dsm01pap006files.storage.live.com/y4mFIFKSjXekpoog3xRQ2ne9NlGlppe2cMmpEyFJah7PMyNkDaFqG3BIrKWtESIgciPHiZw_qqYVFJRFYWO0OHTqvcyjR_0APRrrlZb7mVrKDkTDLsBclQunblwKtk4aoAwiGEk-E8u68pOAqaRSyu6NQ2Cb69euzI-d_02dR7VNk2rk15g-bDZqscdaCPFbDn0?width=1024&height=588&cropmode=none" alt="Devtools grid"></p><p>合併寫法</p><ul><li><code>grid-column</code> : &lt;起點&gt; /  &lt;終點&gt;</li></ul><p>如果想要 <strong>占據整行</strong>，除了從 <strong>第一行 / 末行</strong> 這樣寫，也可以利用負數來達成。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-1</span><span class="token punctuation">&#123;</span><span class="token property">grid-column</span> <span class="token punctuation">:</span> 1/-1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="span-數格數"><a href="#span-數格數" class="headerlink" title="span : 數格數"></a>span : 數格數</h4><p>預設 grid-column 是 <code>span 1</code>，就是按照 flow 占據一格  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-2</span><span class="token punctuation">&#123;</span><span class="token property">grid-colum</span> <span class="token punctuation">:</span> span 2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="grid-area-軌道混合式定格"><a href="#grid-area-軌道混合式定格" class="headerlink" title="grid-area : 軌道混合式定格"></a>grid-area : 軌道混合式定格</h3><p>grid-area : <code>&lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;</code>。</p><p>按照老規矩 <strong>先 row 開始再 column</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span><span class="token punctuation">&#123;</span><span class="token property">grid-area</span> <span class="token punctuation">:</span> 1 / 2 / 3 / 4 <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="order-順序"><a href="#order-順序" class="headerlink" title="order 順序"></a>order 順序</h2><p>跟 <code>flex</code> 一樣 grid 是可以改變順序的。  </p><ul><li><code>order : 0</code> 照原本的排序</li><li><code>order : -1</code> : order 也可以是負值，屬於往前排。    </li></ul><p>order 的起始點是從 <strong>整體的排列</strong> 後面開始算起。<br>首先要知道 grid 的排列順序，預設是 row ，也就是從 row 的尾巴開始，如果有兩列，就是從第二列的尾巴開始。  </p><iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/shan473/embed/vYpjMZW?default-tab=result&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/shan473/pen/vYpjMZW">  Untitled</a> by YanShanHong (<a href="https://codepen.io/shan473">@shan473</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe><h2 id="對齊"><a href="#對齊" class="headerlink" title="對齊"></a>對齊</h2><h3 id="整體垂直與水平對齊"><a href="#整體垂直與水平對齊" class="headerlink" title="整體垂直與水平對齊"></a>整體垂直與水平對齊</h3><p>設定在父層，控制 <strong>整個網格</strong> 的位置</p><ul><li><code>justify-content</code> : 所有的子項水平位置。</li><li><code>align-content</code> :  所有的子項垂直位置</li></ul><blockquote><p>   flex-end(start) 這是給 flexbox 用的，gird 寫法是 start 跟 end</p></blockquote><p>設定在父層，控制 <strong>所有網格中的內容對齊</strong></p><ul><li><code>justify-items</code> : 預設是 stretch，個別設定會按照子項內容的 <strong>寬</strong> 再去水平對齊。</li><li><code>align-items</code> : 預設是 stretch，個別設定會按照子項內容的 <strong>高</strong> 再去垂直對齊。</li></ul><h3 id="個別設定子項內容對齊"><a href="#個別設定子項內容對齊" class="headerlink" title="個別設定子項內容對齊"></a>個別設定子項內容對齊</h3><p>設定在子層，控制 <strong>個別網格中的內容對齊</strong><br>子項的內容物想要客製化的對齊，複寫 justify-items &amp; align-items 的控制。  </p><ul><li><code>align-self</code> : 預設是 stretch，使用跟 align-items 差不多。</li><li><code>justufy-self</code> :  預設是 stretch，使用跟 justify-items 差不多。</li></ul><iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/shan473/embed/PoEevZg?default-tab=result&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/shan473/pen/PoEevZg">  Untitled</a> by YanShanHong (<a href="https://codepen.io/shan473">@shan473</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe><h2 id="z-index-圖層"><a href="#z-index-圖層" class="headerlink" title="z-index 圖層"></a>z-index 圖層</h2><p>以往我們要用到 <code>z-index</code> 都會是在絕對定位的時候，在 grid 中是可以把項目堆疊的，透過 <code>z-index</code> 來前後順序。  </p><p>預設的圖層順序是 html 結構 <strong>後面的會覆蓋前面的</strong>，可以直接透過 <code>z-index</code> 改變順序。  </p><p>這個例子兩個有重疊的部分，item-5 寫上後蓋住了 item-1，為了讓 item-1 被看見，圖層寫得比 item-5 高就行了。  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-1</span><span class="token punctuation">&#123;</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> 1 / 2 / 1 / 2<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.item-5</span><span class="token punctuation">&#123;</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> 1 / 1 / 1 / 3<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>本篇還有很多 grid 的應用還沒研究到，未來再專研 !<br>很推 <strong>CSS-tricks</strong> 上的文章，很多寫法都很實用</p><h2 id="練習"><a href="#練習" class="headerlink" title="練習"></a>練習</h2><ul><li>以 <strong><a href="https://zh.wikipedia.org/wiki/%E7%9A%AE%E7%89%B9%C2%B7%E8%92%99%E5%BE%B7%E9%87%8C%E5%AE%89">皮特·蒙德里安</a></strong> 的《紅、藍、黃的構成》做為練習，說到網格自然就想到這幅畫  XD。<br>   <a href="https://codepen.io/shan473/pen/KKZRmRm">Codepen</a><br>   <img data-src="https://dsm01pap006files.storage.live.com/y4meQohOpsPirn8FgIW6-32dz_PV_9ldr3h7XdfuoLRBgBMVuweq_tSNsV7Osnk8yDBjyZhV4cVT0RuzJnF4Mf5bLcYc5KKVnVXBuu0bOvra6l8WSV33Yu6krcT-r8yl7TlqLB1ir3IPN2crKR6HWWWwN7avpOZB6UabLXjVNMBVnGxMiRl_8PrB3Gs8xKtehAv?width=1022&height=1024&cropmode=none" alt="CSS 版-紅、藍、黃的構成"></li><li>額外來自 Frontend Mentor 的練習題，利用 grid 進行排版<br><a href="https://meitung473.github.io/testimonials-grid-section-main/">Frontend Mentor | Rosa Hong</a></li><li>grid-graden (已破關) : <a href="https://cssgridgarden.com/">Grid Garden - A game for learning CSS grid </a>  <blockquote><p>心得 :<br>遊戲式的 grid 很容易理解，<br>template 除了正數以外，也可以使用 <strong>負數</strong>。<br>個人遇到 26 關卡了一下，其他掌握住如何算軌道跟知道格數怎麼應用就沒什麼障礙。對齊的部份，都在另一個 flexbox frog。</p></blockquote></li></ul><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li>快速查表 :  <a href="https://grid.malven.co/">GRID: A simple visual cheatsheet for CSS Grid Layout (malven.co)</a></li><li>好筆記 : <a href="https://pjchender.dev/css/css-grid-layout/">[CSS] Grid Layout | PJCHENder 未整理筆記</a></li><li>非常詳盡的圖文並茂解說 : <a href="https://css-tricks.com/snippets/css/complete-guide-grid/">A Complete Guide to Grid | CSS-Tricks - CSS-Tricks</a> 。我也很推 flexbox 的教學  </li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;眾所皆知 flex 是排版神器，尤其在一維的排版非常好用&lt;br&gt;那在二維的排版呢 ?&lt;br&gt;就不得提到 grid，雖然 grid 在舊的瀏覽器支援性沒到很高，現代瀏覽器是幾乎都有支援。(&lt;a href=&quot;https://caniuse.com/css-grid&quot;&gt;caniuse&lt;/a&gt;)   &lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="CSS" scheme="https://blog.rosa.tw/categories/Frontend/CSS/"/>
    
    
    <category term="CSS" scheme="https://blog.rosa.tw/tags/CSS/"/>
    
    <category term="Grid" scheme="https://blog.rosa.tw/tags/Grid/"/>
    
  </entry>
  
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - 參數傳遞 call by value or call by reference &amp; call by sharing</title>
    <link href="https://blog.rosa.tw/Frontend/JavaScript/JavaScript-call-by-what/"/>
    <id>https://blog.rosa.tw/Frontend/JavaScript/JavaScript-call-by-what/</id>
    <published>2022-03-26T15:12:05.000Z</published>
    <updated>2022-03-26T15:12:05.560Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直以來 JavaScript 的參數傳遞都蠻有爭議性的<br>可能聽過</p><blockquote><p>原始型態是 call by value；物件型態是 call by reference </p></blockquote><p>甚至有人說 JavaScript 只有 <code>call by sharing</code> 或是根本只有 <code>call by value</code><br>到底是哪種 ? 眾說紛紜，本篇針對這三種名詞進行解釋幫助自己去來理解   </p><p>如果有誤再麻煩各路大大指點    </p><span id="more"></span>   <h2 id="call-by-value-傳值"><a href="#call-by-value-傳值" class="headerlink" title="call by value : 傳值"></a>call by value : 傳值</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">let</span> b <span class="token operator">=</span> aa<span class="token operator">=</span><span class="token number">10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>定義變數 a 並且賦予 5 這個值，假設會被存在記憶體 <code>00x1</code> 這個位址</p><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td>a</td><td>00x1</td><td>5</td></tr></tbody></table></li><li><p>定義變數 b 等於 a ，b 拷貝 a 的值，另外存在新的記憶體位址  <code>00x3</code></p><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td>a</td><td>00x1</td><td>5</td></tr><tr><td>b</td><td>00x3</td><td>5 (copy from a)</td></tr></tbody></table></li><li><p>當你改變 a 的值，因為 b 指向不同記憶體位置，所以跟 b 沒有關係</p><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td>a</td><td>00x1</td><td>10</td></tr><tr><td>b</td><td>00x3</td><td>5</td></tr></tbody></table></li></ul><p>即使修改 a 或 b 其中一項，a 、 b 值互不相干擾，稱作 <code>call by value</code><br>而且 JavaScript 對於 Primitive type 的操作都是 <code>call by value</code><br>拷貝 「<strong>值</strong>」 但不拷貝 「<strong>址</strong>」</p><p>這也為什麼說 Primitive type 是 <strong>immutable</strong> (不可變)<br>這邊指的不可變 b 雖然等於 a，但你修改 a 並不會去變動到其他的值   </p><h3 id="Function-中參數的傳遞-by-value"><a href="#Function-中參數的傳遞-by-value" class="headerlink" title="Function 中參數的傳遞 : by value"></a>Function 中參數的傳遞 : by value</h3><p><a href="https://blog.techbridge.cc/2018/06/23/javascript-call-by-value-or-reference/">Huli 大的文章</a> 中也舉例變數 function 做為參數，並在 funciton 中進行新賦值的問題   </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">revalue</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">revalue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把變數 a 跟變數 b 都當作參數傳進 <code>revalue</code> 這個 function，而參數只是複製傳進來的值，並不會影響到在外面的 a 跟 b。  </p><blockquote><p>這邊的參數 a、b 作為傳進來的值的別名 (alias)而已，跟外部定義的 a、b 是無關的  </p></blockquote><h2 id="call-by-reference-傳址"><a href="#call-by-reference-傳址" class="headerlink" title="call by reference : 傳址"></a>call by reference : 傳址</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> obj1obj1<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">===</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1 <span class="token operator">===</span> obj2<span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 object 型態的判斷來看，空物件不會等於空物件，因為記憶體儲存的位址不同<br>但這裡 <code>obj1 === obj2</code> 是 true 的時候，代表兩個變數是指向同一個地方 ，是一樣的。  </p><p>接著看怎麼運作的  </p><ul><li><p>定義變數 obj1 並且賦予 <code>&#123;a : 1&#125;</code> 這個值，記憶體 <code>00x1</code> 這個位址 ，會存有 <code>&#123;a: 1&#125;</code> 這個值。而 obj1 的值則引用 (reference) <code>00x1</code> 位子的值</p><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td></td><td>00x1</td><td>{a: 1}</td></tr><tr><td>obj1</td><td>00x2</td><td>00x1</td></tr></tbody></table></li><li><p>定義變數 obj2 等於 obj1，也就是參照同一個 <strong>位址</strong> 的值</p><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td></td><td>00x1</td><td>{a: 1}</td></tr><tr><td>obj1</td><td>00x2</td><td>00x1</td></tr><tr><td>obj2</td><td>00x2</td><td>00x1</td></tr></tbody></table></li><li><p>當 <code>obj1.a</code> 改變時，是改動到位在 <code>00x1</code> 記憶體的值 <code>&#123;a : 5&#125;</code>，因為 obj2 也參照這裡的位址的值，在運作上連同 obj2 也被改動到</p><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td></td><td>00x1</td><td><code>&#123;a: 5&#125;</code></td></tr><tr><td>obj1</td><td>00x2</td><td>00x1</td></tr><tr><td>obj2</td><td>00x2</td><td>00x1</td></tr></tbody></table></li></ul><p>由此可知當改動到 obj1.a 的值 obj2.a 也會改變稱作 call by reference<br>Object type 通常是 call by reference<br>拷貝 「<strong>值</strong>」 <strong>也拷貝址</strong></p><p>跟 Primitive type 相反的是 Object type 是 <strong>mutable</strong> (可變)<br>改動 a 的值卻也會變動到 b<br>在 <a href="https://www.slideshare.net/YiTaiLin/java-script-63031051">Tommy 大簡報第 12 頁有清楚的流程</a> 可以參考  </p><h3 id="Function-中參數的傳遞-by-reference"><a href="#Function-中參數的傳遞-by-reference" class="headerlink" title="Function 中參數的傳遞 : by reference"></a>Function 中參數的傳遞 : by reference</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">revalue</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>obj<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token function">revalue</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span> <span class="token comment">// &#123;a: 1,b :5 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 revalue 函式中我們對參數 obj 進行更新<br>而外部的 obj1 也會變動到，因為指向的記憶體位址是同一處。  </p><ul><li><p>obj1 作為引數，帶入 obj 參數時，複製一份 obj1 進去  </p><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td></td><td>00x1</td><td>{a : 1}</td></tr><tr><td>obj1</td><td>00x2</td><td>00x1</td></tr><tr><td></td><td>00x4</td><td>funtion revalue()…</td></tr><tr><td>revalue</td><td>00x5</td><td>00x4</td></tr><tr><td>參數 <strong>obj</strong></td><td>00x2</td><td>00x1</td></tr></tbody></table></li><li><p>obj.b = 5 (不是變數重新賦值 !)</p><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td></td><td>00x1</td><td><code>&#123;a:1,b:5&#125;</code></td></tr><tr><td>obj1</td><td>00x2</td><td>00x1</td></tr><tr><td></td><td>00x4</td><td>funtion revalue()…</td></tr><tr><td>revalue</td><td>00x5</td><td>00x4</td></tr><tr><td>參數 <strong>obj</strong></td><td>00x2</td><td>00x1</td></tr></tbody></table></li></ul><h3 id="例外狀況-重新賦值"><a href="#例外狀況-重新賦值" class="headerlink" title="例外狀況 : 重新賦值"></a>例外狀況 : 重新賦值</h3><p>凡事總有個例外… </p><ol><li><p>Object Literals 重新賦值</p> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> obj1obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1 <span class="token operator">===</span> obj2<span class="token punctuation">)</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 按照上面來說，參照同一記憶體位址， obj2 變動應該會連同 obj1 也改變，結果沒有。  </p><ul><li>obj2 = obj1，obj2 複製 obj1</li></ul><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td></td><td>00x1</td><td><code>&#123;a:1,b:5&#125;</code></td></tr><tr><td>obj1</td><td>00x2</td><td>00x1</td></tr><tr><td>obj2</td><td>00x2</td><td>00x1</td></tr></tbody></table><ul><li>obj2 新賦值</li></ul><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td></td><td>00x1</td><td>{a:1}</td></tr><tr><td></td><td>00x5</td><td><code>&#123;a: 3&#125;</code></td></tr><tr><td>obj1</td><td>00x2</td><td>00x1</td></tr><tr><td>obj2</td><td>00x6</td><td>00x5</td></tr></tbody></table><p> obj2 在新賦值時，物件創造新的記憶體位址賦予值，obj2 也創造一個新的記憶體位址並且複製物件位址到自己的值<br> obj1 跟 obj2 正式分道揚鑣 ~ 成為陌生人  </p></li><li><p> Function 中參數的傳遞 : Object 重新賦值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">revalue</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>obj<span class="token operator">=</span><span class="token punctuation">&#123;</span> a <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">revalue</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span> <span class="token comment">// &#123;a: 1&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在裡面重新賦值，外部的引數並不會改動到原本的值<br>跟著跑一遍  </p></li></ol><ul><li><p>obj1 作為引數，帶入 obj 參數時，複製一份 obj1 進去  </p><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td></td><td>00x1</td><td>{a : 1}</td></tr><tr><td>obj1</td><td>00x2</td><td>00x1</td></tr><tr><td></td><td>00x4</td><td>funtion revalue()…</td></tr><tr><td>revalue</td><td>00x5</td><td>00x4</td></tr><tr><td>參數 <strong>obj</strong></td><td>00x2</td><td><code>00x1</code></td></tr></tbody></table></li><li><p>obj={ a : 3}  重新賦值</p><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td></td><td>00x1</td><td>{ a : 1 }</td></tr><tr><td>obj1</td><td>00x2</td><td>00x1</td></tr><tr><td></td><td>00x4</td><td>funtion revalue()…</td></tr><tr><td>revalue</td><td>00x5</td><td>00x4</td></tr><tr><td>參數 <strong>obj</strong></td><td><code>00x8</code></td><td><code>00x6</code></td></tr><tr><td></td><td>00x6</td><td>{a : 3}</td></tr></tbody></table></li><li><p>根據 Scope 作用域，函式的變數作用範圍等函式結束後就會釋放記憶體。</p><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td></td><td>00x1</td><td>{ a : 1 }</td></tr><tr><td>obj1</td><td>00x2</td><td>00x1</td></tr><tr><td></td><td>00x4</td><td>funtion revalue()…</td></tr></tbody></table></li></ul><p>obj1 依然不會變動到。  </p><p>不過你發現了嗎 ?<br>Object Type 新賦值的行為是複製值而已，很像 call by value  </p><h2 id="不是-by-value-也不是-by-renference-而是-by-sharing"><a href="#不是-by-value-也不是-by-renference-而是-by-sharing" class="headerlink" title="不是 by value 也不是 by renference 而是 by sharing"></a>不是 by value 也不是 by renference 而是 by sharing</h2><p>哦不，我的頭開始痛了<br>那我前面認識的難道是假的嗎 ?  </p><p>不，sharing 就像綜合體一樣<br>按上面所述，我們可以把情況分成三種  </p><ol><li>Primitive type 表現行為是 call by value</li><li>Object type 沒有新賦值的情況，而是對內容操作，表現行為像是 call by reference</li><li>Object type 重新賦值，表現則是 call by value，會建立一個新的記憶體位置，並且複製其(記憶體位址的)值  </li></ol><p>可知 call by sharing 在不同情況下會就會有不同的表現行為</p><p>借一下 Huli 大的圖…<br><img data-src="https://dsm01pap006files.storage.live.com/y4mnEy3INPdoo5FZIkuPSKskoOVfwI9iapT5pvdWu6c0BSovTa8z0rEaeST_jxZaxA8prHXyxrT_9IWaaoniKLBb6GJz6tdT60tRupMq7E0LMnDVcO97Oc8H1Rk2WzVxmlnTRFYoLOjzbHqdeFe5cLtaWuG_x4SY9Mt6GLI8HYXkVicjUFYT5QsvmVzYogaIAxS?width=949&height=702&cropmode=none" alt="call by sharing"></p><p>文章中有提及其實 JavaScript 嚴格意義上是沒有 call by reference 的，因為函式的引數重新賦值並不會修改到外部變數的值。<br>(C++ 能修改到是跟指標有關)<br>由於我不是很熟 C 跟 C++… 先不做討論     </p><p>由上圖可知，JavaScript 可以說    </p><blockquote><p>Primitive 是 Pass by Value，Object 是 Pass by sharing。</p></blockquote><h2 id="全都是-call-by-value-的觀點"><a href="#全都是-call-by-value-的觀點" class="headerlink" title="全都是 call by value 的觀點"></a>全都是 call by value 的觀點</h2><p>那全是 call by value 是怎麼回事 ?<br>造成爭論的點在於這邊的 value 並未定義說是 <strong>內容的值</strong> 還是 <strong>存放在變數記憶體位址裡的值</strong>  </p><ul><li><p>以 <strong>內容的值</strong> 觀點來看        </p><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td>a</td><td>00x1</td><td><strong>5(被複製到 b)</strong></td></tr><tr><td>b</td><td>00x3</td><td>5</td></tr></tbody></table></li><li><p>以 <strong>記憶體位址裡的值</strong> 觀點來看  </p><table><thead><tr><th>變數</th><th>記憶體位址</th><th>值</th></tr></thead><tbody><tr><td></td><td><strong>00x1 (被複製)</strong></td><td>{a: 1}</td></tr><tr><td>obj1</td><td>00x5</td><td>00x1</td></tr><tr><td>obj2</td><td>00x5</td><td>00x1</td></tr><tr><td></td><td></td><td></td></tr></tbody></table></li></ul><p>b 複製 a ， a 也是複製記憶體 <code>(00x1)</code> 位址這個值，所以也可以說是 <strong>call by value</strong><br>在定義上的不同，導致不同的觀點與結論   </p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li>帶你跑一次 : <a href="https://www.slideshare.net/YiTaiLin/java-script-63031051">簡單介紹JavaScript參數傳遞 (slideshare.net)</a></li><li>簡單論述 : <a href="https://ithelp.ithome.com.tw/articles/10191057">重新認識 JavaScript: Day 05 JavaScript 是「傳值」或「傳址」？</a></li><li>從各方面來看 : <a href="https://blog.techbridge.cc/2018/06/23/javascript-call-by-value-or-reference/">深入探討 JavaScript 中的參數傳遞：call by value 還是 reference？</a></li><li>好懂得位址概念 : <a href="https://ithelp.ithome.com.tw/articles/10209104">你不可不知的 JavaScript 二三事#Day26：程式界的哈姆雷特 —— Pass by value, or Pass by reference？</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一直以來 JavaScript 的參數傳遞都蠻有爭議性的&lt;br&gt;可能聽過&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原始型態是 call by value；物件型態是 call by reference &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;甚至有人說 JavaScript 只有 &lt;code&gt;call by sharing&lt;/code&gt; 或是根本只有 &lt;code&gt;call by value&lt;/code&gt;&lt;br&gt;到底是哪種 ? 眾說紛紜，本篇針對這三種名詞進行解釋幫助自己去來理解   &lt;/p&gt;
&lt;p&gt;如果有誤再麻煩各路大大指點    &lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/Frontend/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - first class function (一級函式)</title>
    <link href="https://blog.rosa.tw/Frontend/JavaScript/JavaScript-First-Class-Function/"/>
    <id>https://blog.rosa.tw/Frontend/JavaScript/JavaScript-First-Class-Function/</id>
    <published>2022-03-26T05:34:14.000Z</published>
    <updated>2022-03-26T05:34:14.317Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JavaScript 中的 function 是很神奇的東西<br>在初學時看到很多名詞<br>像 callback function(回呼函式)、First-Class Function(一級函式)、High-Order Function(高階函式)<br>還有 Closure(閉包) 等等的，總是會霧撒撒…<br>本篇來初步認識 function 中的 First-Class Function 概念   </p><span id="more"></span><h2 id="一級函式"><a href="#一級函式" class="headerlink" title="一級函式"></a>一級函式</h2><blockquote><p>函式可以被視為其他變數一樣，像是 function 可以指定成變數，也可以做為參數傳入別的 funciton。  </p></blockquote><p>JavaScript 的 function 符合 first class function    </p><ul><li>函式只是物件的一種  </li><li>function 可以儲存成變數 (function expression)    <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">greet</span> <span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>function 可以當作參數傳入別的 function 中，這邊把 function 當作 <strong>值</strong> 來使用。<br>  (這樣的方式會稱這個 function 是 callback function)    <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">'hello,'</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span>name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">greet</span><span class="token punctuation">(</span>hello<span class="token punctuation">,</span><span class="token string">'rosa!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>function 裡面又回傳另一個 function。<br>  這樣的函式也稱作高階函式 ( <strong>Higher-Order Function</strong> )，最常看到的例子是閉包 (Closure)  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> mymoney <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">const</span> <span class="token function-variable function">addmoney</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'add money!'</span><span class="token punctuation">)</span>      mymoney <span class="token operator">+=</span>num      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'current'</span><span class="token punctuation">,</span>mymoney<span class="token punctuation">)</span><span class="token keyword">return</span> mymoney<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 新增一個加 10 塊錢的方法</span><span class="token keyword">const</span> add10 <span class="token operator">=</span> <span class="token function">addmoney</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">//呼叫加錢</span><span class="token function">add10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">add10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">add10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">-</span>current money <span class="token operator">:</span> <span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>function 跟物件一樣有屬性 (property)<br>下面進行說明</li></ul><h2 id="函式也是物件的一種"><a href="#函式也是物件的一種" class="headerlink" title="函式也是物件的一種 ?"></a>函式也是物件的一種 ?</h2><p>範例 : </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'invoke this'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 直接執行</span>hello<span class="token punctuation">.</span>people<span class="token operator">=</span><span class="token string">'rosa'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span>people<span class="token punctuation">)</span> <span class="token comment">// output : rosa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>執行 (invoke) 函式，是透過 <code>()</code></li><li>可以直接用 <code>.</code> 建立物件中的 key-value  </li></ol><p>證明 function 是一種特殊的物件，也可以當作物件來使用。 </p><h2 id="補充-函式回傳一個另一個函式"><a href="#補充-函式回傳一個另一個函式" class="headerlink" title="補充 : 函式回傳一個另一個函式"></a>補充 : 函式回傳一個另一個函式</h2><p>調用函式與回傳的函式有幾種做法  </p><ol><li>存成變數<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sayhi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello, Rosa!'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">const</span> myFunc <span class="token operator">=</span> <span class="token function">sayhi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// myFunc 接收的是一個 function</span><span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 呼叫</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>雙括號直接呼叫<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sayhi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello, Rosa!'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token function">sayhi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>IIFE (Immediately Invoked Function Expression): 定義完就回傳的 function<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sayhi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello, Rosa!'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token function">sayhi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>IIFE 的例子很常在 JQuery 看見  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//$ = jQuery</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="https://pjchender.blogspot.com/2016/03/javascriptfunctionobjects.html">[筆記] JavaScript 中函式就是一種物件 ─ 談談 first class function（一等公民函式） ~ PJCHENder 那些沒告訴你的小細節</a></li><li><a href="https://developer.mozilla.org/zh-TW/docs/Glossary/First-class_Function">一級函式（First-class Function） - 術語表 | MDN (mozilla.org)</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;JavaScript 中的 function 是很神奇的東西&lt;br&gt;在初學時看到很多名詞&lt;br&gt;像 callback function(回呼函式)、First-Class Function(一級函式)、High-Order Function(高階函式)&lt;br&gt;還有 Closure(閉包) 等等的，總是會霧撒撒…&lt;br&gt;本篇來初步認識 function 中的 First-Class Function 概念   &lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/Frontend/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSSZeroToOneSeries | 06 | 網頁頁尾版塊</title>
    <link href="https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-06/"/>
    <id>https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-06/</id>
    <published>2022-03-25T06:05:44.000Z</published>
    <updated>2022-04-12T02:29:28.177Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/oNoMJBQ">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4mtphMUUk0c1yY9dUb53RF0jkrLI5tF-TSjeeSIBE583SwUq1Uk8UZUm-Z011ZK-Or0KbhFHvVqODwJObSn3ACJf7CuFIuu18jaIEzdPeLEqvFFMAesLSLoetnq0FPAtwi7kCTP7ZscwXBBtdaDMV7GQKnv5kTH_3vY6LSOcOkcg1zvlpCEsth5zYrQJ54RM7r?width=660&height=377&cropmode=none" alt="網頁頁尾版塊"></p><span id="more"></span><h2 id="flex-grow-子元素的空間分配"><a href="#flex-grow-子元素的空間分配" class="headerlink" title="flex-grow : 子元素的空間分配"></a>flex-grow : 子元素的空間分配</h2><p><code>flex-grow</code> : 剩餘容器空間分配，運用到 flex-grow : 1，個別分配一樣的，以免內容大小不一導致 container 有大有小。  </p><blockquote><p><code>width : 0</code> 可以把 width 先設定為 0 ，讓 <strong>主軸</strong> 的 width 都交給 grow 分配。</p></blockquote><h3 id="flex-裡面的-width-100-到底沒有作用"><a href="#flex-裡面的-width-100-到底沒有作用" class="headerlink" title="flex 裡面的 width : 100% 到底沒有作用 ?"></a>flex 裡面的 width : 100% 到底沒有作用 ?</h3><p>有，在還沒設定 flex-grow 之前<br>子元素的空間是由內容去撐開的<br>拔掉本篇的 footer-item 中的 flex-grow 並將 width 設為 100%<br>依然會跟 flex-grow 一樣  </p><p>在之前的篇章有介紹過 flex-shrink 壓縮值<br>原因在於 flex-shrink 預設把空間平均壓縮了<br>這也是為什麼撐開到 100% 也單一個子元素占不滿 container<br>所以設定 25% (item 總數是 4) 或 100% 也沒差  </p><p>個人不太建議這樣寫，因為 width 感覺失去意義了    </p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;本篇成果&quot;&gt;&lt;a href=&quot;#本篇成果&quot; class=&quot;headerlink&quot; title=&quot;本篇成果&quot;&gt;&lt;/a&gt;本篇成果&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codepen.io/shan473/pen/oNoMJBQ&quot;&gt;Codepen&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://dsm01pap006files.storage.live.com/y4mtphMUUk0c1yY9dUb53RF0jkrLI5tF-TSjeeSIBE583SwUq1Uk8UZUm-Z011ZK-Or0KbhFHvVqODwJObSn3ACJf7CuFIuu18jaIEzdPeLEqvFFMAesLSLoetnq0FPAtwi7kCTP7ZscwXBBtdaDMV7GQKnv5kTH_3vY6LSOcOkcg1zvlpCEsth5zYrQJ54RM7r?width=660&amp;height=377&amp;cropmode=none&quot; alt=&quot;網頁頁尾版塊&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="CSS" scheme="https://blog.rosa.tw/categories/Frontend/CSS/"/>
    
    
    <category term="CSS" scheme="https://blog.rosa.tw/tags/CSS/"/>
    
    <category term="CSSZeroToOneSeries" scheme="https://blog.rosa.tw/tags/CSSZeroToOneSeries/"/>
    
  </entry>
  
  <entry>
    <title>CSSZeroToOneSeries | 05 | 超通用版面</title>
    <link href="https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-05/"/>
    <id>https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-05/</id>
    <published>2022-03-25T04:31:10.000Z</published>
    <updated>2022-04-12T02:29:22.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/yLPqLWg">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4mHj3lx_2ZCP6jUJJdmg3J0yQ1okzs2onLtZoKl8Xl9-SHWo5R76rhJJOxB0CCcCpsr4mjLPVhk5vDB68y-tAOu5tf-ZNbKOE3h4Sre1TfJSvHP0v2J8P8TvUahMIXlTHuDmVXPLF8B_iY-H2YRC15q7MtFqTN40Pi1Q79x-NpaPicKK8MhjlUTMAusYM6_kFp?width=660&height=377&cropmode=none" alt="超通用版面"></p><span id="more"></span><h2 id="object-fit"><a href="#object-fit" class="headerlink" title="object-fit"></a>object-fit</h2><p>讓置換元素 (Replaced element) 的內容如何塞到已知的父層寬度與高度的框  </p><p>Replaced element 指的是內容呈現不在 CSS 的控制範圍<br>像以下這些元素  </p><ol><li><code>&lt;img&gt;</code></li><li><code>&lt;object&gt;</code> </li><li><code>&lt;video&gt;</code> </li><li><code>&lt;textarea&gt;</code> 和 <code>&lt;input&gt;</code> 表單元素。</li></ol><p>簡單來說還未設定 CSS 寬高之前，是由內容去撐開的  </p><p>object-fit 有 5 個屬性   </p><ul><li>fill : 填滿，超出會進行拉伸</li><li>cover : 照片超出版面，可以讓圖片等比例縮到塞滿框，多餘的裁切。或是照原圖片裁掉不符合框的範圍</li><li>contain : 等比例縮放，直到看見整張完整的圖。可能會距離框有距離  </li><li>none : 不做縮放，直接塞滿框</li><li>scale-down : 會是 none 跟 contain 其中一個值，看誰會拿到最小值</li></ul><p>參考 : <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/object-fit">object-fit</a>  </p><h2 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h2><p>當父容器為 flex<br>單一個子元素可以擺脫整體的 align-items 約束<br>自己排在想要的次軸位置  </p><p>* align-items 是在父層控制所有子元素的次軸位置，預設是 flex-start       </p><p>以本篇為例，<code>flex-direction : column</code> 來說次軸是 X 軸<br>align-self 會控制子元素在 X 軸的排列<br>我想只讓 more button 往最右邊靠攏只要設定  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.more</span><span class="token punctuation">&#123;</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="margin-top-auto"><a href="#margin-top-auto" class="headerlink" title="margin-top : auto"></a>margin-top : auto</h2><p>子元素會在父層剩餘的 margin 被分配掉  </p><p>那 <strong>auto</strong> 的值何來 ?<br>我們必須要告訴瀏覽器有參考值邊界才能算出剩餘的空間  </p><p>以本篇的按鈕想要往下面對齊<br>父層使用 <code>display: flex</code> 跟 <code>flex-direction : column</code><br>子層會被撐開，佔滿空間<br>這時候子層就可以算出距離邊界的剩餘的空間(也就是子元素內容本身跟父層的邊界)<br>要全部往下推就要把 top 所有空間都分配掉 </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item .txt .btn</span><span class="token punctuation">&#123;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所以如果想往哪邊推，就是把反向的空間給分掉   </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">margin-top</span> <span class="token punctuation">:</span> auto <span class="token punctuation">;</span> // 擠到下方<span class="token property">margin-bottom</span> <span class="token punctuation">:</span> auto <span class="token punctuation">;</span> // 擠到上方<span class="token property">margin-left</span> <span class="token punctuation">:</span> auto <span class="token punctuation">;</span> // 擠到右方<span class="token property">margin-right</span> <span class="token punctuation">:</span> auto <span class="token punctuation">;</span> // 擠到左方<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常見的-margin-0-auto-置中技巧也是"><a href="#常見的-margin-0-auto-置中技巧也是" class="headerlink" title="常見的 margin : 0 auto 置中技巧也是"></a>常見的 margin : 0 auto 置中技巧也是</h3><p>把 box 置中</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>margin 針對左右邊都分配掉，也就是平均，所以元素才會置中  </p><ul><li>此時的邊界剩餘空間 ?<br>預設 box 的 display 是 block 占據整行<br>由於內容只有 100px，剩餘的空間就會是 viewport - box 內容再去分配    </li></ul><h2 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h2><p>有兩個值</p><ul><li>wrap  : 總體寬度超出螢幕寬，會換行</li><li>nowrap : flex 預設，打死不換行</li></ul><p>當複數個元素擠在同一個容器<br>會發現他們會平均壓縮(預設 flex-shrink : 1)<br>而且打死不換行<br>即使你縮到最小，也不會有內容超出容器導致 X 向的捲軸出現<br>因為 flex 都幫你壓好好的  </p><p>當然這樣的視覺是 NG 的，內容都擠一塊了<br>這時候 <code>wrap</code> 就很好用了<br>當這一行的寬度容不下多的子容器寬度就會往下排   </p><p>flex 可以說是能屈能伸，你說是不是很棒呢 QQ  </p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;本篇成果&quot;&gt;&lt;a href=&quot;#本篇成果&quot; class=&quot;headerlink&quot; title=&quot;本篇成果&quot;&gt;&lt;/a&gt;本篇成果&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codepen.io/shan473/pen/yLPqLWg&quot;&gt;Codepen&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://dsm01pap006files.storage.live.com/y4mHj3lx_2ZCP6jUJJdmg3J0yQ1okzs2onLtZoKl8Xl9-SHWo5R76rhJJOxB0CCcCpsr4mjLPVhk5vDB68y-tAOu5tf-ZNbKOE3h4Sre1TfJSvHP0v2J8P8TvUahMIXlTHuDmVXPLF8B_iY-H2YRC15q7MtFqTN40Pi1Q79x-NpaPicKK8MhjlUTMAusYM6_kFp?width=660&amp;height=377&amp;cropmode=none&quot; alt=&quot;超通用版面&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="CSS" scheme="https://blog.rosa.tw/categories/Frontend/CSS/"/>
    
    
    <category term="CSS" scheme="https://blog.rosa.tw/tags/CSS/"/>
    
    <category term="CSSZeroToOneSeries" scheme="https://blog.rosa.tw/tags/CSSZeroToOneSeries/"/>
    
  </entry>
  
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - 表達式 &amp; 陳述式</title>
    <link href="https://blog.rosa.tw/Frontend/JavaScript/JavaScript-Expression-Statement/"/>
    <id>https://blog.rosa.tw/Frontend/JavaScript/JavaScript-Expression-Statement/</id>
    <published>2022-03-25T03:24:20.000Z</published>
    <updated>2022-03-25T03:24:20.387Z</updated>
    
    <content type="html"><![CDATA[<h2 id="表達式-Expressions"><a href="#表達式-Expressions" class="headerlink" title="表達式 (Expressions)"></a>表達式 (Expressions)</h2><p>執行完程式能直接 <strong>有回傳值</strong>，通常會存成變數，但不一定要存成變數  </p><ul><li>這都是表達式<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span>a <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">const</span> c <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"hi"</span> <span class="token operator">:</span> <span class="token string">'hello'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="陳述式-Statements-Declaration"><a href="#陳述式-Statements-Declaration" class="headerlink" title="陳述式 (Statements | Declaration)"></a>陳述式 (Statements | Declaration)</h2><p>沒有回傳值，也不能當作變數的值  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">===</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//... dosomething</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>a===3</code> : 是表達式</li><li><code>if(...)</code> : 陳述式，並沒有回傳值</li></ul><p>所以不會寫成這樣</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">===</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//... dosomething</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Function-Expressions-amp-Function-Statements"><a href="#Function-Expressions-amp-Function-Statements" class="headerlink" title="Function Expressions &amp; Function Statements"></a>Function Expressions &amp; Function Statements</h2><p>JavaScript 中 Function 是物件的一種<br>由這個例子可知，Function 在 Object 的原型鍊上</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// a 是不是 Object 的實作</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不過如果去查型態 (typeof) function 會是 function </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span> <span class="token comment">// 'function'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Function-Statements-declaration"><a href="#Function-Statements-declaration" class="headerlink" title="Function Statements (declaration)"></a>Function Statements (declaration)</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">mutiply</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">mutiply</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token operator">*</span>b<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>不會直接回傳任何的值。<br>該函式就會透過 hoisting 先被儲存在記憶體中，在程式碼出現之前去呼叫，就不會發出錯誤。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 執行函式</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 印出函式的內容</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Function-Expressions"><a href="#Function-Expressions" class="headerlink" title="Function Expressions"></a>Function Expressions</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">cross</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token function-variable function">cross</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token operator">*</span>b<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>提前呼叫的話會報錯</p><blockquote><p>Uncaught ReferenceError: Cannot access ‘cross’ before initialization</p></blockquote><p>在 let、const 定義了但沒賦值之前是不能叫它的。<br>如果是 var 宣告則會是 <code>Uncaught TypeError: cross is not a function</code></p><p>以 cross 來說，我們先建立了函式，但是沒有命名，這樣的函式叫 <strong>匿名函式（anonymous function 或 function literal）</strong>。  </p><ol><li>為什麼可以不命名 ?<br> 在 function expression 之前已經指定給 cross，這個變數名就用來指稱函式</li><li>可以命名嗎 ?   <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">greet</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// hello</span><span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// hi is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre> 可以，而且依然可以運行。<br> 在 Huli 大<a href="https://blog.huli.tw/2020/04/18/javascript-function-is-awesome/">這篇文章</a>有提到，在 function expression 中函式給予名稱有些有趣的問題<ul><li>所以叫 greet 還是叫 hi ?<br>  是 hi，在外部呼叫必須用變數名，使用 function 名稱是 <code>is not defined</code></li><li>匿名的部份命名有什麼用處 ?<ol><li> 想呼叫自己的時候可以使用</li><li>stacktrace 會出現這個名字</li></ol></li></ul></li></ol><ul><li>stacktrace 匿名函式的名稱會出現<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="https://dsm01pap006files.storage.live.com/y4mBgzq2siu2WVu3eDN1OJz6Q8rPxMAKMf84yK2Z4Nw0PN6M8qYYBgOftVQ6BlFQwNEshSk-LjimjWZhNGvTzxLNNibhzJd03yNiG0zmDOJxVi2jjpGG1lqkTvEbr3v8a9GwI0IfOmnF3CwKa__lZB8T2uoXbF8PEQDU6-rLnuAFvLRk1ZIp8_QOjTJEX6AJ6AM?width=370&height=232&cropmode=none" alt="stacktrace"></li></ul><h2 id="函式中的函式"><a href="#函式中的函式" class="headerlink" title="函式中的函式"></a>函式中的函式</h2><p>在函式中放入 function expression 而且是 anonymous function</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//--- 等同</span><span class="token keyword">const</span> <span class="token function-variable function">anonymousfunction</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">log</span><span class="token punctuation">(</span>anonymousfunction<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>會印出 funtion 的結構</p><pre class="line-numbers language-none"><code class="language-none">function()&#123;console.log(&#39;hi&#39;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>要執行在 log 裡面的 fn 加入 <code>()</code> 就可以了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Callback-function"><a href="#Callback-function" class="headerlink" title="Callback function"></a>Callback function</h3><p>如果要確保程式執行的順序，會使用到 callback function，做法就是把函式傳入另一個函式裡面去呼叫   </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">hello</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">bye</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bye'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span><span class="token function">callback</span><span class="token punctuation">(</span>bye<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">hi</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>依序印出 <code>&#39;start&#39;、&#39;hello&#39;、&#39;bye&#39;</code></p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="https://pjchender.blogspot.com/2016/03/javascriptfunction-statements-and.html">[筆記] 進一步談JavaScript中函式的建立─function statements and function expressions</a></li><li><a href="https://blog.huli.tw/2020/04/18/javascript-function-is-awesome/">覺得 JavaScript function 很有趣的我是不是很奇怪 - Huli</a></li></ol>]]></content>
    
    
    <summary type="html">認識 JavaScript 中的表達式 &amp; 陳述式</summary>
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/Frontend/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSSZeroToOneSeries | 04 | 交錯漂浮版</title>
    <link href="https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-04/"/>
    <id>https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-04/</id>
    <published>2022-03-20T06:11:18.000Z</published>
    <updated>2022-04-12T02:29:17.192Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/JjOZEBv">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4myrS3n9KEVx68j_Eae0KRrAYX2x2pFSw4IpKeLRuSQUsYqqzoIbIJ_TZHOxs96dBkjq9Or4jrv4cbmLYZJHh8XJf5UwXUa8Fst54z9sV0FCDctxAGmKDM3WK1sB4h8QsOqArz8DIpcZX4fpHELmYZC4xd994q-I2LITANufFsVCXWAneTdCRxsl7eG7xqpK_I?width=1024&height=1016&cropmode=none" alt="交錯漂浮版"></p><span id="more"></span><h2 id="box-sizing-盒子計算方式"><a href="#box-sizing-盒子計算方式" class="headerlink" title="box-sizing 盒子計算方式"></a>box-sizing 盒子計算方式</h2><p>box sizing 有兩種屬性  </p><ul><li><code>content-box</code> : 只有內容 (width) 的大小，其他另外算 (padding、border)</li><li><code>border-box</code> : 到 border 之前的都計算在內   </li></ul><p>在早期瀏覽器支援度沒那麼高，都會加上前綴 (prefix)<br>如果擔心使用的瀏覽器是否有支援也可以到 <a href="https://caniuse.com/?search=box-sizing">caniuse</a> 查詢  </p><h2 id="flex-shirk-壓縮值"><a href="#flex-shirk-壓縮值" class="headerlink" title="flex-shirk : 壓縮值"></a>flex-shirk : 壓縮值</h2><p>父層設定 flex 後<br>預設內容會進行並排而且壓縮<br>壓縮值預設是 flex-shirk : 1<br>所有子項會照數目去壓縮寬度    </p><p>如果是 0 的話 flex 不會幫你壓內容<br>而是解開束縛~  </p><p>在這個排版中我們將兩個子元素 <code>.txt</code> 跟 <code>.pic</code>  width 設定 55%<br>整體容器的大小照理來說是 110%<br>但實際上預設最大值只有 100%<br>在還未設定 flex-shirk 之前，我們可以看到容器實際大小是 600 而不是 660<br>即使設定兩個子項都設 100% ，flex 還是只會將空間平均分配後縮壓   </p><p>這時候只要加上 flex-shirk : 0，把壓縮比取消<br>正確的寬度就會是 660 了    </p><p>這也是為什麼有人設定完 flex 後，想把剩餘空間平均撐開<br>填入 width 把原本內容還大的數值<br>因為 flex 自己就會幫你壓完算完    </p><h2 id="nth-child-選兒子"><a href="#nth-child-選兒子" class="headerlink" title="nth-child : 選兒子"></a>nth-child : 選兒子</h2><p>跟 nth-of-type 很像，但是 nth-child 只認位置      </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 翻譯 : 是第一個，而且 class 是 box 的 */</span><span class="token selector">.box:nth-child(1)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">/* 翻譯 : 是第一個，而且在 box 裡 */</span><span class="token selector">.box :nth-child(1)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但如果配上 <code>&gt;</code> ，如果有孫子，並不包含在內，因為 <code>&gt;</code> 是指下一層而已，只包到兒子。 </p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grand<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 被套入樣式的只有 grand 裡面第一個 fater，但是 child 不會有 */</span><span class="token selector">.grand:nth-child(1)</span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以奇數、偶數    </p><ul><li>奇數 : <code>nth-child(odd)</code>  </li><li>偶數 : <code>nth-child(even)</code>  </li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;本篇成果&quot;&gt;&lt;a href=&quot;#本篇成果&quot; class=&quot;headerlink&quot; title=&quot;本篇成果&quot;&gt;&lt;/a&gt;本篇成果&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codepen.io/shan473/pen/JjOZEBv&quot;&gt;Codepen&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://dsm01pap006files.storage.live.com/y4myrS3n9KEVx68j_Eae0KRrAYX2x2pFSw4IpKeLRuSQUsYqqzoIbIJ_TZHOxs96dBkjq9Or4jrv4cbmLYZJHh8XJf5UwXUa8Fst54z9sV0FCDctxAGmKDM3WK1sB4h8QsOqArz8DIpcZX4fpHELmYZC4xd994q-I2LITANufFsVCXWAneTdCRxsl7eG7xqpK_I?width=1024&amp;height=1016&amp;cropmode=none&quot; alt=&quot;交錯漂浮版&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="CSS" scheme="https://blog.rosa.tw/categories/Frontend/CSS/"/>
    
    
    <category term="CSS" scheme="https://blog.rosa.tw/tags/CSS/"/>
    
    <category term="CSSZeroToOneSeries" scheme="https://blog.rosa.tw/tags/CSSZeroToOneSeries/"/>
    
  </entry>
  
  <entry>
    <title>CSSZeroToOneSeries | 03 | 人員介紹卡片</title>
    <link href="https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-03/"/>
    <id>https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-03/</id>
    <published>2022-03-20T02:21:28.000Z</published>
    <updated>2022-04-12T02:29:11.556Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/qBVKqOO">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4mHzg-JW7SyoAHGTdGlUdj_5ZnwCD4xI67k_hSfC3GQoVpUstnuk7UTBR7UmUJpb13ZdYrbWwiYAHfilOlHT7mMJQ7HXqcji-jzR8muC__o_Dw1iYTtrnTdQi6XfOoLIEtZsrFHqsrZq3aNmq8disMaXDMzI_RxGM47SUv3SgTztsiBsVOTkzmRI7CYrfu6ytD?width=1024&height=585&cropmode=none" alt="人員介紹卡片"></p><span id="more"></span><h2 id="計算區塊尺寸"><a href="#計算區塊尺寸" class="headerlink" title="計算區塊尺寸"></a>計算區塊尺寸</h2><p>現代在撰寫 CSS 之前，在 reset 你可能會看到     </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*,*::after,*::before</span><span class="token punctuation">&#123;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>總是會加上一個 <code>box-sizing : border-box</code><br>讓設計師終於不用再算那些奇奇怪怪的數字<br>不過在沒有設定之前<br>到底怎麼算出內容寬度呢 ?  </p><p>以本篇為例<br>wrap 總寬度設為 1200px<br>共有 3 個 item 一個平均設 400px<br>加上 </p><ul><li>margin 上下左右各 15 px</li><li>border 上下左右各 1 px</li></ul><p>對吧 ! 那我 width 設 400px 準沒錯  </p><p>結果你打開 devtool 一看 !<br><img data-src="https://dsm01pap006files.storage.live.com/y4mzmrNWlb-z4xM6ccNPP18s_3klzarPfgQB5BTOPYpOpmJtGrioRBX7Qd5y8xMG1gcZrjoPOwMaXE7NIZSLZAbxRM2xNfah6MTMEOkY6KCfGDaV2WyMtTDMEEv4wHNfgF-9BfapXpyLFlhiC_hzthM7G2lJCfrPn4uKKTrR5z4SriKohs1faMgQ_ukHRedGqO_?width=404&height=660&cropmode=none" alt="368... 什麼鬼，那我還要設寬度嗎 ? "><br>不過 devtool 也告訴你答案了  </p><p>如果設超過平均寬度那還好，因為設定了 <code>display : flex</code><br>瀏覽器會幫你自動平均壓一壓併在同一排<br>但在 flex 出現之前呢 ?<br>大家會用 float 來排版，結果最後一個 item 被擠到第二行   </p><p>實際上在算寬度時 box-model (盒模型) 有兩種方式<br>預設是 content-box<br>意思是你的實際內容 (width) 是還要扣掉  </p><ul><li>padding</li><li>border </li></ul><p>但又因為 item 並排又有 margin 的存在<br>也要一併算在內<br>就能知道為什麼瀏覽器給我們的寬度是 368<br>你應該設定的 width    </p><blockquote><p>width  = 400 - (15 * 2)<code>&lt;margin 左右&gt;</code> - (1 * 2)<code>&lt;border 左右&gt;</code></p></blockquote><p>如果今天設定 box-sizing : border-box ，width 就會是 370<br>只要扣除 margin 就可以了   </p><h2 id="製作三角形"><a href="#製作三角形" class="headerlink" title="製作三角形"></a>製作三角形</h2><ul><li>有 width 跟 height 的情況下    </li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>  <span class="token property">border-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>  <span class="token property">border-width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img data-src="https://dsm01pap006files.storage.live.com/y4myQ83gcWFgUdpgYx28trLrkeTeEbnNNerUjEyJiejmEwdCXaGVE8Hec0xCD1_fwAq92se5upOAAzgxpNwDcbKERH78dbQM3p_NVWKRDIgdiSWZ0XekHD6cKfkgm1MVp8SW3uYRu6qLPctjarWRedUKtrIWTB8OHBkk1uVrWJZDPEoFB4W_NUjxJw_kfrCWh11?width=497&height=484&cropmode=none" alt="一般具有長寬的 border">  </p><p>你可能會想我為什麼不寫 <code>border: 50px solid black</code><br>我是覺得這樣個別設定可以更方便<br>當然也可以個別寫方位 <code>border-top</code> 等等的   </p><ul><li>width、height 都等於 0<br><img data-src="https://dsm01pap006files.storage.live.com/y4m433-jklFksPiycDy1fvGep6xnsZvv3ps2NNrt4dxZY2AhEySiD_gkuAowFAnbRYjg8UEfdfHvkqo4fe5dXdEx-NEmCFJ06RxrKSJKceEmgUQ1Zfdqxz0mVcswcOGDRFas_Bb-rinjNvhWlINqQ2-fTxO_Xbg8TJFQa8LNA72YsZ7rAbU7uz37y33GtCNM1S8?width=284&height=283&cropmode=none" alt="只有 border">  </li></ul><p>會發現 border 的組成是來自四個等腰三角<br>出現單個三角只要把其中三邊背景變成透明就可以了 </p><p>比如說我想要 <strong>向上</strong> 的三角<br>所以只有底部的 border 保留<br><code>border-color : &lt;上&gt; &lt;右&gt; &lt;下&gt; &lt;左&gt;</code>  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>  <span class="token property">border-color</span><span class="token punctuation">:</span> transparent transparent black transparent<span class="token punctuation">;</span>  <span class="token property">border-width</span><span class="token punctuation">:</span> 0 25px 50px 25px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img data-src="https://dsm01pap006files.storage.live.com/y4mhEdF0YF0fV9DU8nRo63Lueil9A23f78iKvteTNLhrdagTR-P-FEg9JABpPpBf-oJ7HyY8FkAjj2gXaVE1cbl1NiIl3a0-O45t1xzfzOfa-1dn-6WhlHowlP3L80zoOJlzQxpAitnDEtH13ICceEnB4r0sY9uOlPxP3RpjmGjUshc5BxzCwGrpYXQTJ-5FKdw?width=249&height=266&cropmode=none" alt="向上等腰三角形">  </p><p>雖然左右兩邊是透明的，但不代表他們毫無無關<br>當我們去調整 width 的左右邊時<br>發現三角傾斜度不一樣<br>也可以說 <strong>border 左右邊是來控制傾斜度</strong>  </p><p>在本篇要做兩個到三角<br>只要把上面的 border 設為透明就 OK 了<br>左右邊則來控制斜度    </p><h3 id="正三角形呢"><a href="#正三角形呢" class="headerlink" title="正三角形呢 ?"></a>正三角形呢 ?</h3><p>對，我上面一直說等腰，那正三角形呢 ?<br>我們可以確定的是左右兩邊的長度<br>剩餘的就是底邊 (下) 長    </p><p>來簡單算數學<br>假設正三角邊長是 1，那高是  </p><blockquote><p>1^2 - (1/2)^2 開根號 = 根號 3 / 2<br>根號 3 大概是 1.73… ，除以 2 大約等於 0.866..  </p></blockquote><p>以上面的值來說左右如果設 50<br>因為左右是 除以 2 的結果<br>往回推，底長度 <code>50 * 2 * 0.866</code> </p><p>這邊就可以使用 CSS3 的 <code>calc</code> 來計算<br>我們只要控制 <code>--width</code> 達成想要的邊長就好  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">--width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">--tri</span> <span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--width<span class="token punctuation">)</span> * 0.866<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">--side</span> <span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--width<span class="token punctuation">)</span> / 2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span>  <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>  <span class="token property">border-width</span><span class="token punctuation">:</span> 0 <span class="token function">var</span><span class="token punctuation">(</span>--side<span class="token punctuation">)</span> <span class="token function">var</span><span class="token punctuation">(</span>--tri<span class="token punctuation">)</span> <span class="token function">var</span><span class="token punctuation">(</span>--side<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border-color</span><span class="token punctuation">:</span> transparent transparent green transparent<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="補充-三角形的陰影"><a href="#補充-三角形的陰影" class="headerlink" title="補充 : 三角形的陰影"></a>補充 : 三角形的陰影</h3><p>我們知道 width、height 做出的陰影就是同等的大小<br>要做三角形的陰影不能用單一邊來想  </p><p>如果直接加上 box-shadow 只會有框邊有陰影<br><img data-src="https://dsm01pap006files.storage.live.com/y4mTG53FSgXjdPHvOF9D5Dqki3tUPtD_CNtxuMpoF968okr8GNjzzrQN3Tw9LSr-K-EBAoqpsb9RmjyJYoeWSlad8Ak2PQIYG9kAGd4DNeE1qcm7bTbkmqnFNQmz2lfF5LFkBWwVvc7LUOol8lEi8OI2SouBCtNdGKiKkCOD0hS0wjEfAnzpL7ws5jpFxN9-VFn?width=281&height=291&cropmode=none" alt="只有框邊，而不是三角直角陰影"><br>我們要的是 <strong>直角</strong> 那邊的陰影<br>所以要有兩邊的 border 形成直角再加陰影   </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.tri</span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 50px solid black<span class="token punctuation">;</span>  <span class="token property">border-color</span><span class="token punctuation">:</span>  transparent transparent green green<span class="token punctuation">;</span>  <span class="token property">transform-origin</span><span class="token punctuation">:</span>0 0<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">rotate</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> -3px 3px 0px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img data-src="https://dsm01pap006files.storage.live.com/y4mA2Jyaa1HqhHgBom2vW4U42LqOPi2CjxozjxzGJOYstpR76s_Cx5_QWCghJR8bAN3Ua6RYK3LK6lsHOGnMsv9JZ3iB_u8CW4RRpBXgO9hAj6S_ZStsvoVVms31KuLFAbBkI_8KIGN9IKeyeTKTm70222bEwW5LV0pbhJlidC1yHB78ona8fSGWn6lljvyM-ph?width=370&height=192&cropmode=none" alt="正確的三角陰影"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;本篇成果&quot;&gt;&lt;a href=&quot;#本篇成果&quot; class=&quot;headerlink&quot; title=&quot;本篇成果&quot;&gt;&lt;/a&gt;本篇成果&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codepen.io/shan473/pen/qBVKqOO&quot;&gt;Codepen&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://dsm01pap006files.storage.live.com/y4mHzg-JW7SyoAHGTdGlUdj_5ZnwCD4xI67k_hSfC3GQoVpUstnuk7UTBR7UmUJpb13ZdYrbWwiYAHfilOlHT7mMJQ7HXqcji-jzR8muC__o_Dw1iYTtrnTdQi6XfOoLIEtZsrFHqsrZq3aNmq8disMaXDMzI_RxGM47SUv3SgTztsiBsVOTkzmRI7CYrfu6ytD?width=1024&amp;height=585&amp;cropmode=none&quot; alt=&quot;人員介紹卡片&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="CSS" scheme="https://blog.rosa.tw/categories/Frontend/CSS/"/>
    
    
    <category term="CSS" scheme="https://blog.rosa.tw/tags/CSS/"/>
    
    <category term="CSSZeroToOneSeries" scheme="https://blog.rosa.tw/tags/CSSZeroToOneSeries/"/>
    
  </entry>
  
  <entry>
    <title>⟬ 筆記 ⟭ Sass 小技巧</title>
    <link href="https://blog.rosa.tw/Frontend/CSS/CSS-Sass-03-tips/"/>
    <id>https://blog.rosa.tw/Frontend/CSS/CSS-Sass-03-tips/</id>
    <published>2022-03-19T15:15:57.000Z</published>
    <updated>2022-03-19T15:15:57.122Z</updated>
    
    <content type="html"><![CDATA[<p>根據鐵人賽<a href="https://ithelp.ithome.com.tw/users/20040221/ironman/562">《30天掌握Sass語法》</a> 各篇筆記總結<br>在最後也建立一個屬於自己的 Sass template<br>當然我的 Sass 旅途還沒結束 !   </p><span id="more"></span><h2 id="sass-可以幫你算數"><a href="#sass-可以幫你算數" class="headerlink" title="sass 可以幫你算數"></a>sass 可以幫你算數</h2><p>可以讓 sass 算數學，編譯後自動幫我們算好，可以包含 px、%、em<br>pure css 雖然也可以算數 (calc) 但是對效能不好。</p><blockquote><p>sass 的 px 跟 em 不能混算</p></blockquote><h2 id="檔案編譯規則"><a href="#檔案編譯規則" class="headerlink" title="檔案編譯規則"></a>檔案編譯規則</h2><p>加 <code>_</code> 底線是不轉換成 css 檔的引入檔，可以放<code>_variable</code> 等等檔案<br>引入的時候不用加底線。  </p><p>也可以把各頁獨立開來，或是各部件分開引入</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">@import reset@import layout@import index@import page<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最上方就是放 reset ，其餘樣式往後覆蓋  </p><h2 id="extend-v-s-mixin"><a href="#extend-v-s-mixin" class="headerlink" title="@extend v.s @mixin"></a>@extend v.s @mixin</h2><p>@extend 就是模板，不能帶參數，但可以把相同的樣式給群組起來，對檔案體積較小<br>@mixin 就像 copy paste ，把同樣的東西複製貼上</p><p>如果有個別客製化的參數可以使用 @mixin</p><h2 id="節省寫前綴-prefix"><a href="#節省寫前綴-prefix" class="headerlink" title="節省寫前綴 prefix"></a>節省寫前綴 prefix</h2><p>很多人是使用 plugin compass 產生，但是這套好像太久沒更新<br>後來直接搭上 PostCSS 的順風車，幫你內建好<br>不過也是可以自己寫</p><p>用 @mixin 與 @each 產生</p><ol><li>有 property name</li><li>value</li><li>prefix : 是一個 list，可以插入想要的 prefix</li></ol><p>前面兩者是 css 表達式，可以寫成 map 的形式，讓 prefix 可以一次寫多個  </p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$property</span></span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token property">key</span><span class="token punctuation">:</span>value<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>MDN 列出常見的 prefix</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">-webkit-transition</span><span class="token punctuation">:</span> all 4s ease<span class="token punctuation">;</span><span class="token property">-moz-transition</span><span class="token punctuation">:</span> all 4s ease<span class="token punctuation">;</span><span class="token property">-ms-transition</span><span class="token punctuation">:</span> all 4s ease<span class="token punctuation">;</span><span class="token property">-o-transition</span><span class="token punctuation">:</span> all 4s ease<span class="token punctuation">;</span><span class="token property">transition</span><span class="token punctuation">:</span> all 4s ease<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改成 @mixin ，單個 property</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@mixin</span> <span class="token function">vendor-prefix</span><span class="token punctuation">(</span><span class="token variable">$property</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">,</span><span class="token property"><span class="token variable">$prefixes</span></span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">@each</span> <span class="token variable">$prefix</span> in <span class="token variable">$prefixes</span>#<span class="token punctuation">&#123;</span><span class="token string">'-'</span>+<span class="token variable">$prefix</span>+<span class="token string">'-'</span>+<span class="token variable">$property</span><span class="token punctuation">&#125;</span> <span class="token punctuation">:</span> <span class="token variable">$value</span><span class="token comment">// 補上原本的</span><span class="token property"><span class="token variable">#&#123;$property&#125;</span></span> <span class="token punctuation">:</span> <span class="token variable">$value</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一次寫多個 property，把前面的 property 跟 value 合併起來</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@mixin</span> <span class="token function">vendor-prefix</span><span class="token punctuation">(</span><span class="token variable">$declarations</span><span class="token punctuation">,</span><span class="token property"><span class="token variable">$prefixes</span></span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">@each</span> <span class="token variable">$property</span><span class="token punctuation">,</span><span class="token variable">$value</span> in <span class="token variable">$declarations</span><span class="token keyword">@each</span> <span class="token variable">$prefix</span> in <span class="token variable">$prefixes</span>#<span class="token punctuation">&#123;</span><span class="token string">'-'</span>+<span class="token variable">$prefix</span>+<span class="token string">'-'</span>+<span class="token variable">$property</span><span class="token punctuation">&#125;</span> <span class="token punctuation">:</span> <span class="token variable">$value</span><span class="token property"><span class="token variable">#&#123;$property&#125;</span></span> <span class="token punctuation">:</span> <span class="token variable">$value</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>參考 :<br><a href="https://css-tricks.com/snippets/sass/mixin-prefix-properties/">Mixin to Prefix Properties | CSS-Tricks - CSS-Tricks</a></p><h2 id="RWD-寫法"><a href="#RWD-寫法" class="headerlink" title="RWD 寫法"></a>RWD 寫法</h2><p>寫法有兩種</p><ol><li>傳統 : 寫在最上方分成不同的 breakpoint 檔案</li><li>@content : 用 @include 方式插在元件上繼續寫</li></ol><h3 id="寫一個-media-就好，元素屬性都另外再寫"><a href="#寫一個-media-就好，元素屬性都另外再寫" class="headerlink" title="寫一個 media 就好，元素屬性都另外再寫"></a>寫一個 media 就好，元素屬性都另外再寫</h3><p>@media query 只有一個，一次都寫在裡面</p><ul><li>pc.sass<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss">@media screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 1024px<span class="token punctuation">)</span>.box~~~~~~~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>pad.sass<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss">@media screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span>.box~~~~~~~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="統一生成斷點，插在元素裡面寫"><a href="#統一生成斷點，插在元素裡面寫" class="headerlink" title="統一生成斷點，插在元素裡面寫"></a>統一生成斷點，插在元素裡面寫</h3><p>mixin</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@mixin</span> <span class="token function">breakpoint</span><span class="token punctuation">(</span><span class="token variable">$point</span><span class="token punctuation">)</span><span class="token keyword">@if</span> <span class="token variable">$point</span> <span class="token operator">==</span> pc@media screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 1024px<span class="token punctuation">)</span><span class="token keyword">@content</span><span class="token keyword">@else if</span> <span class="token variable">$point</span> <span class="token operator">==</span> pad@media screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span><span class="token keyword">@content</span><span class="token keyword">@else if</span> <span class="token variable">$point</span> <span class="token operator">==</span> mobile@media screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 320px<span class="token punctuation">)</span><span class="token keyword">@content</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss">.box<span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token keyword">@include</span> <span class="token function">breakpoint</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token property">width</span><span class="token punctuation">:</span> 1000px<span class="token property">height</span><span class="token punctuation">:</span> 1000px<span class="token keyword">@include</span> <span class="token function">breakpoint</span><span class="token punctuation">(</span>pad<span class="token punctuation">)</span><span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token property">height</span><span class="token punctuation">:</span> 300px<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>優點 : 撰寫上比較方便，因為是寫在元素裡面</li><li>缺點 : 會一直重複生成 @media 對檔案大小不是很友善，大專案如果有追求效能不太適合</li></ul><h2 id="sass-檔案結構"><a href="#sass-檔案結構" class="headerlink" title="sass 檔案結構"></a>sass 檔案結構</h2><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@import</span> mixin <span class="token keyword">@import</span> reset<span class="token keyword">@import</span> layout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>mixin 放一些主要要引入的變數，mixin 沒呼叫就不會產生任何東西<br>可以在一開始引入</p><p>參考這份結構 <a href="https://gist.github.com/AdamMarsden/7b85e8d5bdb5bef969a0">Sass Architecture Structure</a></p><ul><li>vendor : 其他的 plugin。boostrap 等等的第三方套件。  </li><li>utils : 基本的 <code>__variable</code>、<code>__mixin</code>、<code>__function</code></li><li>base : css reset 或是 文字規範 (h1~h6)</li><li>component : 小零件，像是按鈕、</li><li>layout : 每一頁面共同元素。導覽列、網頁底部、</li><li>pages : css 組裝，不同頁面有用到的元素透過 layout 、 component 組合  <pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@import</span> <span class="token string">'utils/variable'</span><span class="token keyword">@import</span> <span class="token string">'utils/mixin'</span><span class="token keyword">@import</span> <span class="token string">'base/reset'</span><span class="token keyword">@import</span> <span class="token string">'component/button'</span><span class="token keyword">@import</span> <span class="token string">'layout/navbar'</span><span class="token keyword">@import</span> <span class="token string">'pages/index'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="color-好幫手-draken-amp-lignten"><a href="#color-好幫手-draken-amp-lignten" class="headerlink" title="color 好幫手 draken &amp; lignten"></a>color 好幫手 draken &amp; lignten</h2><p>有時候需要建置顏色資料庫<br>相同色系但有不同深淺或是些微變化<br>不用一直複製新的色票<br>可以透過 sass 內建函式來幫我們達成  </p><p>sass 內建可以調整 <strong>明暗、飽和(saturate) 或 色象環 (hue)</strong> 等等的功能<br>而且可以用組合式的<br>如果很熟悉 hsl 的方法就知道運作模式 <code>hsl(&lt;hue 色相環&gt;,飽和度,亮度)</code></p><ul><li>darken &amp; lignten : 值 0 ~ 50，想降低亮度就用 darken</li><li>desaturate &amp; saturate :  根據原本色彩的飽和去做疊加，如果原本色彩的飽和本身就很高，再增加飽和也沒意義  </li><li>adjust_hue  : 以目前色環的顏色方向再去疊加<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.box</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">background</span> <span class="token punctuation">:</span> adjust_<span class="token function">hue</span><span class="token punctuation">(</span><span class="token function">desaturate</span><span class="token punctuation">(</span><span class="token function">lighten</span><span class="token punctuation">(</span>blue<span class="token punctuation">,</span>10<span class="token punctuation">)</span><span class="token punctuation">,</span>10<span class="token punctuation">)</span><span class="token punctuation">,</span>120<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>根據步驟來說  </li></ul><ol><li>被調整的是 藍色，亮度調整 10 %</li><li>降低飽和 10%</li><li>色相環轉動 120 度，藍色是 240 ，再轉 120 就到紅色</li></ol><p>最後結果會是 hsl(0,90%,60%)<br>想快速產生也可以用 <a href="https://sassme.jim-nielsen.com/">SassMe</a></p><h3 id="建立色彩資料庫"><a href="#建立色彩資料庫" class="headerlink" title="建立色彩資料庫"></a>建立色彩資料庫</h3><p>像 tailwindcss 有很豐富的顏色，透過不同數值調整參數<br>我們也可以使用 @for 迴圈來變化，並且使用在 html 加上 class 直接套用<br>使用上很方便，但檔案就會越來越肥 QQ<br>這時候就會選擇 boostrap 或是 tailwindcss :D…  </p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$primary</span></span> <span class="token punctuation">:</span> blue<span class="token keyword">@for</span> <span class="token variable">$i</span> <span class="token keyword">from</span> 1 <span class="token keyword">through</span> 4  .primary-d-#<span class="token punctuation">&#123;</span><span class="token variable">$i</span>*10<span class="token punctuation">&#125;</span>    <span class="token property">background</span> <span class="token punctuation">:</span> <span class="token function">darken</span><span class="token punctuation">(</span><span class="token variable">$primary</span> <span class="token punctuation">,</span><span class="token variable">$i</span> <span class="token operator">*</span> 10<span class="token punctuation">)</span>  .primary-l-#<span class="token punctuation">&#123;</span><span class="token variable">$i</span>*10<span class="token punctuation">&#125;</span>    <span class="token property">background</span> <span class="token punctuation">:</span> <span class="token function">lighten</span><span class="token punctuation">(</span><span class="token variable">$primary</span> <span class="token punctuation">,</span><span class="token variable">$i</span> <span class="token operator">*</span> 10<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="sass-合作問題"><a href="#sass-合作問題" class="headerlink" title="sass 合作問題"></a>sass 合作問題</h2><ul><li>如果合作人不會寫 sass ?<br>  用 scss 寫，scss 跟一般 css 檔案沒什麼差別，把 .css 改成 .scss。<br>  要使用檔案 import 進來就 ok 的。</li><li>共用樣式或測試<br>  做成 @extend 引入做測試</li></ul><h2 id="設計網站版本"><a href="#設計網站版本" class="headerlink" title="設計網站版本"></a>設計網站版本</h2><p>如果網站中不同頁面有不同的樣式，傳統上會準備兩分 .css 檔，透過後者覆蓋前者的特性，把預設的蓋掉。  </p><p>比如說不同的電商網站根據不同種類的網頁套用不同樣式顏色。<br><code>food.css</code>、<code>clothes.css</code> 等等  </p><ul><li>優點 : 分檔案好管理</li><li>缺點 : <ol><li>多發出 request</li><li>CSS 結構很胖</li></ol></li></ul><h3 id="nth-amp-index"><a href="#nth-amp-index" class="headerlink" title="nth &amp; index"></a>nth &amp; index</h3><p>index 找到第幾位，對應 nth 來應用</p><p>這邊以四季為例</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$season</span></span><span class="token punctuation">:</span> spring <span class="token punctuation">,</span> summer <span class="token punctuation">,</span> fall <span class="token punctuation">,</span> winter<span class="token property"><span class="token variable">$primary-color</span></span> <span class="token punctuation">:</span> green <span class="token punctuation">,</span> yellow <span class="token punctuation">,</span> orange <span class="token punctuation">,</span> grey<span class="token property"><span class="token variable">$secondary-color</span></span><span class="token punctuation">:</span> #fff <span class="token punctuation">,</span> #05f <span class="token punctuation">,</span> #00f <span class="token punctuation">,</span> #000<span class="token property"><span class="token variable">$now-season</span></span> <span class="token punctuation">:</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token variable">$season</span><span class="token punctuation">,</span>spring<span class="token punctuation">)</span><span class="token comment">//-------------</span>.navbar  <span class="token property">width</span><span class="token punctuation">:</span> 100%  <span class="token property">height</span><span class="token punctuation">:</span> 100px  <span class="token property">font-size</span><span class="token punctuation">:</span> 60px  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">nth</span><span class="token punctuation">(</span><span class="token variable">$primary-color</span><span class="token punctuation">,</span><span class="token variable">$now-season</span><span class="token punctuation">)</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">nth</span><span class="token punctuation">(</span><span class="token variable">$secondary-color</span><span class="token punctuation">,</span><span class="token variable">$now-season</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用-if-提升-Mixin-靈活度"><a href="#使用-if-提升-Mixin-靈活度" class="headerlink" title="使用 @if 提升 @Mixin 靈活度"></a>使用 @if 提升 @Mixin 靈活度</h2><p>產生簡單圖案，降低 request 請求數量<br>不用再另外做圖，避免不同尺寸的裝置造成失真  </p><ul><li><p>生成圓形</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token placeholder selector">%border-radius</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token keyword">@mixin</span> <span class="token function">circle</span><span class="token punctuation">(</span><span class="token variable">$size</span><span class="token punctuation">,</span><span class="token variable">$color</span><span class="token punctuation">)</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">$size</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">$size</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">$color</span>  <span class="token keyword">@extend</span> <span class="token placeholder selector">%border-radius</span>.box+<span class="token function">circle</span><span class="token punctuation">(</span>50px<span class="token punctuation">,</span>red<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>生成三角形</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@mixin</span> <span class="token function">triangle</span><span class="token punctuation">(</span><span class="token variable">$size</span><span class="token punctuation">,</span><span class="token variable">$pos</span><span class="token punctuation">,</span><span class="token variable">$color</span><span class="token punctuation">,</span><span class="token property"><span class="token variable">$ratio</span></span> <span class="token punctuation">:</span>1<span class="token punctuation">)</span>  <span class="token property">width</span><span class="token punctuation">:</span> 0  <span class="token property">height</span><span class="token punctuation">:</span> 0  <span class="token keyword">@if</span> <span class="token variable">$pos</span> <span class="token operator">==</span> top    <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token variable">$size</span>*<span class="token variable">$ratio</span> solid <span class="token variable">$color</span>    <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token variable">$size</span>/2 solid transparent    <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token variable">$size</span>/2 solid transparent  <span class="token keyword">@else if</span> <span class="token variable">$pos</span> <span class="token operator">==</span> top-left    <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token variable">$size</span> solid <span class="token variable">$color</span>    <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token variable">$size</span> solid transparent  <span class="token keyword">@else if</span> <span class="token variable">$pos</span> <span class="token operator">==</span> top-right    <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token variable">$size</span> solid <span class="token variable">$color</span>    <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token variable">$size</span> solid transparent  <span class="token keyword">@else if</span> <span class="token variable">$pos</span> <span class="token operator">==</span> bottom    <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token variable">$size</span>*<span class="token variable">$ratio</span> solid <span class="token variable">$color</span>    <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token variable">$size</span>/2 solid transparent    <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token variable">$size</span>/2 solid transparent  <span class="token keyword">@else if</span> <span class="token variable">$pos</span> <span class="token operator">==</span> bottom-left    <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token variable">$size</span> solid <span class="token variable">$color</span>    <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token variable">$size</span> solid transparent  <span class="token keyword">@else if</span> <span class="token variable">$pos</span> <span class="token operator">==</span> bottom-right    <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token variable">$size</span> solid <span class="token variable">$color</span>    <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token variable">$size</span> solid transparent  <span class="token keyword">@else if</span> <span class="token variable">$pos</span> <span class="token operator">==</span> right    <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token variable">$size</span>/2 solid transparent     <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token variable">$size</span>*<span class="token variable">$ratio</span> solid <span class="token variable">$color</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token variable">$size</span>/2 solid transparent  <span class="token keyword">@else if</span> <span class="token variable">$pos</span> <span class="token operator">==</span> left    <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token variable">$size</span>/2 solid transparent     <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token variable">$size</span>*<span class="token variable">$ratio</span> solid <span class="token variable">$color</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token variable">$size</span>/2 solid transparent<span class="token comment">// ------------------------</span>    .box  +<span class="token function">triangle</span><span class="token punctuation">(</span>100px<span class="token punctuation">,</span>top-left<span class="token punctuation">,</span>red<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>參考 : <a href="https://css-tricks.com/snippets/css/css-triangle/">CSS Triangle | CSS-Tricks - CSS-Tricks</a>  </p></li></ul><h3 id="應用"><a href="#應用" class="headerlink" title="應用"></a>應用</h3><ol><li><a href="https://codepen.io/shan473/pen/YzYwjZR?editors=0100">對話框</a>，搭配上面的三角形 @mixin   <pre class="line-numbers language-scss" data-language="scss"><code class="language-scss">.box <span class="token property">width</span><span class="token punctuation">:</span> 100px <span class="token property">height</span><span class="token punctuation">:</span> 100px <span class="token property">background-color</span><span class="token punctuation">:</span> #ccc <span class="token property">position</span><span class="token punctuation">:</span> relative <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px &amp;<span class="token punctuation">:</span>before   <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span>   <span class="token property">position</span><span class="token punctuation">:</span> absolute   <span class="token property">top</span><span class="token punctuation">:</span>100%   <span class="token property">left</span><span class="token punctuation">:</span>30%   +<span class="token function">triangle</span><span class="token punctuation">(</span>20px<span class="token punctuation">,</span>bottom<span class="token punctuation">,</span>#ccc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><a href="https://codepen.io/shan473/pen/YzYwjZR?editors=0100">麵包屑 (breadcrumb)</a> : <pre class="line-numbers language-scss" data-language="scss"><code class="language-scss">body  <span class="token property">background-color</span><span class="token punctuation">:</span> #000.breadcrumb  <span class="token property">display</span><span class="token punctuation">:</span> flex  <span class="token property">justify-content</span><span class="token punctuation">:</span> center  <span class="token property">align-items</span><span class="token punctuation">:</span> center  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap  <span class="token property">padding</span><span class="token punctuation">:</span> 20px  li    <span class="token property">list-style</span><span class="token punctuation">:</span> none    <span class="token property">background-color</span><span class="token punctuation">:</span> #054    <span class="token property">padding</span><span class="token punctuation">:</span> 10px 20px 10px 40px     <span class="token property">position</span><span class="token punctuation">:</span> relative    &amp; <span class="token operator">+</span> li      <span class="token property">margin-left</span><span class="token punctuation">:</span> 40px    &amp;<span class="token punctuation">:</span>before        <span class="token property">left</span><span class="token punctuation">:</span> 0%        +<span class="token function">triangle</span><span class="token punctuation">(</span>40px<span class="token punctuation">,</span>right<span class="token punctuation">,</span>#000<span class="token punctuation">)</span>    &amp;<span class="token punctuation">:</span>after        <span class="token property">left</span><span class="token punctuation">:</span> 100%        +<span class="token function">triangle</span><span class="token punctuation">(</span>40px<span class="token punctuation">,</span>right<span class="token punctuation">,</span>#054<span class="token punctuation">)</span>    &amp;<span class="token punctuation">:</span><span class="token property">first-child</span><span class="token punctuation">:</span>before      <span class="token property">all</span><span class="token punctuation">:</span> initial    &amp;<span class="token punctuation">:</span><span class="token property">last-child</span><span class="token punctuation">:</span>after      <span class="token property">all</span><span class="token punctuation">:</span> initial    a      <span class="token property">text-decoration</span><span class="token punctuation">:</span> none      <span class="token property">margin-left</span><span class="token punctuation">:</span> 20px      <span class="token property">color</span><span class="token punctuation">:</span> #fff      <span class="token property">font-weight</span><span class="token punctuation">:</span> bold    &amp;<span class="token punctuation">:</span>before<span class="token punctuation">,</span>&amp;<span class="token punctuation">:</span>after      <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span>      <span class="token property">position</span><span class="token punctuation">:</span> absolute      <span class="token property">top</span><span class="token punctuation">:</span> 0      <span class="token property">bottom</span><span class="token punctuation">:</span> 0      <span class="token property">margin</span><span class="token punctuation">:</span> auto    &amp;<span class="token punctuation">:</span>first-child      <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px 0px 0 10px       <span class="token property">padding-left</span><span class="token punctuation">:</span> 10px    &amp;<span class="token punctuation">:</span>last-child      <span class="token property">border-radius</span><span class="token punctuation">:</span> 0 10px 10px 0      <span class="token property">padding-right</span><span class="token punctuation">:</span> 20px<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="for-random"><a href="#for-random" class="headerlink" title="@for+random()"></a>@for+random()</h2><p><a href="https://codepen.io/shan473/pen/WNdrLWy?editors=0100">balls</a><br>利用 shadow 來產生分身，有點像 texture  把東西蓋上去做整體位移<br>用 function 生成隨機的變數，在疊加上去做 box-shadow 的位移</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@function</span> <span class="token function">randoms</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">)</span>  <span class="token property"><span class="token variable">$value</span></span><span class="token punctuation">:</span> #<span class="token punctuation">&#123;</span><span class="token function">random</span><span class="token punctuation">(</span>2000<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>+px #<span class="token punctuation">&#123;</span><span class="token function">random</span><span class="token punctuation">(</span>2000<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>+px #fff  <span class="token keyword">@for</span> <span class="token variable">$i</span> <span class="token keyword">from</span> 1 <span class="token keyword">through</span> <span class="token variable">$n</span>    <span class="token property"><span class="token variable">$value</span></span> <span class="token punctuation">:</span>  <span class="token variable">#&#123;$value&#125;</span> <span class="token punctuation">,</span> #<span class="token punctuation">&#123;</span><span class="token function">random</span><span class="token punctuation">(</span>2000<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>+px #<span class="token punctuation">&#123;</span><span class="token function">random</span><span class="token punctuation">(</span>2000<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>+px #fff  <span class="token keyword">@return</span> <span class="token variable">$value</span>body  <span class="token property">background-color</span><span class="token punctuation">:</span> #000.ball  <span class="token property">position</span><span class="token punctuation">:</span> absolute  <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%.ball-big  <span class="token property">height</span><span class="token punctuation">:</span> 10px  <span class="token property">width</span><span class="token punctuation">:</span> 10px  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token function">randoms</span><span class="token punctuation">(</span>300<span class="token punctuation">)</span>  <span class="token property">animation</span> <span class="token punctuation">:</span> drop 50s infinite linear.ball-medium  <span class="token property">height</span><span class="token punctuation">:</span> 5px  <span class="token property">width</span><span class="token punctuation">:</span> 5px  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token function">randoms</span><span class="token punctuation">(</span>500<span class="token punctuation">)</span>  <span class="token property">animation</span> <span class="token punctuation">:</span> drop 15s infinite linear.ball-small  <span class="token property">height</span><span class="token punctuation">:</span> 2px  <span class="token property">width</span><span class="token punctuation">:</span> 2px  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token function">randoms</span><span class="token punctuation">(</span>700<span class="token punctuation">)</span>  <span class="token property">animation</span> <span class="token punctuation">:</span> drop 10s infinite linear@keyframes drop  0%  100%    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>-2000px<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Sass開發流程設計"><a href="#Sass開發流程設計" class="headerlink" title="Sass開發流程設計"></a>Sass開發流程設計</h2><h3 id="切圖、規劃Layout"><a href="#切圖、規劃Layout" class="headerlink" title="切圖、規劃Layout"></a>切圖、規劃Layout</h3><p>美術 </p><ol><li>互動部分是否有設計出來 (hover、dropdown 等等)</li><li>背景圖要切透明 (避免不規則形狀)</li><li>字體字型，如果不是預設 web font 有無替代的</li></ol><p>事先規劃 : </p><ul><li>layout 如何合作設計 ? 共同的元素 ?</li><li>預先規劃 html 架構</li><li>畫面手寫輔助思考</li><li>圖片可以分成 png &amp; jpg (或者 svg)</li></ul><h3 id="結構規劃、全域變數設定"><a href="#結構規劃、全域變數設定" class="headerlink" title="結構規劃、全域變數設定"></a>結構規劃、全域變數設定</h3><p>變數名稱 跟 內容不要有關<br>像是顏色的變數，不要以顏色種類命名<br>一般來說有設計稿有主色、次級色或是顏色的用途  </p><ul><li>$red : <code>#ff0000</code> ——(👎)</li><li>$primary-color : <code>#ff0000</code> ——(👍)</li><li>$highlight-color: <code>#ff0000</code> ——(👍)</li></ul><h3 id="網頁排版流程"><a href="#網頁排版流程" class="headerlink" title="網頁排版流程"></a>網頁排版流程</h3><ul><li>reset css</li><li>clearfix 預先寫好  <pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token placeholder selector">%clearfix</span>  &amp;<span class="token punctuation">:</span><span class="token punctuation">:</span>after    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both    <span class="token property">display</span><span class="token punctuation">:</span> block<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>background 使用 @mixin 節省路徑的寫法<br>  預防還有複合路徑，我把額外的 path 寫在最後面<br>  還有不同的格式，所以就多寫 format，沒有把檔名寫死<br>  根路徑就可以按照想要的圖庫來放  <pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$root</span></span> <span class="token punctuation">:</span> <span class="token string">'../img/'</span><span class="token keyword">@mixin</span> <span class="token url">img-url</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token variable">$format</span><span class="token punctuation">,</span><span class="token property"><span class="token variable">$path</span></span><span class="token punctuation">:</span> <span class="token null keyword">null</span><span class="token punctuation">)</span>  <span class="token property"><span class="token variable">$file</span></span> <span class="token punctuation">:</span> #<span class="token punctuation">&#123;</span><span class="token variable">$name</span>+<span class="token string">'.'</span>+<span class="token variable">$format</span><span class="token punctuation">&#125;</span>  <span class="token property"><span class="token variable">$fullpath</span></span> <span class="token punctuation">:</span> <span class="token null keyword">null</span>  <span class="token keyword">@if</span> <span class="token variable">$path</span>    <span class="token property"><span class="token variable">$fullpath</span></span> <span class="token punctuation">:</span> #<span class="token punctuation">&#123;</span><span class="token variable">$root</span>+<span class="token variable">$path</span>+ <span class="token string">'/'</span>+<span class="token variable">$file</span><span class="token punctuation">&#125;</span>  <span class="token keyword">@else</span>    <span class="token property"><span class="token variable">$fullpath</span></span> <span class="token punctuation">:</span>#<span class="token punctuation">&#123;</span><span class="token variable">$root</span>+<span class="token variable">$file</span><span class="token punctuation">&#125;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url</span><span class="token punctuation">(</span><span class="token variable">#&#123;$fullpath&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>prefix :  瀏覽器前綴[[#節省寫前綴 prefix]]，用套件或是自己用 @mixin 寫<br>  postcss 具有 autoprefix，或是 compass</li></ul><p>大部分共用的變數</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$text-color</span></span> <span class="token punctuation">:</span> 主體文字色彩<span class="token property"><span class="token variable">$link-color</span></span> <span class="token punctuation">:</span> 連結字顏色<span class="token property"><span class="token variable">$link-hover-color</span></span> <span class="token punctuation">:</span> 連結字 hover 顏色<span class="token property"><span class="token variable">$line-hiehgt</span></span> <span class="token punctuation">:</span> 字距航高<span class="token property"><span class="token variable">$container-width</span></span> <span class="token punctuation">:</span> 區塊寬度<span class="token property"><span class="token variable">$font-style</span></span> <span class="token punctuation">:</span> 字體<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在切版中把重複性高的獨立出來  </p><h3 id="整合自己的-Sass-資料夾"><a href="#整合自己的-Sass-資料夾" class="headerlink" title="整合自己的 Sass 資料夾"></a>整合自己的 Sass 資料夾</h3><p><a href="https://github.com/meitung473/Sass-template">我的 sass 資料夾</a><br>資料夾結構  </p><pre class="line-numbers language-none"><code class="language-none">|- src    |- img    |- sass        |- base : css reset、typography        |- component : button、link...        |- layout : 通用版面，header 、 navgation、footer        |- pages : 個別頁        |- utils : variable、mixin、extend 等等        |- vendors : 放 sass-plugin        |- section (目前沒有) :  頁面區塊，hero、cta    - app.sass    - index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每個資料夾都有 all.sass 整合資料夾內的 @import </p><ul><li>base<br>  裡面已有 meyer 版本的 reset.css</li><li>utils/mixin<ol><li>media query breakpoint  </li><li>img-url background-image 快速匯入<br>參數 <code>(&lt;檔案名&gt;,&lt;副檔名&gt;,&lt;複合路徑&gt;(optional))</code><br>裡面的 <code>$root</code> 可以更換圖片根目錄路徑  </li><li>prefix 手動添加瀏覽器前綴<br>參數 <code>(&lt;css-property&gt;,&lt;value&gt;,&lt;prefix list&gt;)</code>  </li><li>基礎形狀圓形、三角形<br>圓形參數 <code>(&lt;size&gt;,&lt;color&gt;)</code><br>三角形參數 <code>(&lt;size&gt;,&lt;三角形位置&gt;,&lt;color&gt;,&lt;預設 1 是等腰，86.6% 為正三角&gt;)</code> </li></ol></li></ul><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>Sass 當然還有更多東西可以去研究<br>在文章裡還包含常用的 sass plugin<br>compass、susy 等等<br>考量到這系列文章的年份<br>發現這兩者已經停止維護<br>這部分我就沒有去特別著墨了<br>不過依然讓我學到不少東西  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;根據鐵人賽&lt;a href=&quot;https://ithelp.ithome.com.tw/users/20040221/ironman/562&quot;&gt;《30天掌握Sass語法》&lt;/a&gt; 各篇筆記總結&lt;br&gt;在最後也建立一個屬於自己的 Sass template&lt;br&gt;當然我的 Sass 旅途還沒結束 !   &lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="CSS" scheme="https://blog.rosa.tw/categories/Frontend/CSS/"/>
    
    
    <category term="CSS" scheme="https://blog.rosa.tw/tags/CSS/"/>
    
    <category term="Sass" scheme="https://blog.rosa.tw/tags/Sass/"/>
    
  </entry>
  
  <entry>
    <title>CSSZeroToOneSeries | 02 | 互動卡片</title>
    <link href="https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-02/"/>
    <id>https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-02/</id>
    <published>2022-03-18T01:53:19.000Z</published>
    <updated>2022-04-12T02:29:06.681Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/LYOdJjV">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4mBJbcOCZ4CF8WqJt5NbdIirs1thioqss6qbUqW3ReiXiJK9hPjNOthclckHXTZPXb1Y7DFw_kR-UQQmMYqzIWBfGLog7LogLdEVu4TEuI-iaz_91LgvrZteMyvlcB3mxOq4RxeHRiFqrz0JlQOD0O3tLstdIvdeXoDZD7l2saSLi84O8Vhu92m_J2Fd4O1rgh?width=1024&height=585&cropmode=none" alt="互動圖卡"></p><span id="more"></span><h2 id="圖片間距問題"><a href="#圖片間距問題" class="headerlink" title="圖片間距問題"></a>圖片間距問題</h2><p>img 是 inline 元素，但又可以按照圖片大小來設定寬高，所以又很像 inline-block。<br>而且圖片是沒有 baseline 的，距離下方有會 1 px 的問題。   </p><p>可以有 2 種情境</p><ol><li>文字 + 圖片</li><li>純圖片(s)</li></ol><h3 id="vertical-align-垂直對齊"><a href="#vertical-align-垂直對齊" class="headerlink" title="vertical-align 垂直對齊"></a>vertical-align 垂直對齊</h3><p>設定 <code>vertical-align</code>。vertical-align 是對 <strong>inline</strong> 屬性的元素做垂直對齊的方式。  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">img</span><span class="token punctuation">&#123;</span>  <span class="token property">vertical-align</span> <span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>middle 或 bottom 都可以，只是把圖片往容器下面靠攏，而且不修改圖片的 display 屬性。<br>在後面有文字的元素我覺得這個方法最適合。  </p><h3 id="display-block"><a href="#display-block" class="headerlink" title="display: block"></a>display: block</h3><p>1 px 是來自 inline 的問題，那把 display 修改成 block 就沒毛病了<br>但如果是好幾張圖並排加上文字，這方法就不適用了。  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">img</span><span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="font-size-0-amp-line-height-0"><a href="#font-size-0-amp-line-height-0" class="headerlink" title="font-size : 0 &amp; line-height : 0"></a>font-size : 0 &amp; line-height : 0</h3><p>如果在沒有文字的情況下，在 <strong>父層</strong> 去除空白文字的空間  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.image-father</span><span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> || <span class="token property">line-height</span><span class="token punctuation">:</span> 0 <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="改動-html-結構，讓-inline-擠在一起"><a href="#改動-html-結構，讓-inline-擠在一起" class="headerlink" title="改動 html 結構，讓 inline 擠在一起"></a>改動 html 結構，讓 inline 擠在一起</h3><p>不過在多張圖並排也可以利用 html 排列來解決問題，inline 屬性似乎會吃進 1 個 html 空格，這空格也不是 margin…  </p><ul><li>img 元素間有空白<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>擺在一起，空白會消失<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>我覺得蠻神奇的，平時在做導覽列 (navbar) 使用 a 標籤來排，也是同一概念<br>因為 a 也是 inline 屬性，如果想讓 a 無縫隙並排擠在一起寫就行了<br>上一篇的 <code>應用 : 導覽列</code> 就有示範到囉  </li></ul><h3 id="超級偷吃步-margin-top-1px"><a href="#超級偷吃步-margin-top-1px" class="headerlink" title="超級偷吃步 margin-top : -1px"></a>超級偷吃步 margin-top : -1px</h3><p>大部分在網路上看到的解決方案是把圖片往上挪 1 px 來解決<br>起因是很多網頁有超大張 DM 海報要放在網頁，並且切成兩段<br>造成中間銜接處有 1 px 空白   </p><p>由於瀏覽器相容性問題，上面的招數只在 chrome 跟 Edge 試過<br>像是 safiri 、firefox 或 opera 就沒試過了<br>margin 是都可以用的，應該是最保險的    </p><h2 id="position-迷思"><a href="#position-迷思" class="headerlink" title="position 迷思"></a>position 迷思</h2><p>子層用 absolute ，父層不一定用 relative</p><blockquote><p>只是找上面不是 static (預設) 定位的元素  </p></blockquote><h3 id="補充-常見技巧-蓋滿全版"><a href="#補充-常見技巧-蓋滿全版" class="headerlink" title="補充 : 常見技巧 蓋滿全版"></a>補充 : 常見技巧 蓋滿全版</h3><p>有時候想蓋滿容器，不一定要用 100% 來使用<br>如果遇到 inline 屬性既不能設高度也不能設寬度<br>這時候就可以透過 position 加上定位值來撐開  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span><span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box a</span><span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;本篇成果&quot;&gt;&lt;a href=&quot;#本篇成果&quot; class=&quot;headerlink&quot; title=&quot;本篇成果&quot;&gt;&lt;/a&gt;本篇成果&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codepen.io/shan473/pen/LYOdJjV&quot;&gt;Codepen&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://dsm01pap006files.storage.live.com/y4mBJbcOCZ4CF8WqJt5NbdIirs1thioqss6qbUqW3ReiXiJK9hPjNOthclckHXTZPXb1Y7DFw_kR-UQQmMYqzIWBfGLog7LogLdEVu4TEuI-iaz_91LgvrZteMyvlcB3mxOq4RxeHRiFqrz0JlQOD0O3tLstdIvdeXoDZD7l2saSLi84O8Vhu92m_J2Fd4O1rgh?width=1024&amp;height=585&amp;cropmode=none&quot; alt=&quot;互動圖卡&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="CSS" scheme="https://blog.rosa.tw/categories/Frontend/CSS/"/>
    
    
    <category term="CSS" scheme="https://blog.rosa.tw/tags/CSS/"/>
    
    <category term="CSSZeroToOneSeries" scheme="https://blog.rosa.tw/tags/CSSZeroToOneSeries/"/>
    
  </entry>
  
  <entry>
    <title>CSSZeroToOneSeries | 01 | 圖文滿版區塊</title>
    <link href="https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-01/"/>
    <id>https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-01/</id>
    <published>2022-03-18T01:53:05.000Z</published>
    <updated>2022-04-12T02:29:01.711Z</updated>
    
    <content type="html"><![CDATA[<p>這個系列是從鐵人賽<a href="https://ithelp.ithome.com.tw/users/20112550/ironman/2623">金魚都能懂的這個網頁畫面怎麼切 - 金魚都能懂了你還怕學不會嗎</a>的筆記與實作<br>原本要叫 Zreo to Hero，從迪士尼大力士的歌曲想到的<br>但完成金魚系列好像撐不上 Hero XD<br>就改成 Zero to One 了<br>代表從零到入門的  </p><p>起因是覺得自己的 CSS 結構跟用法沒有很妥善<br>一些性質莫名亂用，簡單來說就是不懂 CSS<br>透過一天天跟著實作了解 HTML 建置結構與 CSS 乾淨的寫法  </p><blockquote><p>這個系列不做 RWD  </p></blockquote><h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/oNoEjNV?editors=0100">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4mFal1-hjaKzBYO0ceMmC3QyeuTEau2VqzDJF9KrNlLlaJqh1_6IA96aYDhEfXLD8hxMLGT-e2HeoUSEuxZzdB9J6Avk0LArKj0fgN4pP4drg_Qdza2-44tROHeK-PkxW5KrMWNXsxRYHNQIlD6Kw6MfCSVx-zj_uT7j_yf072F9X-qDfe2ro6EJNp59rN5m-z?width=1024&height=585&cropmode=none" alt="圖文滿版區塊"></p><span id="more"></span><h2 id="Reset-一下"><a href="#Reset-一下" class="headerlink" title="Reset 一下"></a>Reset 一下</h2><p>刻板面之前要先 reset，這樣我們才能掌控間距大小<br>最常見的是對這三者進行重置  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span><span class="token punctuation">&#123;</span><span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">list-style</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="什麼是-Reset"><a href="#什麼是-Reset" class="headerlink" title="什麼是 Reset ?"></a>什麼是 Reset ?</h3><p>每個瀏覽器會預先有 CSS 樣式，但是規格是不一樣，像是 padding 或 margin 究竟是加在 <code>html</code> 還是 <code>body</code> 呢 ?<br>各個瀏覽器各自有自己的規範，因此在製作上需要先把 CSS Reset 一下，把所有標籤都規定成一樣，再去設計。  </p><p>像是 li tag 會預設距離 <code>margin-left : 8px</code>，body 還沒 reset 情況下也會有 margin   </p><h3 id="CSS-Reset-我把你全家變一樣"><a href="#CSS-Reset-我把你全家變一樣" class="headerlink" title="CSS Reset  :  我把你全家變一樣"></a>CSS Reset  :  我把你全家變一樣</h3><p>把所有預設外觀都變一樣<br>所有標籤都必須自己手動加，可以自己掌控元素<br>不論在哪一個瀏覽器都會把 CSS 歸零。<br>最常見的是 meyer 的 reset.css  </p><p>所有標籤的樣式都變一樣，好像有點太超過了，因此出現了 <strong>Normalize CSS</strong>。  </p><p>=&gt; <a href="https://meyerweb.com/eric/tools/css/reset/">CSS Tools: Reset CSS (meyerweb.com)</a>   </p><h3 id="Normalize-CSS-差很大的修一下"><a href="#Normalize-CSS-差很大的修一下" class="headerlink" title="Normalize CSS : 差很大的修一下"></a>Normalize CSS : 差很大的修一下</h3><p>不用到每個都 reset ，針對一些瀏覽器差異性較大屬性進行微調<br>最大優點是既保留原有 html 標籤的情況下，做修改<br>很多主流 CSS 框架也是採用 Normalize CSS</p><h2 id="萬年問題-inine-v-s-block"><a href="#萬年問題-inine-v-s-block" class="headerlink" title="萬年問題 : inine v.s block"></a>萬年問題 : inine v.s block</h2><ul><li>block : 佔據一整行</li><li>inline : 本身元素的寬度</li></ul><h3 id="inline"><a href="#inline" class="headerlink" title="inline"></a>inline</h3><p>理論上元素跟別人排在一起，但也要看周遭的元素排列。  </p><blockquote><p>最重要的是 <strong>設定寬高是沒用的</strong>，是依照內容去撐高</p></blockquote><p>具有 inline 屬性的標籤<br>a 、span   </p><p>如果加上 padding 跟 margin，並不會影響其他元素的排版狀況，只會把單純的背景撐開。  </p><p>float 屬性會讓 block 排排站，可以想成是 3D 浮起來。  </p><h3 id="block"><a href="#block" class="headerlink" title="block"></a>block</h3><p>不管多寬都會佔掉一整列，跟 inline 最大區別是 <strong>可以設定寬高</strong></p><p>具有 block 屬性的標籤<br>h(1~6)、p、div …等等  </p><h3 id="混亂中立-inline-block"><a href="#混亂中立-inline-block" class="headerlink" title="混亂中立 : inline-block"></a>混亂中立 : inline-block</h3><p>解決 inline 不能設定寬高的，但是又可以跟別人排在一起<br>繼承 inline 排在同一排，又繼承 block 可以設寬高。</p><h4 id="範例一"><a href="#範例一" class="headerlink" title="範例一"></a>範例一</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">h1</span><span class="token punctuation">&#123;</span>display： inline；<span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>h(1~6) 用 inline 還是沒有被排在一起，因為 p也是 block。<br>如果 p 也是 inline，就會並排  </p><h4 id="範例二"><a href="#範例二" class="headerlink" title="範例二"></a>範例二</h4><p>a 變成 block ，會一整行都可以按，即使有寬度元素還是會佔好佔滿</p><h3 id="ul-預設是-block"><a href="#ul-預設是-block" class="headerlink" title="ul : 預設是 block"></a>ul : 預設是 block</h3><p>edge =&gt; 預設有 <code>padding : 16px;</code> <code>margin : 16px 0;</code></p><ul><li>如果是 <strong>inline</strong> =&gt; 底下的 li 照排，只是沒有包裹在 ul 容器裡，edge 預設會有 <code>padding-left : 40px</code>，margin 會歸零。  </li><li>如果是 <strong>inline-block</strong> =&gt; 保有 block 元素</li></ul><h3 id="li-預設是-list-item"><a href="#li-預設是-list-item" class="headerlink" title="li  : 預設是 list-item"></a>li  : 預設是 list-item</h3><p>不屬於兩大派別，而是 list-item</p><ul><li>如果是 inline ，<code>list-style-type</code>，會不見</li><li>如果是 block ，<code>list-style-type</code> 也會不見</li><li>如果是 inline-block ，<code>list-style-type</code> 也會不見</li></ul><p>所以這個 list-item 會包含 list-style-type 這個屬性<br>可以用 div 跟 span 模仿 ul &amp; li   </p><iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/shan473/embed/ZEarWRK?default-tab=html%2Cresult&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/shan473/pen/ZEarWRK">  Untitled</a> by YanShanHong (<a href="https://codepen.io/shan473">@shan473</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe>    <h3 id="應用-導覽列"><a href="#應用-導覽列" class="headerlink" title="應用 : 導覽列"></a>應用 : 導覽列</h3><p>把 a 設成 inline-block，這樣可以把高度撐開<br>但是 HTML 空白字元會佔據 px ，只要把 HTML 擠在一起就不會有問題了<br><a href="https://codepen.io/shan473/pen/JjOpWab">Codepen</a></p><h2 id="vh"><a href="#vh" class="headerlink" title="vh"></a>vh</h2><p>viewport 的高度，看到的頁面視窗高度<br>最常看到 100vh，會佔據整個視窗高度  </p><h2 id="flex-direction-flex-排序的方向"><a href="#flex-direction-flex-排序的方向" class="headerlink" title="flex-direction : flex 排序的方向"></a>flex-direction : flex 排序的方向</h2><p>轉向的同時主軸線的 justify-content 跟次軸 align-items 也要跟著轉哦 !  </p><ul><li>row : 橫向 </li><li>column : 直向</li></ul><h2 id="background"><a href="#background" class="headerlink" title="background"></a>background</h2><blockquote><p><code>background:</code><br>linear-gradient(115deg,#9198e5 50%,transparent 50%) center center/100% 100% ,<br>url(‘<a href="https://picsum.photos/1200/600?random=10&#39;">https://picsum.photos/1200/600?random=10&#39;</a>) right center/100% 100%;</p></blockquote><ol><li>多個背景疊層用 <code>,</code> 隔開</li><li><code>linear-gradient(&lt;角度&gt;, $顏色1 $濃度,$顏色1 $濃度)</code><br> 可以擺放多個顏色跟濃度，角度不只 <code>deg</code> 也可以用 360 算的 <code>turn</code>  </li><li>後面擺放的順序是 <code>poition / size</code>   <ul><li><code>size</code> :   <ol><li>contain =&gt; 把大小等比例放大跟容器其中一邊等大</li><li>cover =&gt; 圖片真實的大小，不夠的會 repeat 到塞滿</li><li>% 數 =&gt; 相對容器的多少 %</li><li>直接設定 px</li><li>auto : 這個蠻複雜的先不討論 QQ</li></ol></li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;這個系列是從鐵人賽&lt;a href=&quot;https://ithelp.ithome.com.tw/users/20112550/ironman/2623&quot;&gt;金魚都能懂的這個網頁畫面怎麼切 - 金魚都能懂了你還怕學不會嗎&lt;/a&gt;的筆記與實作&lt;br&gt;原本要叫 Zreo to Hero，從迪士尼大力士的歌曲想到的&lt;br&gt;但完成金魚系列好像撐不上 Hero XD&lt;br&gt;就改成 Zero to One 了&lt;br&gt;代表從零到入門的  &lt;/p&gt;
&lt;p&gt;起因是覺得自己的 CSS 結構跟用法沒有很妥善&lt;br&gt;一些性質莫名亂用，簡單來說就是不懂 CSS&lt;br&gt;透過一天天跟著實作了解 HTML 建置結構與 CSS 乾淨的寫法  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;這個系列不做 RWD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;本篇成果&quot;&gt;&lt;a href=&quot;#本篇成果&quot; class=&quot;headerlink&quot; title=&quot;本篇成果&quot;&gt;&lt;/a&gt;本篇成果&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codepen.io/shan473/pen/oNoEjNV?editors=0100&quot;&gt;Codepen&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://dsm01pap006files.storage.live.com/y4mFal1-hjaKzBYO0ceMmC3QyeuTEau2VqzDJF9KrNlLlaJqh1_6IA96aYDhEfXLD8hxMLGT-e2HeoUSEuxZzdB9J6Avk0LArKj0fgN4pP4drg_Qdza2-44tROHeK-PkxW5KrMWNXsxRYHNQIlD6Kw6MfCSVx-zj_uT7j_yf072F9X-qDfe2ro6EJNp59rN5m-z?width=1024&amp;height=585&amp;cropmode=none&quot; alt=&quot;圖文滿版區塊&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="CSS" scheme="https://blog.rosa.tw/categories/Frontend/CSS/"/>
    
    
    <category term="CSS" scheme="https://blog.rosa.tw/tags/CSS/"/>
    
    <category term="CSSZeroToOneSeries" scheme="https://blog.rosa.tw/tags/CSSZeroToOneSeries/"/>
    
  </entry>
  
  <entry>
    <title>⟬ 紀錄 ⟭ DIY 架站 - 安裝 LAMP Server + phpMyAdmin  並且部屬在 AWS EC2 主機</title>
    <link href="https://blog.rosa.tw/bookreport/lanch-website/"/>
    <id>https://blog.rosa.tw/bookreport/lanch-website/</id>
    <published>2022-02-06T04:38:32.000Z</published>
    <updated>2022-02-06T04:38:32.671Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前端跟後端學點皮毛，想要自己架站看看，雖然有免費的 github pages 可以放靜態網站，但遇到資料庫就不支援了，php 檔放到 github pages 只能當純文字而已，於是自己使用虛擬主機跟買網域來架 :D  </p><p>這次是要安裝 LAMP Server + phpMyAdmin 在 Linux 系統上架站，主機是使用虛擬主機 (AWS EC2)， AWS 提供免費一年就來試試看，網域的話從 <a href="https://www.gandi.net/zh-Hant">Gandi</a> 購買一年份，我才知道域是有分級的，不同的網域價錢真的差很多…  </p><h2 id="設置"><a href="#設置" class="headerlink" title="設置"></a>設置</h2><p>主要都是參考這篇好文章 =&gt; <a href="https://github.com/Lidemy/mentor-program-2nd-yuchun33/issues/15">部署 AWS EC2 遠端主機 + Ubuntu LAMP 環境 + phpmyadmin)</a><br>接下來 Let’s GO !  </p><h3 id="設定-AWS-EC2"><a href="#設定-AWS-EC2" class="headerlink" title="設定 AWS EC2"></a>設定 AWS EC2</h3><p>註冊完 AWS 帳號，登入用 <code>Root user</code>(管理員)，設定上才不會有太多限制。  </p><p>不過官方還是建議創建 <code>IAM user</code>，在往後日常操作比較適合，我想應該是怕去動到原始設定，或者建議組織架構將權限分散。<br><img data-src="https://dsm01pap006files.storage.live.com/y4mf8DngFOVKM87YZaaJg_A14Y8pog_C_Hbotg4kAt2JPM7Svs7ebIjUWjdA1uAWlTtVLNnorxd1-1cm8zFbfGI1f45TOng_tiu6bTMQse6HJwXLFozcCQpRIjMq6wan9QCZ88bzbG8I1JGi4Zut53DOE_c-4HBS2P7V3l5Llz_N1EbSj4OUM1Wt9jI2rG1ZKJ2?width=980&height=632&cropmode=none" alt="登入"></p><p>登入後會有不同服務方案，選 <code>EC2</code><br><img data-src="https://dsm01pap006files.storage.live.com/y4m3ZaSFwn_k99MGTLJskQ0mT7J-RKzcHbNQKpa1BlyqoCstPIcYaOkZNQQ29SJWz1tb0h8vltystPhHyUjiZ9ivknXvFjFjF-MdMbev5fq0MhXgiQ_ZPEhaCUKsPx0UvTCCLFcIqP6fQHwLbqdSBcARYFZKwEFGs37gfajwp35J3dA_ztKa-6dvo_t_u8IG6Js?width=2730&height=1545&cropmode=none" alt="EC2"></p><h4 id="Step-1-選虛擬主機"><a href="#Step-1-選虛擬主機" class="headerlink" title="Step 1 : 選虛擬主機"></a>Step 1 : 選虛擬主機</h4><p>我選 <code>Ubuntu Server 18.04 LTS (HVM)</code><br><img data-src="https://dsm01pap006files.storage.live.com/y4mcZYCAzid00O2SXv3_F77FWOcJja7Yrr-fJgevek5LPWFdqxVB1UrYiJDAHCTZwbdjixL24xVXT2wfS2rGiATqDK5dQXmF32Qa4XmpNbEvQHSVllNU-5S607UqWGp7p3GCiNAI4q-HzLi8HWXx45eM4zB2FEkMp8sR6K7WqO-500kCnd09bty9azCLfLEoFAN?width=2735&height=1565&cropmode=none" alt="Ubuntu Server"></p><p>中間有好幾部可以略過，也可以自行更改，沒什麼要動可以直接跳到第六步   </p><p>第二步是選擇伺服器的類型，免費預設類型就很夠用了。<br><img data-src="https://dsm01pap006files.storage.live.com/y4mUj0tw8Hg-PkgDB91mcYYHevrZpgvbDAl0vJTVeaywND3vwSTuFq-it4bCHSciyhcRsrbYB6UDSovtMyNJ1G14cSpxQnndJI2Y6dCMRJcylEboTYH7X_3iFu6oLTRFnETRRzCh564HZh0DV4PAOprW5bB1YrsxLQOgMUYTWeoJ4-byY6PQCwwZowe6t4Vp5aI?width=2408&height=1376&cropmode=none" alt="選主機類型"><br>第三步是伺服器設定的細節<br>第四步是記憶體容量設定，預設是 8 GB<br>第五步是跟容量有關係的設定 (看不太懂…)  </p><h4 id="Step-2-第六步-Configure-Security-Group"><a href="#Step-2-第六步-Configure-Security-Group" class="headerlink" title="Step 2 : 第六步 Configure Security Group"></a>Step 2 : 第六步 Configure Security Group</h4><p>設定網路通道跟安全，只要先新增 HTTP 跟 HTTPS ，才能使用網頁連線，再按 <code>Review and Lanch</code>，最後一步是全面步驟的總和而已<br><img data-src="https://dsm01pap006files.storage.live.com/y4mq2kdMSDZmkJbh1bArHYZmR-YD8MfcpFkh-SI9D41krI7xiNPfeNEP0eZkpO6YwMIPgcLzm-BoaYfb-stJGi0Za-U54-_7GXYpvoixprGZ7kH1xzN3k6Fchw7xL5ZOrQpR6hZ3Xbc2JPdMc5BQnmRbup9I8tJd_2GaMizMnFA7aB33pQCh_a42lAzErvuKGhw?width=2735&height=1312&cropmode=none" alt="Configure Security Group"> </p><h4 id="Step-3-配對金鑰"><a href="#Step-3-配對金鑰" class="headerlink" title="Step 3 : 配對金鑰"></a>Step 3 : 配對金鑰</h4><p>因為要透過 SSH 連線，必須要有金鑰，<code>RSA</code> 是常見的非對稱加密法。  </p><p>下拉選單會有三個選項，第一次使用 <code>create</code>，下面是檔案名稱，會產生 <code>&lt;filename&gt;.pem</code> 的檔案，等等連線會用到<br><img data-src="https://dsm01pap006files.storage.live.com/y4mfUwE7kl8QCWfs1FyTwVLWGf0surxUO4Gy2ypz51DkRyidK1x_ba_y3UZoGKMoJRA5Btj3GE9e7Og5n2FC9Ui-0D3lR3Bz3oSv_O9EtAt2Ukakfi8WZJ1cMfAGlmOa36vlrHWuggCkGA2YAKa3Qg5yUplIvGWI4VfPe0Ff2r4Punh0Qqsr_DquNx2RSexPMq0?width=2408&height=1376&cropmode=none" alt="下載金鑰"></p><h4 id="Step-4-記下-IPv4"><a href="#Step-4-記下-IPv4" class="headerlink" title="Step 4 記下 IPv4"></a>Step 4 記下 IPv4</h4><p>回到 EC2 儀錶板，會有主機的狀態訊息，選擇剛剛開起來正在執行的<br><img data-src="https://dsm01pap006files.storage.live.com/y4m3ZJghMG-GmoRrtVNdLOp_xOr8AEQ35BhoCKrzSPbCyG7RYKKF_U6N-CrjkhcMNBvLk_3tzHP8-QaRveiWr-rxs7W6H1h4VD9tyRqN-k0NF_FIrkuOFNg9C4JSKwr9poJM29KLxXCqk2DjA-fctK0btph1HgC9UXcN3fpw63q_KtMvgWuHwqL5oL561k2sYx5?width=2408&height=1376&cropmode=none" alt="EC2 儀錶板"></p><p>點一下正在執行的個體，下面會有概要，記下公有 <code>IPv4</code><br><img data-src="https://dsm01pap006files.storage.live.com/y4mOjbTxzVsSeLt_jimxUFsqt6Q-P-TQ87TmsNKzunm3WEff2KXdhzavkrCFkBepOY33-vUTXsXT6S1nU9cQY2BJwpUxIy8l4FBJfEJM3n6fFOTD2lN5vAukmZJQ93i8bkte6EdZPGDCg3a0Y5oi3CDQNWAgA5VP12ckOVPuJF6vTmpuq1b8bYJHomOtS6Z191s?width=2408&height=1376&cropmode=none" alt="IPv4"></p><p>到這步就有一個只有作業系統的主機，接著再把環境給裝起來  </p><h3 id="設定-LAMP-環境"><a href="#設定-LAMP-環境" class="headerlink" title="設定 LAMP 環境"></a>設定 LAMP 環境</h3><ul><li><strong>L</strong>inux : 作業系統  </li><li><strong>A</strong>pache : 網頁伺服器  </li><li><strong>M</strong>ariDB or <strong>M</strong>ySQL : 資料庫  </li><li><strong>P</strong>HP : 可以編寫動態網頁的程式碼  </li></ul><h4 id="Step-5-連上虛擬-遠端-主機"><a href="#Step-5-連上虛擬-遠端-主機" class="headerlink" title="Step 5 連上虛擬(遠端)主機"></a>Step 5 連上虛擬(遠端)主機</h4><p>剛剛下載的金鑰，跟記下的 IPv4 派上用場<br>金鑰如果跟 cmd 目錄不同，記得加上相對路徑  </p><p>打開 cmd 輸入  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -i <span class="token operator">&lt;</span>file.pem<span class="token operator">></span> ubuntu@<span class="token operator">&lt;</span>IPv<span class="token operator"><span class="token file-descriptor important">4</span>></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例 : <code>ssh -i ~/Desktop/key.pem ubuntu@123.11.22.3</code><br>問 :  <code>Are you sure you want to continue  connecting (yes/no)?</code><br>答 : <code>y</code><br><img data-src="https://dsm01pap006files.storage.live.com/y4mn3vALzZNWp-Acn_mxNele8w-LVujJTvzr30apsQsRuUis-cs-UCn3AVE5gGcg3_GUIOmHRTHDufaHNwW93B5TWDwbpKGkM2fYkiDc4QFZL_NdhXERBpNXhnN758xE48g023o9Nvz_szUsqfsrVDL-7bKdd9AaSvYOwQy0DpWfPGNhMT2JUu3kLsqjhB3SRD4?width=1925&height=1142&cropmode=none" alt="登入遠端主機">  </p><p>前面變成主機位置就是登進去了  </p><h4 id="Step-6-系統更新"><a href="#Step-6-系統更新" class="headerlink" title="Step 6 : 系統更新"></a>Step 6 : 系統更新</h4><p>裝伺服器之前系統更新一下  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> upgrade <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> dist-upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>問 : 是否繼續下載 ?<br>答 : y  </p><ul><li><strong>apt</strong> (Advanced Packaging Tool) : 套件管理器工具，可以做套件的查找、升級、安装、刪除，執行必須要有 <code>root</code> (超級管理員)的權限  </li></ul><p>所以這邊都會用 <code>sudo</code>  </p><h4 id="Step-7-好用的套件-tasksel"><a href="#Step-7-好用的套件-tasksel" class="headerlink" title="Step 7 : 好用的套件 tasksel"></a>Step 7 : 好用的套件 tasksel</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> tasksel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>tasksel 是已經幫你整理好成一組的工具，包含 LAMP 伺服器<br>輸入 <code>sudo tasksel</code> 看到的安裝介面，可以一次選好幾個，打包成一組安裝<br><img data-src="https://dsm01pap006files.storage.live.com/y4mnt-7tjSuj7EUF7qdsQXy43btYrwRq84uk4ZxfGJfFMHh5BpAArgfUZopHq6IngtePnB8s2RyVTG-49PJt1uiNbLdhDAud3GoVRmWhftui7LL3O4MqGb7cjizJEcS6M80Orrida7n0fFV0uVmjAFhPoeohQjw8ls3X_p6VY7iAO6VQvztquBnCuau_PVj2hoj?width=1905&height=1675&cropmode=none" alt="tasksel 安裝包"></p><h4 id="Step-7-安裝-LAMP-server"><a href="#Step-7-安裝-LAMP-server" class="headerlink" title="Step 7 : 安裝 LAMP server"></a>Step 7 : 安裝 LAMP server</h4><p>也可以直接打入指令直接安裝，不用再到介面選擇  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> tasksel <span class="token function">install</span> lamp-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>會跳一下紫色視窗代表安裝，在網頁打上 IPv4 的網址，就會出現 apache 起始頁面代表成功<br><img data-src="https://dsm01pap006files.storage.live.com/y4mnfxBZr0dvNkHq_dKRmxzdzCheXNg77h9mjJd7jMRFfJPYslmw53w4REgiHf8lb3LXHLoY82NHDfCPj7Qp4CwWTzCPM2f8s0jWkVP1hDq8WrcpDke6BzM8eYGHNxXdc3RtHgtGJdBAUHBuT5y2Roulmu1yCL3BKI9n2D0xb-tQ5L-a5PH2v8rIkPPUTwb0hQ0?width=2679&height=1537&cropmode=none" alt="成功連上的畫面"></p><h3 id="設定-phpmyadmin"><a href="#設定-phpmyadmin" class="headerlink" title="設定 phpmyadmin"></a>設定 phpmyadmin</h3><p>phpmyadmin 是 mySQL 管理的介面軟體，不用下載軟體就可以在網頁連上資料庫。  </p><p>後續我也會使用 <code>MySQL Workbench 8.0 EC</code> 桌上軟體來管理資料庫。  </p><h4 id="Step-8-安裝-phpmyadmin"><a href="#Step-8-安裝-phpmyadmin" class="headerlink" title="Step 8 : 安裝 phpmyadmin"></a>Step 8 : 安裝 phpmyadmin</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> phpmyadmin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img data-src="https://dsm01pap006files.storage.live.com/y4mLZKbUP3LkaBCAIM6PKtuBVQ7_zF7hu4uNXPod28KcInO3uuPjaIovOMk4980mfsHPLu5oYyJ-HP2JViGignoFy0VZOYMOi96QX9EbPch5Tt2Sg3k60lGRvser2az_NGR7WLi8ECRPVoxXrcbcVvLDvYltfT8Ok0vMpEGvRG7JC-g1lw5J4qJBHItThHCP8mP?width=1892&height=1687&cropmode=none" alt="連接 apache"><br>記得要按一下空白鍵，出現星號才是選定，讓 phpmyadmin 連接到 apache2，不然後面會無法連上，我第一次就沒有按到導致輸入網址是沒辦法連上的 (已解決  [[#解決問題 網址連不上]])  </p><p>問 : 是否設定 dbconfig-common<br>答 : Y  </p><p>會建立一個新的 MySQL 使用者來操作運行 phpmyadmin 額外需要用到的資料表。預設使用者名稱為 <code>phpmyadmin</code>，接著要設定 phpmyadmin 這個 MySQL 使用者的密碼  </p><p>記得這裡是新的 user 設定 phpmyadmin 操作， root 還沒有  </p><h4 id="Step-9-設定-phpmyadmin-登入"><a href="#Step-9-設定-phpmyadmin-登入" class="headerlink" title="Step 9 : 設定 phpmyadmin 登入"></a>Step 9 : 設定 phpmyadmin 登入</h4><p>預設 MySQL root 密碼是空的，但沒辦法使用密碼來登入(因為驗證方式是 <code>auto_socket</code>)。<br>為了讓 phpmyadmin 可以用 root 帳號管理，就要先設定 MySQL 本身的 root 帳號，變成可以透過帳號密碼來登入  </p><p>透過 root 帳號進到 <code>mysql</code> 這個資料庫  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> mysql -u root mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>進到 MySQL 的 shell，加入讓 root 啟用<br><code>mysql_native_password</code> 插件，在來一定要刷新權限表</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">UPDATE user SET plugin&#x3D;&#39;mysql_native_password&#39; WHERE User&#x3D;&#39;root&#39;;FLUSH PRIVILEGES;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>記得尾巴一定要有分號，才是完整的斷句</p><p>再來離開 mysql  <code>exit</code></p><h4 id="Step-10-設定-MySQL-的-root-密碼"><a href="#Step-10-設定-MySQL-的-root-密碼" class="headerlink" title="Step 10 : 設定 MySQL 的 root 密碼"></a>Step 10 : 設定 MySQL 的 root 密碼</h4><p>剛剛只是開啟功能，接下來要真的設定密碼，輸入  : </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> mysql_secure_installation<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>開啟 <code>VALIDATE PASSWORD</code> 插件，密碼驗證，幫忙檢查 root 的密碼安全性，會問是否啟用， 答 <code>y</code></p><p>再來會問密碼複雜度</p><ul><li>0 (Low) : 長度大於等於 8</li><li>1 (Medium) : 長度大於等於 8，包含大小寫和一個特殊字元</li><li>2 (Strong) : 長度大於等於 8，包含大小寫和一個特殊字元，包含字典檢查 (???)</li></ul><p>直接選 2 就好，再來要輸入兩次密碼，後面會詢問幾項問題</p><ul><li>確認密碼輸入無誤 : y</li><li>移除匿名使用者的資料 : y</li><li>可以禁止從遠端使用MySQL的root帳號來登入MySQL : y</li><li>移除測試用的資料庫 : y</li><li>重新載入權限表 : y</li></ul><p>都給他 y 下去就是了。到最後就 ok 了，接著打開瀏覽器輸入 <code>&lt;IPv4&gt;/phpmyadmin</code> 看到登入頁面就可以使用了<br><img data-src="https://dsm01pap006files.storage.live.com/y4muMsNIJeduUG0E5NPBPq4IJWIhaSOSpG3q51AO5s6Hvj1iiCPcr1XGPpAe_eQCIu6zWV1bt09EJamYRnLspgQFHFmEzHj6feXlmVnprFR6Tu5COkNSEOFy6op49B82xyGc5T1bUruuwckI2FCrz1RDzk-YV0GjH2XyoruE5i8G8D1PpKeDG2c2mPfdqN2Yg_O?width=2408&height=1376&cropmode=none" alt="/phpmyadmin"></p><h5 id="解決問題-網址連不上"><a href="#解決問題-網址連不上" class="headerlink" title="解決問題 : 網址連不上"></a>解決問題 : 網址連不上</h5><p>直到再網址上打 <code>/phpmyadmin</code> 都連不上，重新安裝後 MySQL 顯示是 OK 的，<code>show databases</code> 也有看到 phpmyadmin 的 schema，但不知道為什麼都連不上 QQ</p><ul><li><p>方法一 : 重新再設定<br>  一樣會跳回第一次選擇連接的伺服器口</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg-reconfigure phpmyadmin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  dpkg 也是處理安裝套件的一種管理指令，跟 apt 很像，但差別在 <code>dpkg</code> 安裝套件並不包含依賴關係。</p></li><li><p>方法二 : 手動把檔案連結起來</p></li></ul><ol><li>先確定連結的檔案存不存在 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">file</span> /etc/apache2/conf-enabled/phpmyadmin.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> 如果有會出現<br> <code>/etc/apache2/conf-enabled/phpmyadmin.conf: symbolic link to ../conf-available/phpmyadmin.conf</code><br> 沒有的話就會報錯</li><li>手動連結 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ln</span> -s /etc/phpmyadmin/apache.conf /etc/apache2/conf-available/phpmyadmin.conf<span class="token function">sudo</span> a2enconf phpmyadmin<span class="token function">sudo</span> systemctl reload apache2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>ln</code> : 會把兩個檔案連結起來</li><li>第二個是重新設定</li><li>第三個是系統重載入 apache2</li></ul></li></ol><h4 id="Step-11-把網頁放上來"><a href="#Step-11-把網頁放上來" class="headerlink" title="Step 11 : 把網頁放上來"></a>Step 11 : 把網頁放上來</h4><p>網頁檔案要放在 <code>/var/www/html</code> 底下<br>先移到資料夾底下 <code>cd /var/www/html</code>，建立一個網頁 <code>vi index.html</code>，打個 html，到網址打上位址，出現內容代表 OK 了 :D</p><ul><li>使用 <code>git clone</code><br>  失敗的原因是權限，那對 <code>/var/www/html</code> 更改權限  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chown</span> ubuntu /var/www/html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  再使用一次 git clone 就沒問題了<ul><li><code>chown &lt;&gt;</code></li></ul></li></ul><h3 id="網域設置"><a href="#網域設置" class="headerlink" title="網域設置"></a>網域設置</h3><p>我在 gandi 買了自己的網域，打開域名設定<br><img data-src="https://dsm01pap006files.storage.live.com/y4mWOHsaEFsldsxUXYVnt4AAC_qHEDpom6VjiExv8gUu3TPFBQ-01EnSY3ZcJhUqjCAa_seueuDv6babkELzu_W8W7RVjEXUsbD4SJYsZjBVo6rtRs0HY20FjqioD_7bIfOUCWOUKqKOYPEQNwUFs9Gu0hVSn2sVjQvgGjpJiQyUO2nVFstN-RbU4kjiv1Etqk9?width=2735&height=1573&cropmode=none" alt="DNS 轉址設定"><br>更動這個 <code>A</code> 的值改成 <code>IPv4</code> 也就是虛擬主機的 IP，對應到 IPv4 的 32 位元位址</p><ul><li><code>A</code> : 將DNS網域名稱對應到IPv4的32位元位址</li><li><code>CNAME</code> : 同一部主機設定許多別名</li></ul><p>等大概一會兒，在打上自己買的網域，就會連到 IPv4 看到的畫面，後面可以在新增自己的子網域</p><h3 id="補充-把資料庫連線到-MySQL-Workbench"><a href="#補充-把資料庫連線到-MySQL-Workbench" class="headerlink" title="補充 : 把資料庫連線到 MySQL Workbench"></a>補充 : 把資料庫連線到 MySQL Workbench</h3><p>雖然有 phpmyadmin 了，之前我都是用 workbench 來管理，來換一下吧</p><p>這時候直接新增 connection 會被擋掉，根據這篇 <a href="https://lidemy5thwbc.coderbridge.io/2021/07/27/webserver-set/">文章</a> 做設定 </p><ol><li>遠端主機的防火牆<br> 防火牆會擋住外來的連線，這時候要到 EC2 安全性設定打開 MySQL 通道<br> <img data-src="https://dsm01pap006files.storage.live.com/y4mGvlCum2TSup9BLc0Pz6uHBCW5s3dikyxRLRjscvgkgJd4goDhU-i4tneFJ7WOQ_3EphoMuBLY79U6sSnDnv61KkKkCfFdZnUFlJvBfHs3CDKUqPhH-4gDxwOMYZWUMfBjl7WRJbz0w01xmxAhcZUDyF2jWVfvEU204PZ3Y7AdXX7-CEESrgbuS-uGDXMklW-?width=2408&height=1376&cropmode=none" alt="防火牆設定"><br> 按下編輯後會列出所有規則，在最下面新增一個 MySQL port 3306，然後儲存<br> <img data-src="https://dsm01pap006files.storage.live.com/y4mLdtiE_1fwss9MHgYjXweRxDnCZiVswDaexi_8Y91KM-JVydwdt29pszdUwoIbgSm_hXnlH1y8-3mL93q2fCRwfmnYWEda09G7MMUKYzVOKK8D1CD41GLZQoDBHWKzont0vtYdLrVLD1mf76XAM1O0dHp828CTocVbTAqt77iePJcSQ8tNt-ipL9krJd1jZem?width=2408&height=1032&cropmode=none" alt="設定 MySQL"></li><li>MySQL 同意遠端連線<br> 預設是只能連線本機，但軟體是裝在我的電腦上，而不是遠端的主機，所以也要設定 MySQL 連線問題 連線到遠端主機 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -i ~/key.pem ubuntu@<span class="token operator">&lt;</span>IPv<span class="token operator"><span class="token file-descriptor important">4</span>></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> 修改 MySQL 設定檔 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/mysql/mysql.conf.d/mysqld.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> 找到 <code>bind-address</code> ，原本會是 <code>127.0.0.1</code>，只允許本機，改成 <code>0.0.0.0</code> 或者註解掉這行也可以<br> <img data-src="https://dsm01pap006files.storage.live.com/y4muXJECe6tXKTdZargY3Puf_nhNra6cV_3c2B1KtAZzI8kAT6K-rNjN-A9up6aO9JE6arHtYFMBLl3Ys_8DmsseSQWRSjSzUoInN4mIWtLWn7dGk0_SO9J4KmbpQ-Ut5b7BFEvH44hpOrQferqTqYyu5J9g0czooL1GkeGUrhHmSJrzUM-IomyQD9Dtp2aK3h7?width=1917&height=1670&cropmode=none" alt="允許外部連接"> 最後重新啟動 MySQL ，讓設定寫入 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> mysql restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>phpmyadmin 解除個別使用者的遠端連線限制<br> 用 root 連線到 phpmyadmin，到 <code>使用者帳號</code>，點擊 <code>編輯權限</code><br> <img data-src="https://dsm01pap006files.storage.live.com/y4mfv_hg8buRnf-GBShL_zMPOz0DkSf7kErvTLBwqJ5_-lsG_VlnYh3ceyIYSiEuvwQjWCFpNiLarRonbIDzCGwCXPtdCLkmTT6hKwELsqgu7wAW4t3TpZit1hBaq6DUQ0tsttUowm5xzCxvnUuTleRGFnesu3C0ebWpN28McgVHbBg_f8Bsyn2f0HY0fHkwzrg?width=2408&height=2021&cropmode=none" alt="編輯權限"><br> 跳到 <code>登入資訊</code> ，把主機名稱改為任意主機。<br> <img data-src="https://dsm01pap006files.storage.live.com/y4mI5KlKXpxlvV1Cbko1UPT4WnzBUPvzilV5zxmi31ymj4gDM46DuSzqY3z5y0vOxL5F2yYri2Jl3Dbk0HqgoC-axND4ESiX-jzwTScDfqztPKxI69EVbq1HoRdPzb3yJ-hxYTJpe_OZMBfjtTYTThdBc8xeqiHBjzkxEmwcvdtZVyAuN7D4zNwBIaVX4sbLJIh?width=2408&height=1976&cropmode=none" alt="修改登入資訊"><br> 最後回到 mysql CLI 打更新權限 <pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">FLUSH PRIVILEGES<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> 大功告成 QQ，至此所有的封印都解除了，回到 MySQL Workbench 新增一筆新的連線<br> 搭拉 ! 成功<br> <img data-src="https://dsm01pap006files.storage.live.com/y4mTaT_SAlbQeh09auWSIkVUd77ntYREr4HeKgJlWNOrLFIlwNylxz4KD7Vm92HChqkxcI2VLAbv9nNAUIFbNuxbFU9XHsScWWtJ9XxhHbGobfaR9YTYo2IMpWCCj2AujdYS4oaE4mxmwxtX9yTVpDL7kdUVVmJ48ZSRywv8puKRL_po2kuBsXhPEGFDzu-6XIP?width=2735&height=1825&cropmode=none" alt="Workbench 測試連線"></li></ol><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>歷經千辛萬苦終於架好了，沒有想到架站步驟是這麼的複雜，必須突破一層層關卡，像是雖然打開了虛擬主機外部連線問題，但 MySQL 也是要更改權限問題，不然也還是不成功的。</p><p>另外比較印象深刻的大概是買網域的部分，當時挑很久，在思考不同網域名的差別。我才知道網域是有分級的，<code>.shop</code> 這個字尤其價值不斐。不過轉念想想，好的網域名，在使用者輸入更好記，會記住這個網頁的用途，SEO 自然就會比較好。</p><p>再來就是虛擬主機的部分，裡面大多都是我看不懂的東西，大多都是偏向是硬體，因為我本身沒有接觸硬體，之後會想多了解一些…</p><hr><p>參考 : </p><ul><li><a href="https://github.com/Lidemy/mentor-program-2nd-yuchun33/issues/15">部署 AWS EC2 遠端主機 + Ubuntu LAMP 環境 + phpmyadmin)</a></li><li><a href="https://magiclen.org/lamp/">安裝 LAMP Server + phpMyAdmin 在 Linux 系統上輕鬆架設網站 | MagicLen</a></li><li><a href="https://lidemy5thwbc.coderbridge.io/2021/07/27/webserver-set/">網頁伺服器架站流程 (coderbridge.io)</a></li><li><a href="https://drive.google.com/file/d/1ZymwmKb3MaX3F5YMQb77AC_wrUsX_ljS/view">Install phpMyAdmin with Apache (LAMP) on Ubuntu.txt</a> : phpmyadmin 連接 apache 問題</li><li><a href="http://dns-learning.twnic.net.tw/bind/intro6.html">DNS資源紀錄(Resource Record)介紹 (twnic.net.tw)</a></li></ul>]]></content>
    
    
    <summary type="html">紀錄 DIY 架站的歷程</summary>
    
    
    
    <category term="bookreport" scheme="https://blog.rosa.tw/categories/bookreport/"/>
    
    
    <category term="Backend" scheme="https://blog.rosa.tw/tags/Backend/"/>
    
    <category term="MySQL" scheme="https://blog.rosa.tw/tags/MySQL/"/>
    
    <category term="phpMyadmin" scheme="https://blog.rosa.tw/tags/phpMyadmin/"/>
    
    <category term="LAMP" scheme="https://blog.rosa.tw/tags/LAMP/"/>
    
  </entry>
  
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - 宣告提升(III) - let &amp; const 以及 TDZ</title>
    <link href="https://blog.rosa.tw/Frontend/JavaScript/JavaScript-Hoisting-III/"/>
    <id>https://blog.rosa.tw/Frontend/JavaScript/JavaScript-Hoisting-III/</id>
    <published>2022-01-15T08:31:51.000Z</published>
    <updated>2022-02-08T09:07:49.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="let-amp-const-有宣告提升嗎"><a href="#let-amp-const-有宣告提升嗎" class="headerlink" title="let &amp; const 有宣告提升嗎?"></a>let &amp; const 有宣告提升嗎?</h2><ul><li><p>看起來沒有 hoisting</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">--</span><span class="token operator">-</span>result <span class="token operator">:</span> Cannot access <span class="token string">'a'</span> before initialization<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>意思是 a 還未經初始化。<br>照 <code>var</code> 的宣告提升<br>下意識會覺得是 <code>undefined</code> 才對<br>但怎麼也不是 <code>undefined</code> ?  </p></li><li><p>實際上是有提升</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">let</span> a <span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">-</span>result <span class="token operator">:</span> Cannot access <span class="token string">'a'</span> before initialization<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>照理來說在 <code>test</code> 沒找到 a<br>會往 global (Scope Chain) 去找<br>應該是 <code>10</code><br>但是這邊卻是沒有結果<br>代表 <code>let</code> 確實是有提升而且卡住了  </p></li></ul><p>換成 const 也一樣  </p><h2 id="TDZ-暫時性死區"><a href="#TDZ-暫時性死區" class="headerlink" title="TDZ - 暫時性死區"></a>TDZ - 暫時性死區</h2><p>TDZ = Temporal Dead Zone</p><p>在 <strong>「提升之後」</strong> 以及 <strong>「賦值之前」</strong> 這段「期間」，如果你存取它就會拋出錯誤，而這段期間就稱做是 <code>TDZ</code></p><blockquote><p>所以使用 let 或是 const 一開始就要賦值好，以免拋出錯誤  </p></blockquote><p>TDZ 的開始時間<br>進到 function 的那一刻即是 TDZ<br>的開始，直到賦值，才是 TDZ 結束。  </p><hr><p>實例解釋  </p><ul><li><p>TDZ 的起訖點  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment">//TDZ 🚩</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment">// TDZ🪦</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>順序上的問題 : 非空間而是時間的順序  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">fucntion <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// TDZ 🚩</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment">// TDZ 🪦</span><span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">-</span>result <span class="token operator">:</span> Cannot access <span class="token string">'a'</span> before initialization<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>在執行 hello 的時候雖然有提升，但是仍在 a 的 <code>TDZ</code> 裡。</p><p>雖然印出值在宣告的下面<br>以執行(時間)的順序仍在 TDZ 之內。  </p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>let 和 const 提升後並不會初始化成 <code>undefined</code>，必須直到賦值之後才跳脫 TDZ 的範圍，在那之前試圖取值都會跳出錯誤。  </p>]]></content>
    
    
    <summary type="html">了解let &amp; const 的宣告提升以及 TDZ 的意思</summary>
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/Frontend/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/tags/JavaScript/"/>
    
    <category term="hoisting" scheme="https://blog.rosa.tw/tags/hoisting/"/>
    
  </entry>
  
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - 宣告提升(II) - 跟著 JavaScript 引擎發動</title>
    <link href="https://blog.rosa.tw/Frontend/JavaScript/JavaScript-Hoisting-II/"/>
    <id>https://blog.rosa.tw/Frontend/JavaScript/JavaScript-Hoisting-II/</id>
    <published>2022-01-14T03:23:19.000Z</published>
    <updated>2022-02-07T03:36:03.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>從上一篇 <a href="https://meitung473.github.io/RosaBlog/Frontend/JavaScript/JavaScript-Hoisting/">⟬ 筆記 ⟭ JavaScript - 宣告提升(I) - 我以為的以為</a><br>知道有三種東西會做宣告提升<br>但是不太清楚如何運作<br>為了瞭解如何宣告提升之前<br>要問自己為什麼 <strong>需要</strong> 宣告提升？<br>如果沒有宣告提升，JavaScript 不能做到那些事？  </p><h2 id="如果沒有宣告提升-Hoisting-？"><a href="#如果沒有宣告提升-Hoisting-？" class="headerlink" title="如果沒有宣告提升 (Hoisting) ？"></a>如果沒有宣告提升 (Hoisting) ？</h2><ol><li>變數必須先宣告再使用 </li><li>函式必須先宣告再使用<br>在設計階段，會希望將預執行函式名先寫出來，再來補齊函式中間的運作，對於執行的脈絡會更加清晰，如果沒有宣告提升，必須先等完成函式再呼叫，版面上可能就會有凌亂。</li><li>函式做不到互相呼叫 <strong>(非常重要)</strong><br>A 要呼叫 B 時 ，B 根本還沒被創造  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">average</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">&#125;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//1.5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 若沒有宣告提升，是不能執行的<br> 在 <code>average</code> 呼叫 <code>add</code> 時就會出錯  </li></ol><h2 id="JavaScript-的宣告提升怎麼運作？"><a href="#JavaScript-的宣告提升怎麼運作？" class="headerlink" title="JavaScript 的宣告提升怎麼運作？"></a>JavaScript 的宣告提升怎麼運作？</h2><p>了解宣告提升非常重要<br>接下來要了解如何運作？<br>可以來看看 ECMAScript 怎麼說 JavaScript 的運作方式    </p><blockquote><p>ECMAScript 是 JavaScript 的實作守則<br>可以先參考底層是如何被定義的  </p></blockquote><p>主要跟兩個東西有關連<br>一是執行環境 (Execution contexts)<br>二是作用域 (Scope)  </p><h2 id="執行環境-Execution-contexts"><a href="#執行環境-Execution-contexts" class="headerlink" title="執行環境 (Execution contexts)"></a>執行環境 (Execution contexts)</h2><p>Execution contexts 執行環境(以下簡稱 EC)<br>ECMA 的解釋是:  </p><blockquote><p>Evaluation of global code or code using the eval function (15.1.2.1) establishes and enters a new execution context. Every invocation of an ECMAScript code function (13.2.1) also establishes and enters a new execution context, even if a function is calling itself recursively.</p></blockquote><p>剛開始執行前也會生成 global 的 EC<br>每當呼叫函式時也會生成一個新的 EC  </p><p>所以 EC 有兩種  </p><ol><li><strong>Global Execution contexts</strong><br> 全域物件會在這邊產生<br> 產生的有包含最外層的宣告變數、函式、還有<code>this</code><br> 而 this 在不同的環境會有不同的值  <ul><li>在瀏覽器上，是 <code>window</code></li><li>在 node.js 上， 是一種 global 物件   </li></ul></li><li><strong>Function Execution contexts</strong><br> 呼叫 function 時形成，除了內部中宣告變數、函式會產生外，如果有參數的話，<strong>參數</strong> 也會被算進儲存物件中。<br> function 中的儲存物件叫 <strong>Arguments Object</strong>，function 執行完後都會消失。 <blockquote><p>閉包除外，閉包更像是回收的機制，雖然已經執行完畢，但是儲存的物件仍然存在且外部可以使用。   </p></blockquote></li></ol><p>EC 會層層堆疊 (Execution contexts stack)，最上層的是 <strong>正在執行</strong> 的函式，函式執行結束後就會被 pop 掉。</p><p>因為 JavaScript 是單線程(同步)，在執行時會一行行往下跑，跑完的 function 就會釋放記憶體空間。  </p><ul><li>堆疊 (EC stack)<br><img data-src="https://i.imgur.com/cUWijRw.gif" alt="function 包 function EC 示意圖">  </li></ul><h3 id="EC-儲存的狀態物件"><a href="#EC-儲存的狀態物件" class="headerlink" title="EC 儲存的狀態物件"></a>EC 儲存的狀態物件</h3><p>上面不斷提到儲存物件，到底是存在哪裡？<br>又存了什麼？   </p><p>EC 會包含三種的狀態物件  </p><ol><li><code>Lexical Environment</code> (詞語環境): 在 <strong>創造</strong> 階段就已經宣告的變數或函式陳述式所存放的環境，看的是程式碼的物理位置。</li><li><code>Variable Environment</code> (變量環境): 跟 Lexical Environment 很像，已經宣告的變數或函式陳述式在 <strong>執行</strong> 階段所存放的環境，這個環境跟實際在執行程式的物理位置也有關係。</li><li>ThisBinding : <code>this</code> 關鍵字。   </li></ol><p>ECMAScript 新版的定義更不一樣 @@ ，這邊先已 ECMAScript 262 5.1 為主。  </p><p>可以注意到 </p><blockquote><p>The LexicalEnvironment and VariableEnvironment components of an execution context are always Lexical Environments.<br>When an execution context is created its LexicalEnvironment and VariableEnvironment components initially have the same value.</p></blockquote><p>在最初還沒跑程式碼的時候這兩個是一樣的， <code>Lexical Environment = Variable Environment</code><br>這邊其實我有點搞混了，既然是一樣的，那複製母體是誰 ?<br><a href="http://dmitrysoshnikov.com/ecmascript/es5-chapter-3-2-lexical-environments-ecmascript-implementation/#lexical-environment">這篇文章</a> 給了很好的解釋  </p><blockquote><p>Variable Environment 是 Lexical Environment 的複製藍圖。<br>這也會解釋到 Scope Chain 的原理</p></blockquote><h3 id="Lexical-Environments"><a href="#Lexical-Environments" class="headerlink" title="Lexical Environments"></a>Lexical Environments</h3><p><code>10.2 Lexical Environments</code>  </p><blockquote><p>A Lexical Environment consists of an <code>Environment Record</code> and a possibly null reference to an outer Lexical Environment.     </p></blockquote><p>這段可以知道完整的 Lexical Environments 其實還有一個外部參考環境。<br>這個外部環境，其實跟 scope 很有關係，後面會提到為什麼有 <code>scope chain</code> 的概念，正是因為還有外部參考環境，在內部找不到的值，可以往外部尋找。  </p><p>根據這段可以來看 <strong>外部參考環境</strong> 的定義  </p><blockquote><p>The outer environment reference is used to model the logical nesting of Lexical Environment values. The outer reference of a (inner) Lexical Environment is a reference to the Lexical Environment that logically surrounds the inner Lexical Environment.</p></blockquote><p>簡單來說外部參考 (reference) 是 Lexical Environment 指向的鄰近的 Lexical Environment。<br>對 global 來說是最外層，所以是外部參考環境是 <code>null</code>。   </p><p>再說一次 Lexical Environment 指的是程式碼物理的位置。<code>這邊的外部參考環境跟函式在哪裡呼叫無關，跟程式碼放在哪裡關。</code></p><p>往下繼續看…</p><blockquote><p>An <code>Environment Record</code> records the identifier bindings that are created within the <code>scope</code> of its associated Lexical Environment.</p></blockquote><p>從這邊可以知道 Scope 是包含 Environment Record 紀錄宣告的綁定的值，而且跟 Lexical Environments 有相關。<br>(恕我的破破英文翻譯)    </p><p>不過這個 <code>Environment Record</code> 是什麼咧？ </p><h3 id="Environment-Records"><a href="#Environment-Records" class="headerlink" title="Environment Records"></a>Environment Records</h3><p><code>10.2.1 Environment Records</code>  </p><blockquote><p>For specification purposes Environment Record values can be thought of as existing in a simple object-oriented hierarchy where Environment Record is an abstract class with two concrete subclasses, <code>declarative environment record</code> and <code>object environment record</code>. </p></blockquote><p>在 ECMAScript 262 5.1 是叫  <code>Environment Record</code> 可以想像成一般的 object，會記錄不同類型的變數以及函式<br>。<br><code>declarative environment record</code> 是宣告環境紀錄來仔細看一下包含哪些東西。</p><h3 id="Declarative-Environment-Records"><a href="#Declarative-Environment-Records" class="headerlink" title="Declarative Environment Records"></a>Declarative Environment Records</h3><p><code>10.2.1.1 Declarative Environment Records</code></p><blockquote><p>Each declarative environment record is associated with an ECMAScript program scope containing variable and/or function declarations. A declarative environment record binds the set of identifiers defined by the declarations contained within its <code>scope</code>.  </p></blockquote><p>在定義的部分，scope 跟 Declarative Environment Records 紀錄的變數以及函式陳述式有關。<br>我們把關係一層層剝開，發現 scope 指的是 EC 中的環境紀錄宣告變數與函式的總和範圍。</p><p>我試著描出上面說的架構  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">.</span><span class="token constant">EC</span><span class="token punctuation">&#123;</span>Lexical Environments<span class="token operator">:</span><span class="token punctuation">&#123;</span>Environment Records<span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token punctuation">[</span>ref<span class="token punctuation">.</span>outerEnv<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>surroundEC<span class="token punctuation">.</span>Lexical Environments<span class="token operator">:</span><span class="token punctuation">&#123;</span>Environment Records<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>Variable Environment<span class="token operator">:</span><span class="token punctuation">&#123;</span>Environment Records<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不過新版已經不再是以 Lexical Environments 來說明，而是 Environment Records。(這有待專研 @@)    </p><h2 id="作用域-Scope"><a href="#作用域-Scope" class="headerlink" title="作用域 (Scope)"></a>作用域 (Scope)</h2><p>作用域 (Scope) 也就是 <strong>變數生存的範圍</strong><br>外部的不能取內部的值，內部可以取外部的值<br>會依循作用域鏈 (Scope Chain) 一層層往上找 </p><p>Scope 有兩種</p><ol><li>Global Level Scope : 全域作用域<br>這邊的值在哪裡都可以存取，也是最外層的。</li><li>Local Level Scope : 區域作用域<ol><li>Function Level Scope<br><code>var</code> 的變數生存範圍就是以 function 為限，如果在 function 以外來取得在 function 宣告的 var 變數，會錯誤。</li><li>Block Level Scope<br> 在 ES6 中，<code>let</code> 跟 <code>const</code><br> 的生存範圍是以 <code>&#123; &#125;</code>為限，也就是大括號括起來的 block，脫離 block 要取得值就會失敗。  </li></ol></li></ol><p>這邊先不討論 let 跟 const。<br>回到 scope chain 上，我們知道跟 <code>外部參考環境</code> 有關，上面有提到 <code>外部參考環境</code> 其實就是鄰近的 Lexical Environment。  </p><p>綜合上面的概念， 在 function 中的外部環境 Lexical Environment 又是從<br>Variable Environment 複製過來的，所以 function 呼叫時的 scope 其實就是來自正在上一層 EC 傳入的 Variable Environment  </p><p>在 <code>13 Function Definition</code> 這個定義中可以找到結果    </p><blockquote><p>Return the result of creating a new Function object as specified in 13.2 with parameters specified by FormalParameterListopt, and body specified by FunctionBody. <code>Pass in the VariableEnvironment of the running execution context as the Scope.</code> Pass in true as the Strict flag if the FunctionDeclaration is contained in strict code or if its FunctionBody is strict code.</p></blockquote><p>講起來真的蠻抽象的，來看看例子。</p><h3 id="範例一"><a href="#範例一" class="headerlink" title="範例一"></a>範例一</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//2.</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> c<span class="token operator">=</span><span class="token number">2</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//3.</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//1.</span><span class="token keyword">var</span> c<span class="token operator">=</span><span class="token number">3</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>答案是多少呢？</p><p>答案是 </p><ol><li><code>undefined</code></li><li>3</li><li>2</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">b<span class="token punctuation">.</span><span class="token constant">EC</span><span class="token punctuation">&#123;</span>Lexical Environments<span class="token operator">:</span><span class="token punctuation">&#123;</span>Environment Records<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token punctuation">[</span>ref<span class="token punctuation">.</span>outerEnv<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>global<span class="token punctuation">.</span><span class="token constant">EC</span><span class="token punctuation">.</span>Variable Environment<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>Variable Environment<span class="token operator">:</span><span class="token punctuation">&#123;</span>Environment Records<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>a<span class="token punctuation">.</span><span class="token constant">EC</span><span class="token punctuation">&#123;</span>Lexical Environments<span class="token operator">:</span><span class="token punctuation">&#123;</span>Environment Records<span class="token operator">:</span><span class="token punctuation">&#123;</span>c<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token punctuation">[</span>ref<span class="token punctuation">.</span>outerEnv<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>global<span class="token punctuation">.</span><span class="token constant">EC</span><span class="token punctuation">.</span>Variable Environment<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>Variable Environment<span class="token operator">:</span><span class="token punctuation">&#123;</span>Environment Records<span class="token operator">:</span><span class="token punctuation">&#123;</span>c <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>global<span class="token punctuation">.</span><span class="token constant">EC</span><span class="token punctuation">&#123;</span>Lexical Environments<span class="token operator">:</span><span class="token punctuation">&#123;</span>Environment Records<span class="token operator">:</span><span class="token punctuation">&#123;</span>b <span class="token operator">:</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>a <span class="token operator">:</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>c <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token punctuation">[</span>ref<span class="token punctuation">.</span>outerEnv<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>Variable Environment<span class="token operator">:</span><span class="token punctuation">&#123;</span>Environment Records<span class="token operator">:</span><span class="token punctuation">&#123;</span>c <span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一個 console 是 <code>undefined</code>，因為 global EC 建立時，環境 (Lexical Environments) 將變數、函式陳述式的宣告先存放起來，會長這樣   </p><ol><li>b : func()</li><li>a : func()</li><li>c : undefined  </li></ol><p>Variable Environment 跟 Lexical Environments 還沒執行時是一樣的，執行後 Variable Environment 就會有變化。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">global<span class="token punctuation">.</span><span class="token constant">EC</span><span class="token punctuation">&#123;</span>Lexical Environments<span class="token operator">:</span><span class="token punctuation">&#123;</span>Environment Records<span class="token operator">:</span><span class="token punctuation">&#123;</span>b <span class="token operator">:</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>a <span class="token operator">:</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>c <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token punctuation">[</span>ref<span class="token punctuation">.</span>outerEnv<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>Variable Environment<span class="token operator">:</span><span class="token punctuation">&#123;</span>Environment Records<span class="token operator">:</span><span class="token punctuation">&#123;</span>b <span class="token operator">:</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>a <span class="token operator">:</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>c <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>當 <code>var c =3</code>，Variable Environment 中的 c 才會賦值 3。  </p><p>可以看到 b 即使在 a 函式中被呼叫，b 的外部參考環境其實是 global，因為這跟 Lexical Environment 有關。</p><h3 id="範例二"><a href="#範例二" class="headerlink" title="範例二"></a>範例二</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> c<span class="token operator">=</span><span class="token number">2</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//2.</span>c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//3.</span><span class="token punctuation">&#125;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//1.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>答案是   </p><ol><li><code>c is not defined</code></li><li>2</li><li>3</li></ol><p>a 的外部參考環境 是 global。<br>b 的外部參考環境是 a + global，因此 c 是 a 函式中的變數，而<code>c=3</code>，沒有重新宣告下，b 函式找不到 c，所以是找 a 函式中的 c，並改變成 <code>c=3</code>。</p><p>如果把 b 函式中的 c =3 ，改為 <code>var c=3</code>，答案會變為  </p><ol><li><code>c is not defined</code></li><li><code>undefined</code></li><li>2  </li></ol><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><ol><li>Exection Context : 執行上下文，會形成 Exection Context Stack，最下層是 global，呼叫到 function 就會再往上疊加 EC</li><li>Lexical Environment : <strong>創造</strong> 階段儲存的環境</li><li>Variable Environment : <strong>執行</strong> 階段儲存的環境</li><li>Environment Records : 像是一個物件，儲存宣告的變數、函式陳述式，以及函式中的參數。</li><li>Scope : 作用域，變數生存的範圍。</li><li>Scope Chain : 作用域鏈，由 EC 的 Lexical Environment，以及其外部的 Lexical Environment 組成，其外部的 Lexical Environment 就是上一層 EC 的 Variable Environment 複製過來的。</li></ol><h2 id="超級比一比"><a href="#超級比一比" class="headerlink" title="超級比一比"></a>超級比一比</h2><p>了解 Scope 後，就要來了解如果有相同名稱的三個變數，Javascript 會如何來判斷順序，像是 function a、變數 a、參數 a ，三個都同名，那誰會被蓋掉誰呢 ?<br>重複的宣告又會怎麼處理呢 ?<br>可以根據 <a href="https://262.ecma-international.org/5.1/#sec-10.5">10.5 Declaration Binding Instantiation</a> 規則來看</p><blockquote><p>10.5.4 在呼叫的 function 裡面  </p></blockquote><ol><li>如果有同名的 function、參數、變數，function 會先被儲存</li><li>如果內部有同名的參數與變數<ol><li>引數的數量 &gt; 1，內部變數初始值會變成 undefined，變數如果有重新賦值，可能會是第 n 個參數的值</li><li>如果有傳入引數，那麼傳入的引數就是函式的參數初始值</li><li>如果沒有傳入引數，但有參數，參數的初始值是 undefined，再依照內部執行程式碼賦值</li></ol></li></ol><blockquote><p>10.5.5 函式陳述式    </p></blockquote><p>a~d : 如果有函式被重複宣告，以後面新宣告的函式為主</p><p>e : 在 global 會是全域的物件<br>   宣告變數跟宣告的函式名同名，如果變數宣告了但沒賦值，同名的就會是先儲存 function 物件</p><p>我寫大概的意思而已，文件上定義的很明確。  </p><blockquote><p>10.5.8 宣告或未宣告的變數</p></blockquote><ol><li>已宣告的變數，後面重複宣告都已第一個為宣告主 (dn -&gt; d)</li><li>已宣告且賦值的話，重複宣告又賦值以後面的值為主 (值 = dn)</li><li>未宣告變數  <ol><li>往上找 Scope Chain 有宣告的變數，新賦值為主</li><li>如果往上找 Scope Chain 沒有宣告的變數，就會直接報錯</li></ol></li></ol><p>這邊只列出幾個，原諒我破破的英文翻譯，大概是這樣<br>10.5 列出各種會碰到的情況，只是這邊有很多代名詞，要再往回看一下定義。</p><h2 id="狀況劇"><a href="#狀況劇" class="headerlink" title="狀況劇"></a>狀況劇</h2><p>雖然上面大約了解內部執行與儲存的狀況，試著來驗證常見的狀況是不是這樣</p><h3 id="重複宣告變數"><a href="#重複宣告變數" class="headerlink" title="重複宣告變數"></a>重複宣告變數</h3><p>先來個簡單的重複宣告的問題，有變數以及函式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span><span class="token number">1</span><span class="token keyword">var</span> a<span class="token keyword">var</span> a console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>結果應該要等於 1，不會是 undefined<br>根據 ECMA 寫的宣告有賦值的話，以 d 為主<br>執行一下是 <code>a=1</code></p><h3 id="重複宣告函式"><a href="#重複宣告函式" class="headerlink" title="重複宣告函式"></a>重複宣告函式</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi!'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hey!'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>結果應該要等於 hey!，不會是 hi!<br>函式重複宣告是以 fn 為主<br>執行一下是 <code>hey!</code>  </p><p>跟著引擎發動沒錯吧 :D<br>再來 !</p><h3 id="global-同名變數-v-s-function"><a href="#global-同名變數-v-s-function" class="headerlink" title="global 同名變數 v.s function"></a>global 同名變數 v.s function</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span><span class="token number">10</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以拆做兩個步驟，第一個是創造之前，因為 var a 一開始是 undefined，但是 a 會被優先儲存成 function 物件<br>直到執行階段，<code>a =10</code>，a 這個物件被賦值為數字 10，a 已經不是 function 物件，被呼叫時會報錯</p><p>但是如果是這個情況</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> aconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 這個結果</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根據上面的步驟跟規則，結果會是 <code>[function a]</code>，印出 function 本身</p><h3 id="function-內同名-function-v-s-參數"><a href="#function-內同名-function-v-s-參數" class="headerlink" title="function 內同名 function v.s 參數"></a>function 內同名 function v.s 參數</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根據規則， function 內部如果同名，宣告的 function 會先優先，所以結果是 <code>[function a]</code>，印出 function 本身</p><h3 id="function-內同名-變數-v-s-參數"><a href="#function-內同名-變數-v-s-參數" class="headerlink" title="function 內同名 變數 v.s 參數"></a>function 內同名 變數 v.s 參數</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> a  a<span class="token operator">+=</span><span class="token number">2</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正當你以為 <code>a = undefined 或是 NaN</code>，不，結果是 458 ，根據規則，參數有傳入引數就是該值，而且變數 a 已存在，所以 <code>var a</code> 並不會覆蓋，由此可知參數的順序比變數來的優先。  </p><p>如果沒有傳入參數呢 ?  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  a<span class="token operator">+=</span><span class="token number">2</span><span class="token keyword">var</span> a  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一個是 undefined，來自參數 a 已宣告但是為賦值<br>第二個 a 是 <code>NaN</code>，是因為 undefined +2 ，本來就不是數字</p><blockquote><p>由此可知 function 內的提升順序，<strong>function &gt; 參數 &gt; 變數</strong><br>Global 的提升順序，<strong>function &gt; 變數</strong></p></blockquote><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>如果有誤歡迎告訴我，有時候寫到有點茫了…<br>整理的過程中也讓我更清楚知道，變數、參數、函式為什麼會宣告提升，以及怎麼被提升，基本上遇到該類型的題目保持一樣的邏輯跟引擎一起動就好 :D  </p><p>這篇尚未提及 ES6 的 let 跟 const 宣告提升問題，下一篇會做討論</p><hr><p>參考 :</p><ol><li><a href="https://262.ecma-international.org/5.1/#sec-10.3">ECMAScript 262.5.1</a>    </li><li><a href="https://www.udemy.com/course/javascriptjs/">JavaScript 全攻略：克服 JS 的奇怪部分</a></li><li><a href="http://dmitrysoshnikov.com/ecmascript/es5-chapter-3-2-lexical-environments-ecmascript-implementation/#structure-of-execution-context">dmitrysoshnikov ES5 關於 EC 的結構細節</a>  </li></ol>]]></content>
    
    
    <summary type="html">宣告提升背後的原理以及規則</summary>
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/Frontend/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/tags/JavaScript/"/>
    
    <category term="hoisting" scheme="https://blog.rosa.tw/tags/hoisting/"/>
    
  </entry>
  
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - 宣告提升(I) - 我以為的以為</title>
    <link href="https://blog.rosa.tw/Frontend/JavaScript/JavaScript-Hoisting/"/>
    <id>https://blog.rosa.tw/Frontend/JavaScript/JavaScript-Hoisting/</id>
    <published>2022-01-13T13:43:50.000Z</published>
    <updated>2022-03-17T13:45:49.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>宣告提升 (Hoisting) 在 JavaScript 中不得不知<br>究竟 JavaScript 搞了什麼鬼<br>導致你認為的值不是那個值捏 !<br>其實這跟 JavaScript 如何運作也有關係<br>不過先從最簡單的概念開始吧 ! :O</p><h2 id="何謂宣告提升？"><a href="#何謂宣告提升？" class="headerlink" title="何謂宣告提升？"></a>何謂宣告提升？</h2><p>其實我覺得很抽象<br>如果單看程式碼會不知道哪裡被提升<br>以及怎麼被提升？  </p><p>所謂的提升<br>其實是 JavaScript 底層運作的機制<br>必須了解執行環境 (Execution contexts) 跟 作用域 (Scope)<br>再根據作用域鏈 (Scope Chain) 來看的<br>不過關於這些東西慢慢地來說<br>可以先透過幾個例子來了解宣告提升    </p><h3 id="變數的宣告提升"><a href="#變數的宣告提升" class="headerlink" title="變數的宣告提升"></a>變數的宣告提升</h3><p>這邊暫不討論 ES6 中的 <code>let</code> 與 <code>const</code><br>以 ES5 的宣告變數 <code>var</code> 為例</p><p>基礎題</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">--</span><span class="token operator">-</span>result <span class="token operator">:</span> <span class="token keyword">undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看成 : </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>JavaScript 幫我們在最上層補上了一個定義變數 a<br>又因為 JavaScript 是一行行往下讀<br>所以當執行到 console.log(a)<br>a 是定義了但沒有值<br>所以是 <code>undefined</code>  </p><p>那有宣告跟沒宣告的差別？  </p><p>這樣什麼都沒有就會出錯</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">-</span>result <span class="token operator">:</span> a is not defined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所以通常變數的宣告會在最上面<br>除了版面不會太凌亂以外<br>也是避免說忘記宣告<br>尤其是在 function 裡頭  </p><h3 id="常見問題"><a href="#常見問題" class="headerlink" title="常見問題"></a>常見問題</h3><p>function 裡的變數如果未宣告會如何？<br>可以看下面的例子  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">-</span>result <span class="token operator">:</span> <span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>起初我以為 a 會是 <code>is not defined</code><br>或是 <code>undefined</code><br>但是 test 執行時先把變數 a 給提升<br>並在函式內把 a 賦值 30<br>也就是這個 a 提升已經到 global 了   </p><blockquote><p>在 function 裡都沒有宣告<br>但有賦值，就會在 global 的地方宣告該變數<br>並且 <code>根據 Scope Chain</code> 往上找<br>不過一般來說不會建議沒有宣告就賦值。</p></blockquote><h3 id="function-的宣告提升"><a href="#function-的宣告提升" class="headerlink" title="function 的宣告提升"></a><code>function</code> 的宣告提升</h3><p>除了變數的提升<br>其實還有 function 也會提升  </p><p>函式陳述式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">-</span>result <span class="token operator">:</span> <span class="token number">123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般來說要 <strong>使用之前要先宣告</strong><br>但 function 可以先使用再宣告<br>因為會宣告提升    </p><p>可以看成把 <code>function</code> 放到呼叫之前<br>其他程式語言是沒這樣的<br>在 JavaScript 想呼叫隨時都可以呼叫 👌<br>我是覺得很奇妙<br>但一方面覺得這樣的設計在版面上可以更易讀   </p><p>函式表達式  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">-</span>result <span class="token operator">:</span> <span class="token number">123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>透過表達式宣告一個變數將 function 存起來<br>這邊的 function 是一個沒有名字的匿名函式<br>一般來說會這樣執行  </p><p>如果是宣告變數把函式存起來<br>提早先呼叫函式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">-</span>result <span class="token operator">:</span> test is not a <span class="token keyword">function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>咦！不是 function 隨 call 隨用嗎？<br>如果是函式表達式可以把整個分為兩塊  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> test<span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是先宣告 test 再賦值<br>由此可知宣告提升並不會連賦值都一起提升  </p><p>再來看看有參數的函式呢？</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我知道！是 <code>undefined</code><br>因為 a 會做宣告提升<br>可以看成這樣 </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a<span class="token punctuation">;</span> <span class="token comment">//undefined</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>結果不對，其實是 <code>1</code><br>這個 1 並不是來自函式的 <code>a=1</code><br>而是參數的 <code>1</code><br>由此可以知道函式裡有參數的話<br>其實參數也會做宣告提升    </p><p>至於提升的順序為何？<br>如何提升？<br>後面會再提到 :D</p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><ol><li><code>var</code> 會做宣告提升  </li><li><code>函式陳述式</code> 會做宣告提升  </li><li><code>函式表達式</code> 是屬於賦值 (等號右邊)，不會做宣告提升  </li><li>函式的 <code>參數</code> 也會做宣告提升</li></ol><p>這篇了解哪些會做宣告提升<br>並且知道賦值的值並不會一起提升  </p><hr><p>參考:</p><ul><li><a href="https://blog.techbridge.cc/2018/11/10/javascript-hoisting">我知道你懂 hoisting，可是你了解到多深？</a></li></ul>]]></content>
    
    
    <summary type="html">從簡單例子看何謂宣告提升</summary>
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/Frontend/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/tags/JavaScript/"/>
    
    <category term="hoisting" scheme="https://blog.rosa.tw/tags/hoisting/"/>
    
  </entry>
  
</feed>
