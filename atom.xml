<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>健忘雜記</title>
  
  <subtitle>紀錄學習與生活</subtitle>
  <link href="https://blog.rosa.tw/atom.xml" rel="self"/>
  
  <link href="https://blog.rosa.tw/"/>
  <updated>2022-04-19T04:33:33.761Z</updated>
  <id>https://blog.rosa.tw/</id>
  
  <author>
    <name>Rosa Hong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - Prototype 物件導向 (IV) 原型的繼承</title>
    <link href="https://blog.rosa.tw/Frontend/JavaScript/JavaScript-Object-oriented-programming-04/"/>
    <id>https://blog.rosa.tw/Frontend/JavaScript/JavaScript-Object-oriented-programming-04/</id>
    <published>2022-04-19T04:33:33.000Z</published>
    <updated>2022-04-19T04:33:33.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇知道原型與原型鏈的內容<br>如果我們要讓東西繼承，除了透過 new 建立物件直接幫我們繼承之外<br>還有 <code>Object.setPrototypeOf</code> 以及 <code>Object.create()</code>  </p><span id="more"></span>  <h2 id="原型如何繼承"><a href="#原型如何繼承" class="headerlink" title="原型如何繼承 ?"></a>原型如何繼承 ?</h2><ol><li><code>Object.setPrototypeOf(&lt;繼承者&gt;,&lt;被繼承者&gt;)</code> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span> person2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><code>Object.create(proto,屬性物件)</code> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Person 物件</span><span class="token keyword">var</span> Person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'Default_Name'</span><span class="token punctuation">,</span>  <span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Hi, I'm "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 透過 Object.create() 將 Person 作為原型物件來建立一個新的物件</span><span class="token keyword">var</span> p <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 沒有 this.name</span>p<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// "Hi, I'm Default_Name"</span>p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Rosa'</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// "Hi, I'm Rosa"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="Object-setPrototypeOf"><a href="#Object-setPrototypeOf" class="headerlink" title="Object.setPrototypeOf()"></a>Object.setPrototypeOf()</h2><p>上一篇我們提到 <code>[[Prototype]]</code> 是隱藏屬性<br>ES5 之前是使用 <code>__proto__</code>，ES6 新增 <code>getPrototypeOf()</code> 與 <code>setPrototypeOf()</code> 讓我們可以直接改變物件的 prototype    </p><h3 id="in-某屬性是否可以透過這個物件存取"><a href="#in-某屬性是否可以透過這個物件存取" class="headerlink" title="in  : 某屬性是否可以透過這個物件存取"></a>in  : 某屬性是否可以透過這個物件存取</h3><p>我們知道物件的屬性或方法不一定是本身物件的<br>而是來自原型鏈往上找到的<br>如此一來，建構物件就能使用原型鏈上的屬性<br>那怎麼確定能存取到呢 ?<br>沒錯，就是透過 <code>in</code> !  </p><blockquote><p>屬性名稱必須是「字串」   </p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person2 <span class="token operator">=</span><span class="token punctuation">&#123;</span>b <span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">,</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"a"</span> <span class="token keyword">in</span> person1<span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"b"</span> <span class="token keyword">in</span> person1<span class="token punctuation">)</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要讓 person1 也能讀取到 b 就必須改變其原型<br>可以透過 <code>Object.setPrototypeOf()</code> 直接改變<br>不過建議非必要不要直接改變物件的 prototype  </p><h3 id="Object-setPrototypeOf-1"><a href="#Object-setPrototypeOf-1" class="headerlink" title="Object.setPrototypeOf()"></a>Object.setPrototypeOf()</h3><p><code>Object.setPrototypeOf(&lt;繼承者&gt;,&lt;被繼承者原型&gt;)</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span>person2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>JavaScript 的原型物件是物件內部屬性，<strong>無法直接存取</strong> (通常標示為 <code>[[Prototype]]</code>)，但是可以透過 setPrototypeOf 指定物件之間的原型關係</p><blockquote><p>原型繼承的規則裡，<strong>同一個物件無法指定兩種原型物件</strong>。</p></blockquote><p>試著去存取「不存在」的屬性時，那麼 JavaScript 就會往它的 <code>[[Prototype]]</code> 原型物件去尋找 (prototype chain)</p><p>讓 <code>person1</code> 同時有 b 也有 c 屬性</p><blockquote><p>讓 b 去繼承 c，a 再繼承 b，就能同時擁有 b 與 c</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person2 <span class="token operator">=</span><span class="token punctuation">&#123;</span>b <span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>c <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>person2<span class="token punctuation">,</span>person3<span class="token punctuation">)</span>Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span>person2<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token comment">// 5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"c"</span> <span class="token keyword">in</span> person1<span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="hasOwnProperty-是否為物件本身的方法或屬性"><a href="#hasOwnProperty-是否為物件本身的方法或屬性" class="headerlink" title="hasOwnProperty() 是否為物件本身的方法或屬性"></a>hasOwnProperty() 是否為物件本身的方法或屬性</h3><p>有些屬性與方法是來自 prototype 繼承的<br>要確定是不是屬於自己本身用 <code>hasOwnProperty</code><br><code>objself.hasOwnProperty(&lt;property&gt;)</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person2 <span class="token operator">=</span><span class="token punctuation">&#123;</span>b <span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">,</span><span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span>person2<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token comment">// 2</span><span class="token comment">// 屬性 b 並非建立於 person1 物件中，而是透過繼承的方式取得的 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h2><p>新建物件後的 <code>[[Prototype]]</code> 就會是我們所指定的那個原型物件。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> rosa <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">creat</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rosa<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// constructor 的 prototype</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也可以是 <code>null</code>，這樣就會變成非常一般的物件 (“Very plain” objects)<br>不帶有任何 prototype 甚至是 <code>Object.prototype</code> </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//Error</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment">// false</span>conosle<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">//非常空的物件</span>obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">// 還是可以給予屬性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// &#123;a:2&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// ['a']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但並不代表 Object 有關的方法都不能呼叫<br>而是要看方法是否在 prototype 裡<br>像是 Object.keys 依然可以使用</p><h3 id="造一個-Object-create"><a href="#造一個-Object-create" class="headerlink" title="造一個 Object.create()"></a>造一個 Object.create()</h3><p><code>Object.create()</code> 簡單實作</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function-variable function">create</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">proto</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> proto<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>透過一個封裝過的建構式建構出來的物件，並把 <code>prototype</code> 指向作為參數的 <code>proto</code>。</p><h2 id="Object-create-v-s-new"><a href="#Object-create-v-s-new" class="headerlink" title="Object.create() v.s new ?"></a>Object.create() v.s new ?</h2><p>兩個都是建立物件，哪裡不一樣 ?   </p><blockquote><p><code>new</code> operator 跟 <code>Object.create</code> 的差別在於會不會執行 constructor</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 建立的時候，也印出 hi</span><span class="token keyword">let</span> b <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span> <span class="token comment">// 指是建立了而已</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="https://zh.javascript.info/prototype-methods#very-plain">原型方法，没有 <strong>proto</strong> 的对象</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10194356">重新認識 JavaScript: Day 25 原型與繼承</a></li><li><a href="https://medium.com/%E6%89%8B%E5%AF%AB%E7%AD%86%E8%A8%98/javascript-new-operator-implementation-8c0d15f2b899">new operator — JavaScript | 為了瞭解原理，那就來實作一個 new 吧！</a></li><li><a href="https://blog.csdn.net/blueblueskyhua/article/details/73135938">你不知道的javascript之Object.create 和new区别</a> </li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上一篇知道原型與原型鏈的內容&lt;br&gt;如果我們要讓東西繼承，除了透過 new 建立物件直接幫我們繼承之外&lt;br&gt;還有 &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; 以及 &lt;code&gt;Object.create()&lt;/code&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/Frontend/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - Prototype 物件導向 (III) 原型 &amp; 原型鏈</title>
    <link href="https://blog.rosa.tw/Frontend/JavaScript/JavaScript-Object-oriented-programming-03/"/>
    <id>https://blog.rosa.tw/Frontend/JavaScript/JavaScript-Object-oriented-programming-03/</id>
    <published>2022-04-19T04:33:30.000Z</published>
    <updated>2022-04-19T04:37:14.760Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JavaScript 的核心就在原型 !<br>原型使得物件都能使用在原型鏈上的屬性及方法<br>本身物件也可以再擴充<br>透過本篇了解原型的使用方法  </p><span id="more"></span><h2 id="什麼是-prototype"><a href="#什麼是-prototype" class="headerlink" title="什麼是 prototype ?"></a>什麼是 prototype ?</h2><p><img data-src="https://dsm01pap006files.storage.live.com/y4mZUP0lakeV0ZyTOBA3FOhGoj0nLq4_-h6RClQix2hTtsj-YL9kg-RwmOfya_emwZ1jekhk9jIrt-JrTQQfyiPEwOfYlVWWxlFZHdaAgkONuvg-kxkJgmo67BaKWfhEePd-7sT21E5ITCGSdla3HTIiK8NillkQBfzy2mTCrs5ZtISAl-h5eV-JiE6ySo075Ow?width=946&height=563&cropmode=none" alt="prototype"><br>參考圖 : <a href="https://ithelp.ithome.com.tw/articles/10194356">重新認識 JavaScript: Day 25 原型與繼承</a></p><p>從 01 篇知道 prototype 可以讓不同的物件共享原型的同一個方法或屬性<br>prototype 就像是從 function 產生的集裝箱<br>讓 function 建立出來的物件都可以拿到同樣的東西  </p><blockquote><p><strong>函式也是物件</strong>，所以可以透過 prototype 來擴充每一個透過這個函式所建構的物件</p></blockquote><p>好像難以連結，不過我們時時刻刻都在使用 prototype 的概念<br>有想過為什麼基本型別的值 (number、string、bool) 可以 <strong>像 object 一樣呼較方法獲取到屬性</strong>呢 ?</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span>length <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>沒錯，就是透過 prototype 原型提供的方法來繼承<br>在 JavaScript 呼叫方法或屬性之前，會透過基本型別包裹器 (Primitive Wrapper)<br>被轉型為該類別的「物件」，由對應的物件提供的方法是透過原型鏈 (prototype chain)<br>讓我們可以對基本型別的值呼叫方法  </p><ul><li>類似這樣  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// str.length 模擬過程</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span> <span class="token comment">// 變成物件</span>str<span class="token punctuation">.</span>length <span class="token comment">// 拿到屬性</span>str <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 銷毀</span>str <span class="token operator">=</span> <span class="token string">'Hello'</span> <span class="token comment">// 恢復成基本型別</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="prototype-怎麼來"><a href="#prototype-怎麼來" class="headerlink" title="prototype 怎麼來 ?"></a>prototype 怎麼來 ?</h2><p><strong>函式建立時會自動產生 prototype 屬性</strong>。<br>產生的物件並”不”代表物件的 prototype 屬性就是這個函式的原型物件<br>而是透過 <code>new</code> 出來的物件會有 <code>[[Prototype]]</code> 的隱藏屬性<br>是指 <strong>建構式</strong> 的 prototype    </p><blockquote><p><code>constructor.prototype</code>  </p></blockquote><p>上面的敘述很令人混亂對吧 ?<br>先舉個例子  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> rosa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Rosa'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rosa<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Rosa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>rosa</code> 是從 Person 建構出來的物件  </p><blockquote><p>所以 rosa 的原型是 Person</p></blockquote><p>回到第一句話<br><strong>函式建立時會自動產生 prototype 屬性</strong></p><p>對著 <code>Person</code> 函式取 prototype ，確實是有的   </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// Person 本身</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>prototype 讓 rosa 可以直接拿到 <code>Person</code> 裡面的方法 (getName)   </p><p>那第二句是什麼意思 ?<br>試著讓 <code>rosa</code> 呼叫 <code>toString()</code>，但是 Person 並沒有這個方法呀 ?!<br>我們說過 rosa 的原型是 Person  </p><blockquote><p>但 <strong>不</strong> 代表建構出來的物件 (rosa) 的 prototype 屬性就是這個函式 (Person) 的原型物件       </p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">lgo</span><span class="token punctuation">(</span>rosa<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Object]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>rosa 這裡取來的屬性或方法是來自 <code>Object.prototype</code> 傳下來的  </p><p>接著第三句 <strong>建構式</strong> 的 prototype 是什麼意思 ?<br>試著對 <code>rosa</code> 取 prototype<br>新手一開始會以為 <code>rosa</code> 的 prototype 是等於 <code>Person</code> 的 prototype<br>特別要搞清楚這裡的 prototype 是指什麼(我一開始也搞混了)   </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rosa<span class="token punctuation">.</span>prototype <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rosa<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>回到第一句，回想 <code>.prototype</code> 是誰產生的 ?<br>對，是 <strong>函式</strong><br>那 rosa 物件是透過建構式的方式而來<br>prototype 是隱藏屬性，沒辦法透過建構出來的物件直接取得   </p><p><img data-src="https://dsm01pap006files.storage.live.com/y4mL7f71rE-gVfp4ze955AsP5mGlQNR1PYAJH4jUShpBHgc6U4Wq0pK2oYpDCsmDsGL0r2AxpMx3WXujkLUwZtgTEX_C1HPGIei28YZq0VvVXXwaTb7DT7K2RM-5ywv0SCz41iHsWPYdEp4lRb2YP19GWxtllx_EEBLXmJXO65f5jsuWSyQcLed8gq4Xo3YG0e3?width=692&height=620&cropmode=none" alt="藏在 contructor">  </p><h2 id="取得物件的-prototype"><a href="#取得物件的-prototype" class="headerlink" title="取得物件的 prototype"></a>取得物件的 prototype</h2><p>既然不能直接透過 <code>rosa.prototype</code> 取得原型<br>如果我們要知道 rosa 是繼承誰的 prototype 可以透過三種的方式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>rosa<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 現在比較好的拿到的方法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rosa<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// 從建構式拿到 [[Prototype]] 的值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rosa<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// 原本各家瀏覽器實作，後來 ES6 保留的方法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">===</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>rosa<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">===</span> rosa<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">===</span> rosa<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="原型鏈-Prototype-Chain"><a href="#原型鏈-Prototype-Chain" class="headerlink" title="原型鏈 Prototype Chain"></a>原型鏈 Prototype Chain</h2><p>原型可以讓本來 <strong>沒有某屬性的物件去存取其他物件的屬性</strong>    </p><h3 id="proto-溝通的原則"><a href="#proto-溝通的原則" class="headerlink" title="__proto__ : 溝通的原則"></a>__proto__ : 溝通的原則</h3><p>如果本身物件沒有屬性或方法使用，可以透過原型鍊 (prototype chain) 來取得<br>那是怎麼傳的呢 ?  </p><p>原本 JavaScript 沒有提供標準方法直接存取物件的 <code>[[Prototype]]</code>。<br><code>__proto__</code> 是瀏覽器實作的的，並非 EMCAScript 的標準，不是所有的環境都有這個值。  </p><blockquote><p>ES5 以後的是使用 <code>Object.getPrototypeOf()</code><br>ES6 為了向下兼容，<code>__proto__</code> 也是承認的，但環境的不同支援度不同，還是用 <code>getPrototypeOf</code><br><code>__proto__</code> 是 <code>[[Prototype]]</code> 底下的屬性，屬於 setter/getter</p></blockquote><p><code>__proto__</code> 這個特殊屬性或者是 <code>Object.getPrototypeOf()</code> 都是取得某個物件的原型物件 <code>[[Prototype]]</code> 的方式。   </p><p>官方比較建議使用 <code>Object.getPrototypeOf()</code>，因為 <code>__proto__</code> 比較耗效能</p><p>除了拿到物件原型的 prototype，<br>還可以透過 <code>.__proto__</code> 看原型們如何溝通      </p><p><strong>範例</strong>  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">hello</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> says meow</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> lily <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'lily'</span><span class="token punctuation">)</span>lily<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> Bob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span>Bob<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模擬溝通"><a href="#模擬溝通" class="headerlink" title="模擬溝通"></a>模擬溝通</h3><p>想執行 <code>lily.hello()</code><br>會依照這樣的順序尋找     </p><ol><li>找 lily 本身是不是有 hello function ?<br> 👉 沒有，往上一層找</li><li>找 <code>lily.__proto__</code> 是不是有 hello ?<br> 👉 沒有的話，再往上一層找<br> 知道 <strong>lily._<em>proto_</em> = Cat.prototype</strong></li><li>找 <code>lily.__proto__.__proto__</code> 是不是有 hello ?<br> =&gt; <code>lily.__proto__.__proto__ = Cat.prototype.__proto__</code>。<br> =&gt; <code>lily.__proto__.__proto__  = Object.prototype</code></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>往上找像是用鏈結的方式，所以才稱 prototype chain<br>我們找到 Object.prototype 就停止了</p><blockquote><p>那 <code>Object.prototype.__proto__</code> 呢?</p></blockquote><h3 id="最頂層的原型物件-Object-prototype"><a href="#最頂層的原型物件-Object-prototype" class="headerlink" title="最頂層的原型物件: Object.prototype"></a>最頂層的原型物件: Object.prototype</h3><p>往上找 <code>__proto__</code>，什麼時候才會停止 ?<br>會發現 <code>Object.prototype.__proto__</code> 等於 <code>null</code>，代表 Object 是最頂層了。    </p><p>在 JavaScript 幾乎所有的物件 (環境宿主物件除外)會順著原型鍊找到最頂層<br><code>Object.prototype</code> 才停止，因為 <code>Object.prototype</code> 是 JavaScript 所有物件的起源。</p><p>在 <code>Object.prototype</code> 提供的所有方法，在 JavaScript 的所有物件的可以呼叫它。    </p><ul><li><code>Object.prototype.hasOwnProperty()</code> : 是否為自己的屬性或方法</li><li><code>Object.prototype.toString()</code> : 轉型成字串</li><li><code>Object.prototype.valueOf()</code> : 取得 <strong>基本型別</strong> 的值</li></ul><p>幾乎所有的值可以使用的。<br>即便建立物件時，沒有定義這些方法，但基於原型鏈的繼承，我們還是可以呼叫這些方法。</p><h2 id="instanceof-是否在物件的原型鏈上"><a href="#instanceof-是否在物件的原型鏈上" class="headerlink" title="instanceof : 是否在物件的原型鏈上"></a>instanceof : 是否在物件的原型鏈上</h2><p>instanceof 除了檢查 <code>constructor.prototype</code> 是不是在物件的原型鏈上<br>也能檢查 <strong>複合式物件的基本型別</strong>  </p><ul><li><p>檢查基本型別</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment">// 100</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num<span class="token punctuation">)</span> <span class="token comment">// 'object'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 100，基本型別的值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//'number'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>valueOf()</code> 可以拿到基本型別的值   </p></li><li><p>檢查是不是在原型鏈上，同理使用 <code>class</code> 的結構也可以檢查    </p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> rosa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rosa <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="物件本身-v-s-原型鏈-出現同名屬性物件"><a href="#物件本身-v-s-原型鏈-出現同名屬性物件" class="headerlink" title="物件本身 v.s 原型鏈 : 出現同名屬性物件 ?"></a>物件本身 v.s 原型鏈 : 出現同名屬性物件 ?</h2><p>物件實體與原型具有相同的屬性或方法  </p><blockquote><p><strong>優先存取自己的屬性或方法</strong>，如果沒有才會再順著原型鏈向上尋找。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">Person</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Yo!"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token string">"Hi!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Yo!</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  ## 原型的方法擴充class 級別的擁有 extend 往下擴充  實例出實體後，會尋找存在的原型，並且一層層往上找。如果要替原型定義其他的方法可以這樣寫    </span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>javascript<span class="token comment">// 原始</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">hello</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> says meow</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 定在最上層，讓往下的都可以使用</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">hello</span> <span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> says meow</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Object 是最頂層，其實在這邊定義也可以。<br>如果不是同一類型都需要使用，這種方法也可以導致奇怪的問題發生    </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'lol'</span><span class="token punctuation">)</span><span class="token keyword">let</span> arr<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 'lol'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>每一個 array 產生時已經被加上 <code>&#39;lol&#39;</code><br>使用上合法，但不是一個好操作  </p><p>以上如果有誤，歡迎指教 QQ</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="https://ithelp.ithome.com.tw/articles/10194356">重新認識 JavaScript: Day 25 原型與繼承</a></li><li><a href="https://lidemy.com/courses/enrolled/390599">JS201 進階 JavaScript：那些你一直搞不懂的地方</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;JavaScript 的核心就在原型 !&lt;br&gt;原型使得物件都能使用在原型鏈上的屬性及方法&lt;br&gt;本身物件也可以再擴充&lt;br&gt;透過本篇了解原型的使用方法  &lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/Frontend/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - class 物件導向 (II) 繼承</title>
    <link href="https://blog.rosa.tw/Frontend/JavaScript/JavaScript-Object-oriented-programming-02/"/>
    <id>https://blog.rosa.tw/Frontend/JavaScript/JavaScript-Object-oriented-programming-02/</id>
    <published>2022-04-19T04:33:24.000Z</published>
    <updated>2022-04-19T04:33:24.205Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇我們提到 class 像是幫我們製作藍圖<br>有車子基本構造的藍圖<br>是不是能透過藍圖能做出其他車種的藍圖呢 ?  </p><p>可以，就是繼承 !</p><span id="more"></span><h2 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h2><p>要讓子物件擁有父物件的內容可以透過 <code>extends</code>  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">newClass</span> <span class="token keyword">extends</span> <span class="token class-name">OldClass</span><span class="token punctuation">&#123;</span><span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>範例 :</strong><br>Dog 繼承 Animal    </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> makes a noise.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span><span class="token function">sit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> sits.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'Mitzie'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 'Mitzie barks.'</span>d<span class="token punctuation">.</span><span class="token function">sit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'Mitzie sits.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Dog 繼承 Animal 的方法了，因此在 Dog 呼叫 speak 是可以的。</p><p>extends 背後會幫我們連接物件的 prototype<br>使我們可以取得父物件的方法或屬性。  </p><blockquote><p>JavaScript 使用 prototyped-based 不能讓物件一次繼承兩種<br>但有一個方法叫 <code>mixin</code> 利用拷貝的概念達到目的</p></blockquote><p>因為我還不會，先擱著 QQ，待補<br>參考 : </p><ul><li><a href="https://zh.javascript.info/mixins">Mixin 模式</a></li></ul><h2 id="super"><a href="#super" class="headerlink" title="super()"></a>super()</h2><p>如果要在一開始就 <strong>呼叫父層的方法</strong>，必須加入<code>super()</code>，代表在繼承的子層初始化時，將舊數值蓋過去，要傳進的參數也要帶入。  </p><blockquote><p>簡單來說，<code>super</code> 就是上一層的 <code>constructor</code>  </p></blockquote><ul><li>沒有 <code>super()</code> 的情況下，想在新物件生成時呼叫原型方法的 <code>speak()</code>  </li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> makes a noise.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 建構時在這裡呼叫原型的方法  </span><span class="token punctuation">&#125;</span><span class="token function">sit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> sits.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'Mitzie'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就會跑出 </p><pre class="line-numbers language-none"><code class="language-none">Must call super constructor in derived class before accessing &#39;this&#39; or returning from derived constructor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>會提示你要記得加入 super，不然 <code>this</code> 使用時會出現問題  </p><ul><li>加上 super 以及要初始化的值<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> makes a noise.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 建構時在這裡呼叫原型的方法  </span><span class="token punctuation">&#125;</span><span class="token function">sit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> sits.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'Mitzie'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'Mitzie makes a noise.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>如果 super 裡面沒有傳入 <code>name</code><br><code>this</code> 是 Dog 本身，但是不具有 <code>name</code> 這個值，就會是 <code>undefined</code>   </li></ul><h2 id="應用"><a href="#應用" class="headerlink" title="應用"></a>應用</h2><p>繼承可以用在有 <strong>共同屬性</strong> 的時候，想再加一些附加功能，透過繼承不用完全重寫。 </p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://lidemy.com/courses/enrolled/390599">JS201 進階 JavaScript：那些你一直搞不懂的地方</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上一篇我們提到 class 像是幫我們製作藍圖&lt;br&gt;有車子基本構造的藍圖&lt;br&gt;是不是能透過藍圖能做出其他車種的藍圖呢 ?  &lt;/p&gt;
&lt;p&gt;可以，就是繼承 !&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/Frontend/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/tags/JavaScript/"/>
    
    <category term="OOP" scheme="https://blog.rosa.tw/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - class 物件導向 (I) 初探 OOP</title>
    <link href="https://blog.rosa.tw/Frontend/JavaScript/JavaScript-Object-oriented-programming-01/"/>
    <id>https://blog.rosa.tw/Frontend/JavaScript/JavaScript-Object-oriented-programming-01/</id>
    <published>2022-04-19T04:33:15.000Z</published>
    <updated>2022-04-19T04:33:15.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JavaScript 是物件導向的語言<br>但跟其他的物件導向語言使用 class 有點不同   </p><p>恩 ? Javascript 不是也用 class 嗎 ?<br>不，<code>class</code> 是語法糖，到 ES6 才問世<br>真正的 JavaScript 是使用 prototype 來達成物件導向  </p><p>本系列將從現代開發用的 <code>class</code> 來了解<br>再到認識真的原汁原味 <code>prototype</code> 的作法  </p><span id="more"></span><h2 id="class-的物件導向"><a href="#class-的物件導向" class="headerlink" title="class 的物件導向"></a>class 的物件導向</h2><p><code>Object-oriented programming</code> 簡稱 OOP<br>物件導向的優點在於更 <strong>直覺</strong>，更模組化  </p><p>ES6 是使用 class<br>ES5 以前並沒有 class，而是使用 <code>prototype</code> (原型) 的方式。<br><code>class</code> 像是藍圖，而 <code>new</code> 則是把藍圖裡的東西實例出來  </p><blockquote><p>類別型的物件都是<strong>大寫開頭</strong>，這是常用的寫法  </p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定義貓</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">&#123;</span><span class="token comment">// 每隻貓有名字</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">&#125;</span><span class="token comment">// 每隻貓打招呼會喵喵叫</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> says meow</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 建立一隻叫 lily 的貓，把它存在 lily 這個變數</span><span class="token keyword">let</span> lily <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'lily'</span><span class="token punctuation">)</span>lily<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// lily says meow</span><span class="token keyword">let</span> bob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'bob'</span><span class="token punctuation">)</span>bob<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// bob says meow</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>class</code> : 物件的藍圖<br> 裡面的涵式不需要寫 <code>function</code> 的字，可以使用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions#description">function shorthand</a>  </li><li><code>new</code> : 把藍圖實做出來，放到自訂義變數中，之後這個變數也擁有藍圖包含的功能。<br> 用 <code>.</code> (dot) 連接，像 <code>object</code> 來呼叫。  </li><li><code>new XXX(建構子參數)</code> : 建構子是 class 內部的涵式，可以加入參數，類似初始化。<br> 對應  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//這是建構子</span><span class="token function">construtor</span><span class="token punctuation">(</span><span class="token parameter">arguments</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>arguments <span class="token operator">=</span> arguments<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>constructor</code> : 可以看做基本資料(設定檔)，<code>this.name = name</code><br>把 new 帶入的引數作為內部建構子參數使用。</p></blockquote></li><li><code>this</code> : 分成 class 內部的 <code>this</code> 與外部的 <code>this</code>。這邊著重內部的 this。<br> <code>this</code> 是對應被實體出來的主體。<br> lily 被指向叫做 lily 的貓<br> 反之 bob 也是，並不是指同一個物件<br> 但是內部方法是共用同一個    <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lily<span class="token punctuation">.</span>hello <span class="token operator">===</span> Bob<span class="token punctuation">.</span>hello<span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>對於已經建立的物件再修改內部建構的值非常不建議  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">lily<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"rosa"</span> <span class="token punctuation">(</span>👎<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>雖然可以修改掉內部的 <code>this.name</code> 的值<br>一般來說在建立實體時都會設定好，較少再直接透過個別更改     </p><h2 id="沒有-class-的物件導向"><a href="#沒有-class-的物件導向" class="headerlink" title="沒有 class 的物件導向"></a>沒有 class 的物件導向</h2><p>在 ES5 並沒有 class 的做法<br>如果沒有使用 prototype 的寫法<br>我們可以透過 function 來建構   </p><blockquote><p>function 也是物件，所以可以透過 <code>.</code> 拿到屬性或方法  </p></blockquote><ul><li>改寫上面的 Cat class  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 用 _ (dash) 通常指被封裝在函式內的變數，類似私有變數，一般不會直接修改</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">,</span>    <span class="token function-variable function">hello</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> says meow</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> Lily <span class="token operator">=</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token string">"Lily"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Lily<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> Bob <span class="token operator">=</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Bob<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Lily<span class="token punctuation">.</span>hello <span class="token operator">===</span> Bob<span class="token punctuation">.</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>讓物件能呼叫方法用 <code>function</code> 回傳 function 的方式<br>但是這個方法 <strong>非常消耗記憶體</strong><br>每一個產生的 function 都是不同的 function  </li></ul><h2 id="對比圖"><a href="#對比圖" class="headerlink" title="對比圖"></a>對比圖</h2><p><img data-src="https://dsm01pap006files.storage.live.com/y4mPsTnRBXXRDKUTn4h4YIRTBAE1Q3K4imjKAv-NaRLxF9KjYvNc3TJj5u-GvDWoZUpm_TBcByzdTcbSFqiAJtRNy43xJRnNoug9RKxYtHqxvCm-JrazXLtBM82gThGBaH8-SjTQbaFr0zZr4tGF2CuwLIl0u7I3soTI3iJ8usyN9oWE1SV6GyXIBp3snhf2Ply?width=1024&height=325&cropmode=none" alt="右 : ES5 ，左 : ES6"></p><p>右邊因為每一個實體都是重新創建一個新物件方法，明明要呼叫的指向實體是同一個而已。<br>改善這部分會使用到 <code>prototype</code>，讓建構的物件都有共同的方法與屬性  </p><ul><li>有無使用 prototype 的寫法  </li></ul><p><img data-src="https://dsm01pap006files.storage.live.com/y4meCfDywgqAcUJCJFA07OVsJ4OvfDl-Qu_nPbSoDEocZ_v0aTe19CwejVfn_H2ZHF8PR5mb1xI4pjAwUuAQLb-NdFX5VB-_AmcjbZbIrfTn8wy1Cf5im0Lr8--yFtVkM8wsSdEd-N4TO9cPP64dTTXfH0td0OWI8XuyKow6jmPGLxam61-1dH2JWOpXzMFCDg3?width=1024&height=308&cropmode=none" alt="左 : function 直接回傳物件，右 : 透過 prototype"></p><p>最大的差別在於產生的物件 <strong>是不是共用同一個方法</strong><br>右邊的透過 prototype 方法是都指向同一個  </p><p>建立物件時右邊是使用了 <code>new</code>，幫將物件的原型綁在建構函式上  </p><h2 id="new-藍圖的實作"><a href="#new-藍圖的實作" class="headerlink" title="new : 藍圖的實作"></a>new : 藍圖的實作</h2><p>new 到底做了什麼是呢 ? </p><ul><li>new 不 new ?  </li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 等同於 class 的 construtor</span><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token punctuation">&#125;</span><span class="token class-name">Car</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">buy</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">you buy a new </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> toyota <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">'toyota'</span><span class="token punctuation">)</span>toyota<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> honda <span class="token operator">=</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token string">'honda'</span><span class="token punctuation">)</span> <span class="token comment">// 錯誤</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>沒 new 會出現 <code>Class constructor Car cannot be invoked without &#39;new&#39;</code><br>代表沒有初始化。</p><h3 id="複習一下-call"><a href="#複習一下-call" class="headerlink" title="複習一下 call"></a>複習一下 call</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//這邊印出的 this 是全域物件  </span><span class="token function">hello</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span> <span class="token comment">//123，this 變成傳進去的東西</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>.call</code> 是呼叫函式的另一種方法<br>透過這樣的方式可以將 this 綁在傳入的物件上</p><h3 id="手動造一個-new"><a href="#手動造一個-new" class="headerlink" title="手動造一個 new"></a>手動造一個 new</h3><p>知道 call 跟 this 的關係，就能了解 <code>constructor</code> 的初始化。</p><ul><li>目標 : 不用 new 做一樣的功能<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> toyota <span class="token operator">=</span> <span class="token function">newCar</span><span class="token punctuation">(</span><span class="token string">'toyota'</span><span class="token punctuation">)</span>toyota<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>用 newCar<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token punctuation">&#125;</span><span class="token class-name">Car</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">buy</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">you buy a new </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">newCar</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> obj <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">Car</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>name<span class="token punctuation">)</span>obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Car</span><span class="token punctuation">.</span>prototype<span class="token keyword">return</span> obj<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>new 其實做了 :  </li></ul><ol><li>建立一個 obj</li><li><code>.call(obj,name)</code>，呼叫建構子。把 obj 當作 <code>this</code>，name 作為參數，完成 <code>constructor</code> 的初始化。<blockquote><p>沒有這一項無法指向實體，<code>this</code> 綁定問題  </p></blockquote></li><li>用 <code>__proto__</code> 導向至 prototype，跟原型進行搭橋，才能使用到該原型方法。</li><li><code>return obj</code> ，實例 (instance) 出來的東西。</li></ol><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>現代開發大多還是使用 class<br>但並非代表 JavaScript 就是用 class(類別) 來建立<br>背後依然是 function 與指定 prototype 的實作    </p><p>想更了解 JavaScript 認識 prototype 是不可少的<br>同時我也查了為什麼 JavaScript 作者使用 prototype 的設計<br>而不是用類別 ，是出於什麼考量?     </p><p>在<a href="https://stackoverflow.com/questions/8433459/what-s-the-purpose-of-prototype">這篇</a> 找到的的解釋是 class-based 是要 <strong>重頭設計物件</strong>，而 prototype-based 可以透過現有已建立的物件再建立，總得來說效能上更快。  </p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://lidemy.com/courses/enrolled/390599">JS201 進階 JavaScript：那些你一直搞不懂的地方</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;JavaScript 是物件導向的語言&lt;br&gt;但跟其他的物件導向語言使用 class 有點不同   &lt;/p&gt;
&lt;p&gt;恩 ? Javascript 不是也用 class 嗎 ?&lt;br&gt;不，&lt;code&gt;class&lt;/code&gt; 是語法糖，到 ES6 才問世&lt;br&gt;真正的 JavaScript 是使用 prototype 來達成物件導向  &lt;/p&gt;
&lt;p&gt;本系列將從現代開發用的 &lt;code&gt;class&lt;/code&gt; 來了解&lt;br&gt;再到認識真的原汁原味 &lt;code&gt;prototype&lt;/code&gt; 的作法  &lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/Frontend/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/tags/JavaScript/"/>
    
    <category term="OOP" scheme="https://blog.rosa.tw/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - this (II) call、appaly、bind</title>
    <link href="https://blog.rosa.tw/Frontend/JavaScript/JavaScript-this-II/"/>
    <id>https://blog.rosa.tw/Frontend/JavaScript/JavaScript-this-II/</id>
    <published>2022-04-15T03:07:53.000Z</published>
    <updated>2022-04-18T14:38:55.032Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>除了透過執行環境與上下文來綁定之外<br>this 是可以改變的<br>改變 this 有三種方式  </p><span id="more"></span><h2 id="call-amp-apply"><a href="#call-amp-apply" class="headerlink" title="call &amp; apply"></a>call &amp; apply</h2><p>上一篇有簡略提過 <code>.call()</code><br>等同於 function 直接執行<br>而且是有帶 <code>this</code><br>第一個參數是指定 <code>this</code>，後面及是 <code>arguments</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 這樣是一樣的</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">test</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">test</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>這兩個執行是差不多的<br>差在後面的參數類型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> test <span class="token operator">=</span><span class="token punctuation">&#123;</span>a <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj <span class="token operator">=</span><span class="token punctuation">&#123;</span>a<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">&#125;</span>test<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 1 , 5</span><span class="token comment">// 改變 this </span>test<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 5 , 5</span>test<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 5 , 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>call</code> : 後面都用逗號隔開<br>   <code>.call(thisValue,args[0],args[1])</code> </li><li><code>apply</code> : 前面為 this，後面參數為類陣列。<br>  <code>.apply(thisValue,[args[0],args[1]])</code></li></ul><h3 id="call-跟-apply-為什麼同時存在"><a href="#call-跟-apply-為什麼同時存在" class="headerlink" title="call 跟 apply 為什麼同時存在 ?"></a>call 跟 apply 為什麼同時存在 ?</h3><p>例子是來自 <a href="https://blog.huli.tw/2020/04/18/javascript-function-is-awesome/">覺得 JavaScript function 很有趣的我是不是很奇怪</a><br>這篇也探討很有趣的 JS 問題  </p><ul><li>Math.max 的參數可以吃隨意數值</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果我們要從陣列中找出最大值呢 ?<br>直接呼叫會導致錯誤<br>可以運用 apply 的參數是 <strong>陣列</strong> 的方式帶入<br>或者用 ES6 展開  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 6</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 6 , 展開 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>總是會有不同的情境可以使用</p><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p>把 this 的值先綁死，不管後面怎麼 call<br>都不會變動。</p><blockquote><p>bind 回傳的是一個 <strong>function</strong></p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> b <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token comment">// function</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 10</span><span class="token function">b</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// 依舊是 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>非嚴格模式底下，無論是用 call、apply 還是 bind<br>傳進去的如果是 primitive 都會被轉成 <strong>object</strong>  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>  <span class="token function">hello</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token comment">// [Number: 123]</span><span class="token keyword">const</span> myHello <span class="token operator">=</span> <span class="token function">hello</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">'my'</span><span class="token punctuation">)</span><span class="token function">myHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// [String: 'my']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="箭頭函式-v-s-bind"><a href="#箭頭函式-v-s-bind" class="headerlink" title="箭頭函式 v.s bind"></a>箭頭函式 v.s bind</h2><p>初學時會認為 arrow funciton 有指向自己，綁定的意味<br>但兩者有很大的區別    </p><ul><li><code>.bind(this)</code> : 呼叫之前就先綁定，讓被呼叫的都有固定的 <code>this</code>。  </li><li>arrow function this : 箭頭函式沒有建立任何的 this，簡單來說是根本沒有自己的 this。<br>在箭頭函式使用 this，會像變數一樣，往外部尋找。   </li></ul><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="https://blog.huli.tw/2019/02/23/javascript-what-is-this/">淺談 JavaScript 頭號難題 this：絕對不完整，但保證好懂 - Huli</a></li><li><a href="https://blog.huli.tw/2020/04/18/javascript-function-is-awesome/">覺得 JavaScript function 很有趣的我是不是很奇怪</a></li><li><a href="https://zh.javascript.info/arrow-functions">深入理解箭头函数</a>  </li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;除了透過執行環境與上下文來綁定之外&lt;br&gt;this 是可以改變的&lt;br&gt;改變 this 有三種方式  &lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/Frontend/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - this (I) 基礎概念</title>
    <link href="https://blog.rosa.tw/Frontend/JavaScript/JavaScript-this-I/"/>
    <id>https://blog.rosa.tw/Frontend/JavaScript/JavaScript-this-I/</id>
    <published>2022-04-15T03:07:39.000Z</published>
    <updated>2022-04-18T14:41:30.951Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在學習 JavaScript 時很多課程會建議不要急著先用 <code>this</code><br>因為 this 會跑出讓新手無法預期的結果<br>在某些情況下使用 this 反而更棘手<br>藉由本次來初步了解這個奇妙的 <strong>this</strong>! </p><span id="more"></span><h2 id="什麼是-this"><a href="#什麼是-this" class="headerlink" title="什麼是 this ?"></a>什麼是 this ?</h2><ul><li>關鍵字</li><li>function 執行時，自動生成的內部物件</li><li>隨 function 執行場合不同，this 指向的值也會不同</li><li>大多數情況，this 代表的就是呼叫 function 的物件 (Owner Object of the function)。</li></ul><p>總得來說 :   </p><blockquote><p>this 會因 <strong>執行的環境與上下文</strong> (context) 的不同，而有不同的結果<br>翻譯機 : <strong>跟 function 在哪裡呼叫有關</strong></p></blockquote><p>空說 this 有點難以了解，this 其實在哪裡都可以使用(非嚴格模式下)<br>JavaScript 並沒有特別限制 this 綁定在哪，所以 this 是會變來變去的<br>正因如此才顯得有點麻煩    </p><h2 id="不同情況下的-this"><a href="#不同情況下的-this" class="headerlink" title="不同情況下的 this"></a>不同情況下的 this</h2><h3 id="物件導向的-this"><a href="#物件導向的-this" class="headerlink" title="物件導向的 this"></a>物件導向的 this</h3><p>this 就是 <code>instance</code> 本身，被 <strong>實例</strong> 出來的那個。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">&#123;</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">&#125;</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> toyota <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">'toyota'</span><span class="token punctuation">)</span>toyota<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這個例子就是 <code>toyota</code> 物件本身</p><h3 id="物件導向之外的-this"><a href="#物件導向之外的-this" class="headerlink" title="物件導向之外的 this"></a>物件導向之外的 this</h3><p>脫離 <code>class</code> 後，可以再細分成  </p><ol><li>一般 function 中的 this</li><li>DOM 事件中的 this</li><li><code>object</code> 的 this</li><li>arrow function 的 this <strong>(特別)</strong> ⭐</li></ol><blockquote><p>殺手鐧 : 可以用 <code>.call()</code> 來知道 this 的意義</p></blockquote><p><code>.call()</code> 是執行 function 另一種方式<br><code>.call(context,args[0],args[1])</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">p1<span class="token punctuation">,</span>p2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// undefined 1 2</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// undefined 1 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這兩個是一樣的，會發現原來一般呼叫 function 會少了 this<br>而這個 this 就是看執行的環境與上下文 (context) 而來的  </p><p><strong>物件中的 function 呢 ?</strong>     </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">p1<span class="token punctuation">,</span>p2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>func <span class="token operator">:</span> test<span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根據上面說的</p><blockquote><p><code>this</code> 代表的就是呼叫 function 的物件 </p></blockquote><p>物件呼叫，呼叫的 method 前面是 obj<br>所以 call 裡面的 this 位置是 <code>obj</code>     </p><h4 id="一般-function-中的-this"><a href="#一般-function-中的-this" class="headerlink" title="一般 function 中的 this"></a>一般 function 中的 this</h4><p>根據環境不同，結果不同<br>但是都是 global 的物件<br>在 <strong>非嚴格模式</strong> 下</p><ul><li>node.js : <code>this = global</code><br><img data-src="https://dsm01pap006files.storage.live.com/y4mBY1X7hZFvUS0mwa7p25amxq2Q5tXcp0SRBAKj7cJNx_37JCdjvCWa0cMAjfVWWbH4a8_YsBV0qOgYrNgcg6zJ5FhgIGuLqLlMT8euJQKJx8Dr9WTfy2FGVzvqh4ES1YzVoXlfdOCNR8Q_ndRIiDSyucw5IxbNHFsKeU5KRB71oZ9e096hhsMhYq6JT-FlHeR?width=1022&height=617&cropmode=none" alt="global 物件"></li><li>瀏覽器 : <code>this = window</code><br><img data-src="https://dsm01pap006files.storage.live.com/y4mkwi-WphtCQHHgZoUP5u8Q0AkSyEZZcX6U6ErkFF5AKuF0z1us2zGqqo2w-Ir8auT0FL7AbZxjEfLh3Y4wyVYyLU38xVibSCWD1r70lghQMdlCieK35uGdQSgT5HKX5iStqZw2ekAtQWqgxktoKIFmMjFBf-L3h8PkZ505ii9ON4qS1jF7nRxrEJz42_hQ7AL?width=662&height=300&cropmode=none" alt="window 是瀏覽器的全域物件"></li></ul><blockquote><p><strong>嚴格模式</strong> 下的 this 指向全域物件是 <code>undefined</code><br>因為 this 沒有綁定誰，所以會是 <code>undefined</code>。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span><span class="token comment">// 轉成 call</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// undefined ,沒有帶入東西，嚴格模式下是 undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DOM-事件中的-this"><a href="#DOM-事件中的-this" class="headerlink" title="DOM 事件中的 this"></a>DOM 事件中的 this</h4><p>對應到事件觸發的 <strong>元素</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以 click 為例， <code>this</code> 會導向被按到的 <strong>元素</strong> 本身  </p><p>但是在事件裡 <strong>呼叫其他 function</strong> 時就要特別注意了<br>由於內部的 function 沒有綁定物件， this 會是全域物件  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// ajax 的 this 是 window 全域物件</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>textContent<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以透過其他變數將 <code>this</code> 先存起來，直接在內部呼叫的函式替換。 </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 把這邊的 this 存起來，指向的是元素本身</span><span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token comment">// ajax 的 this 是 window</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 把 元素本身的 this 帶進來</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>textContent<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下一篇會提到如何用函式的方式綁定 this  </p><ul><li>轉成 <code>.call</code><br><code>el</code> 是 document 子結點取得的，這邊也可以看做一個物件<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>handler<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'type'</span><span class="token punctuation">,</span><span class="token function">handler</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// 放入的是 元素 本身</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="object-的-this"><a href="#object-的-this" class="headerlink" title="object 的 this"></a>object 的 this</h4><p>指 obj 本身。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function-variable function">test</span> <span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// obj</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 轉成 call</span>obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="arrow-function-的-this"><a href="#arrow-function-的-this" class="headerlink" title="arrow function 的 this"></a>arrow function 的 this</h4><blockquote><p>arrow function 沒有自己的 this<br>而是用外部的 this  </p></blockquote><p>箭頭函式之所以在 this 表現奇怪<br>跟其他狀況的 this 不同的是 <strong>不是哪裡被呼叫有關</strong><br>而是 <strong>在哪定義</strong> 有關<br>如果前面已定義了，就會用那個值<br>來看看例子  </p><ul><li>一般 function<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">hello</span><span class="token punctuation">&#123;</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>很明顯的 <code>new</code> 建構出來的物件<br>前面有提到是 <strong>實例</strong> 本身<br>但是裡面呼叫 function 的  this 呢 ?<br>是指 <strong>全域物件</strong><br>setTimeout 並沒有透過其他物件呼叫<br>就像在外部呼叫 <code>setTimeout</code>  </li></ul><p>既然是 hello 這個物件的東西<br>我們希望 <code>this</code> 指向的是 hello 本身建構出來的物件<br><code>arrow function</code> 就派上用場了  </p><ul><li>用 <code>arrow function</code><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">hello</span><span class="token punctuation">&#123;</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// hello&#123;&#125;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// hello&#123;&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>arrow function 本身沒有 this<br>而是根據定義在哪，this 就是那個值<br>通常也是指箭頭函是外部的 this  </li></ul><h2 id="this-與前後文本-context-的綁定基本原則"><a href="#this-與前後文本-context-的綁定基本原則" class="headerlink" title="this 與前後文本 (context) 的綁定基本原則"></a>this 與前後文本 (context) 的綁定基本原則</h2><p>this 綁定原則大概可以分四大種  </p><ul><li><strong>預設綁定</strong> (Default Binding)</li><li><strong>隱含式綁定</strong> (Implicit Binding)</li><li><strong>顯式綁定</strong> (Explicit Binding)</li><li>「<strong>new」關鍵字綁定</strong>  </li></ul><h3 id="預設綁定"><a href="#預設綁定" class="headerlink" title="預設綁定"></a>預設綁定</h3><p>宣告在 global scope 的變數，跟全域物件屬性是相同的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 直接讀</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 1 </span><span class="token comment">// 透過全域物件底下的屬性讀取</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span>  <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因為預設綁定，當 function 被呼叫的當下如果沒有值或是在 <code>func.call(null)</code> 或 <code>func.call(undefined)</code> 此類的情況下，此時裡面的 <code>this</code> 會<strong>自動指定至全域物件</strong>。</p><p>如果是嚴格模式， this 綁定全域物件是 <code>undefined</code></p><h3 id="隱含式綁定"><a href="#隱含式綁定" class="headerlink" title="隱含式綁定"></a>隱含式綁定</h3><p>function 被宣告的地方是在 global scope 中，只要它 <strong>成為某個物件的參考屬性</strong> (reference property)，在那個 function 被呼叫的當下，該 function 即被那個物件所包含。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a  <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  a<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  foo<span class="token operator">:</span> func <span class="token comment">// 引用 global 的 function</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2 , this是 obj 本身</span><span class="token keyword">var</span> func2 <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">;</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// undefined ， 這邊的 func 是 global 的，this 是 window，a 是找不到的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>決定 this 的關鍵不在於它屬於哪個物件，而是</p><blockquote><p>在於 function「呼叫的時機點」  </p></blockquote><p>透過物件呼叫某個方法 (method) 的時候，此時 this 就是那個物件 (owner object)。</p><h3 id="顯式綁定"><a href="#顯式綁定" class="headerlink" title="顯式綁定"></a>顯式綁定</h3><ol><li><code>.bind()</code>  </li><li><code>.call()</code> </li><li><code>.apply()</code> </li></ol><p>這類直接指定 this 的 function 都可被歸類至顯式綁定的類型。</p><h3 id="new-關鍵字綁定"><a href="#new-關鍵字綁定" class="headerlink" title="new 關鍵字綁定"></a>new 關鍵字綁定</h3><p>當一個 <code>function</code> 前面帶有 <code>new</code> 被呼叫時，會發生： </p><ul><li> 會產生一個新的物件 (物件被建構出來)</li><li> 這個新建構的物件會被設為那個 function 的 <code>this</code> 綁定目標，也就是 <code>this</code> 會指向新建構的物件。</li><li> 除非這個 function 指定回傳 (return) 了他自己的替代物件，否則這個透過 <code>new</code> 產生的物件會被自動回傳。</li></ul><p>關於 <code>new</code>，參考 : <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new#description">MDN 對 new 的說明</a>   </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span> <span class="token number">123</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> obj<span class="token punctuation">.</span>a <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="this-的應用-Cascade-組合技"><a href="#this-的應用-Cascade-組合技" class="headerlink" title="this 的應用 : Cascade 組合技"></a>this 的應用 : Cascade 組合技</h2><p>Cascade 也有人稱作 <strong>「Fluent Interface」</strong><br>可以讓 method 串串樂   </p><p>JavaScript 允許函式 <code>return undefined</code><br>那改成 <code>return this</code> 呢 ?  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">calNum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newNum</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">+=</span> newNum<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sub</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newNum</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">-=</span> newNum<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">multi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newNum</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">*=</span> newNum<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">division</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newNum</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">/=</span> newNum<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 透過 new 建立實體，this 是 calNum本身</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">calNum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 分開呼叫</span>a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a<span class="token punctuation">.</span>num <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 150</span>a<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a<span class="token punctuation">.</span>num <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>當回傳 this 時，指的是物件本身，可以往後串在一起，  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a<span class="token punctuation">.</span>num <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>JQuery 中的也是用 method chain (方法鏈) 這樣的方式  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'is-active'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'is-hide'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者 <code>Array</code> 的內建函式<br>是可以串聯不同的方法<br>而且回傳的都是 <strong>同類型</strong> 的陣列</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">el</span> <span class="token operator">=></span> e<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">el</span> <span class="token operator">=></span> el <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// [4,6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>除了轉成 <code>.call()</code> 來判斷 this<br>對於 this 也可以朝幾種方向來判斷  </p><ol><li>function 的呼叫，是透過 <code>new</code> 進行的嗎？<br> 如果是，那 this 就是被建構出來的物件。</li><li>function 是以 .call() 或 .apply() 的方式呼叫的嗎？ 或是 function 透過 .bind() 指定？<br> 如果是，那 this 就是被指定的物件。</li><li>function 被呼叫時，是否存在於某個物件？<br> 如果是，那 this 就是那個物件。</li><li>如果沒有滿足以上條件，此 function 裡的 this 就一定是全域物件<br>在嚴格模式下則是 undefined。</li></ol><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="https://blog.huli.tw/2019/02/23/javascript-what-is-this/">淺談 JavaScript 頭號難題 this：絕對不完整，但保證好懂 - Huli</a></li><li><a href="https://zhuanlan.zhihu.com/p/23804247">this 的值到底是什么？一次说清楚</a>  </li><li><a href="https://ithelp.ithome.com.tw/articles/10193193">重新認識 JavaScript: Day 20 What’s “THIS” in JavaScript (鐵人精華版)</a></li><li><a href="https://zh.javascript.info/object-methods">对象方法，”this”</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在學習 JavaScript 時很多課程會建議不要急著先用 &lt;code&gt;this&lt;/code&gt;&lt;br&gt;因為 this 會跑出讓新手無法預期的結果&lt;br&gt;在某些情況下使用 this 反而更棘手&lt;br&gt;藉由本次來初步了解這個奇妙的 &lt;strong&gt;this&lt;/strong&gt;! &lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/Frontend/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - 箭頭函式</title>
    <link href="https://blog.rosa.tw/Frontend/JavaScript/JavaScript-arrow-function/"/>
    <id>https://blog.rosa.tw/Frontend/JavaScript/JavaScript-arrow-function/</id>
    <published>2022-04-14T03:31:45.901Z</published>
    <updated>2022-04-15T03:09:36.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="function-箭頭函式-gt"><a href="#function-箭頭函式-gt" class="headerlink" title="function 箭頭函式 ()=&gt;"></a>function 箭頭函式 ()=&gt;</h2><p>箭頭函式可以把內容變得更易讀<br> 函式有好幾種寫法  </p><blockquote><p>普通函式跟箭頭函式區別還有 <strong><code>this</code></strong><br>之後在補充  </p></blockquote><h3 id="函式"><a href="#函式" class="headerlink" title="函式"></a>函式</h3><ol><li>純功能<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> n<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>變數型態的函式<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">testFunction</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> n<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="哪些型態不能省略"><a href="#哪些型態不能省略" class="headerlink" title="哪些型態不能省略"></a>哪些型態不能省略</h4><p>( 待補充 )</p><h3 id="範例一"><a href="#範例一" class="headerlink" title="範例一"></a>範例一</h3><p>第二種型態的函式可以一步步簡化</p><ol><li> 簡化 <code>function</code><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">testFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> n<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>簡化後面的 <code>&#123; &#125;</code> block<ul><li>第二個的 <code>(n)</code> 是指回傳的東西<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">testFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">testFunction</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 答案是 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li>更加簡化，如果傳入參數只有 <strong>1</strong> 個<br> 前面的 <strong>( )</strong> 括號也可以省略<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">testFunction</span> <span class="token operator">=</span> <span class="token parameter">n</span> <span class="token operator">=></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">testFunction</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 答案是 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>這個例子有點廢，只是輸入 n 會回傳 n<br>拿之前的範例當練習  <h3 id="範例二"><a href="#範例二" class="headerlink" title="範例二"></a>範例二</h3></li><li>在陣列中求比 n 小的數</li></ol><ul><li>原本我的寫法<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">findAllSmall</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> numberArray<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> numberArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">return</span> numberArray<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>換成 ES6<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">smaller</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> numberArray<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span> <span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> numberArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> numberArray<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="2"><li>印出大於 1 且乘以 3 倍</li></ol><ul><li>一般寫法<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">triple</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span><span class="token punctuation">(</span>n <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> item<span class="token operator">></span><span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> item<span class="token operator">*</span><span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">triple</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [6,9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>ES6 簡寫<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">triple</span> <span class="token operator">=</span> n <span class="token operator">=></span><span class="token punctuation">(</span> n <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span><span class="token punctuation">(</span>item<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span><span class="token punctuation">(</span>item<span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">triple</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [6,9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;h2 id=&quot;function-箭頭函式-gt&quot;&gt;&lt;a href=&quot;#function-箭頭函式-gt&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/Frontend/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/tags/JavaScript/"/>
    
    <category term="arrow function" scheme="https://blog.rosa.tw/tags/arrow-function/"/>
    
    <category term="this" scheme="https://blog.rosa.tw/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>CSSZeroToOneSeries | 番外篇 | 假圖文好工具</title>
    <link href="https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-Tools/"/>
    <id>https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-Tools/</id>
    <published>2022-04-13T15:45:31.799Z</published>
    <updated>2022-04-16T16:38:15.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="假圖"><a href="#假圖" class="headerlink" title="假圖"></a>假圖</h2><h2 id="假文"><a href="#假文" class="headerlink" title="假文"></a>假文</h2><h2 id="作弊表"><a href="#作弊表" class="headerlink" title="作弊表"></a>作弊表</h2><h2 id="CSS-之旅的中繼站"><a href="#CSS-之旅的中繼站" class="headerlink" title="CSS 之旅的中繼站"></a>CSS 之旅的中繼站</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;假圖&quot;&gt;&lt;a href=&quot;#假圖&quot; class=&quot;headerlink&quot; title=&quot;假圖&quot;&gt;&lt;/a&gt;假圖&lt;/h2&gt;&lt;h2 id=&quot;假文&quot;&gt;&lt;a href=&quot;#假文&quot; class=&quot;headerlink&quot; title=&quot;假文&quot;&gt;&lt;/a&gt;假文&lt;/h2&gt;&lt;h2 id</summary>
      
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="CSS" scheme="https://blog.rosa.tw/categories/Frontend/CSS/"/>
    
    
    <category term="CSS" scheme="https://blog.rosa.tw/tags/CSS/"/>
    
    <category term="CSSZeroToOneSeries" scheme="https://blog.rosa.tw/tags/CSSZeroToOneSeries/"/>
    
  </entry>
  
  <entry>
    <title>CSSZeroToOneSeries | 20 (完) | 拼板+重構</title>
    <link href="https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-20/"/>
    <id>https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-20/</id>
    <published>2022-04-13T15:34:32.130Z</published>
    <updated>2022-04-13T15:45:07.753Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>終於來到排版系列的最後一篇，綜合之前所有的練習<br>來建構一個完整的 Landing Page  </p><h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/abVaLWx">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4m9T4H16Ta75kDzYcQq5DvDiixK4mUT7-zgyeMbwFltHZbFafI5uejyNEI2PKXuVsHwbitph6KpHB-W1twOqWHvFYJXV0ZHqpaK31pEbAbsnH7ffzVJrY4jCn-DQT8BuQlWSI7mhiwxpMOte8vgXL82SlBMc9CDVnRs4GQaX5zSfAIPFEVdD6wo429FOHMt4kh?width=1024&height=133&cropmode=none" alt="導覽列"></p><h3 id="重構重點"><a href="#重構重點" class="headerlink" title="重構重點"></a>重構重點</h3><ol><li>挑出重複的 container，合併相同屬性</li><li>挑出重複的 nav</li><li>h1 重新安排</li><li>新增 group ，把內容層級分出來，再個別分不同的層級作背景色</li></ol><h3 id="讓第三區塊的文字填滿區塊"><a href="#讓第三區塊的文字填滿區塊" class="headerlink" title="讓第三區塊的文字填滿區塊"></a>讓第三區塊的文字填滿區塊</h3><p>原本如果字句不同會導致尾巴有空白，透過 flex 屬性的 grow ，讓剩餘空間被分配到 .txt 。原本是內容撐開，改成 flex 幫我撐</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// 父層具有 flex.txt</span><span class="token punctuation">&#123;</span><span class="token property">flex-grow</span> <span class="token punctuation">:</span> 1<span class="token punctuation">;</span>//....<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="img-圖片填滿但不超格，而且設定固定高度"><a href="#img-圖片填滿但不超格，而且設定固定高度" class="headerlink" title="img 圖片填滿但不超格，而且設定固定高度"></a>img 圖片填滿但不超格，而且設定固定高度</h3><p>第三區塊圖片大小不一的時候，文字內容會被往下擠，這邊把 img 改成固定高度，object-fit : cover，圖片做不變形塞滿整個框框。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">img</span><span class="token punctuation">&#123;</span><span class="token property">height</span> <span class="token punctuation">:</span> 400px<span class="token punctuation">;</span><span class="token property">object-fit</span> <span class="token punctuation">:</span> cover<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;終於來到排版系列的最後一篇，綜合之前所有的練習&lt;br&gt;來建構一個完整的 Landing Page  &lt;/p&gt;
&lt;h2 id=&quot;本篇成果&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="CSS" scheme="https://blog.rosa.tw/categories/Frontend/CSS/"/>
    
    
    <category term="CSS" scheme="https://blog.rosa.tw/tags/CSS/"/>
    
    <category term="CSSZeroToOneSeries" scheme="https://blog.rosa.tw/tags/CSSZeroToOneSeries/"/>
    
  </entry>
  
  <entry>
    <title>CSSZeroToOneSeries | 19 | 文字排版系列</title>
    <link href="https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-19/"/>
    <id>https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-19/</id>
    <published>2022-04-13T15:34:28.269Z</published>
    <updated>2022-04-13T15:44:54.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/abVaLWx">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4m9T4H16Ta75kDzYcQq5DvDiixK4mUT7-zgyeMbwFltHZbFafI5uejyNEI2PKXuVsHwbitph6KpHB-W1twOqWHvFYJXV0ZHqpaK31pEbAbsnH7ffzVJrY4jCn-DQT8BuQlWSI7mhiwxpMOte8vgXL82SlBMc9CDVnRs4GQaX5zSfAIPFEVdD6wo429FOHMt4kh?width=1024&height=133&cropmode=none" alt="導覽列"></p><h3 id="column-count"><a href="#column-count" class="headerlink" title="column-count"></a>column-count</h3><p>讓剩下的空間，分成幾格欄位。內容可以是元素，也可以是 p 裡面的文字<br>文字會依照 <strong>剩餘總空間 / 欄位</strong> 去分配</p><h3 id="column-gap"><a href="#column-gap" class="headerlink" title="column-gap"></a>column-gap</h3><p>欄跟欄位之間的空隙</p><blockquote><p>column 屬性不一定要跟 flex 或是 grid 一起使用</p></blockquote><h3 id="margin-left-auto"><a href="#margin-left-auto" class="headerlink" title="margin-left : auto"></a>margin-left : auto</h3><p>把左邊的剩餘空間分配掉。<br>因為 right 沒有，就會擠到右邊</p><h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><p>可以做到圖繞文，這邊做首字浮起來或是標題向左邊編排</p><h3 id="first-letter"><a href="#first-letter" class="headerlink" title=":first-letter"></a>:first-letter</h3><p>可以用在 p tag 的首字</p><hr><h3 id="中央排版"><a href="#中央排版" class="headerlink" title="中央排版"></a>中央排版</h3><p>準確一點是要算像素的，中間的排版是透過 position : absolute 定位在 container 上，再用 margin 或是 text-align 把字定在中央。</p><p>column-count 將文字區分成兩段，算出中間的 column-gap，原本的大小加上 h1 margin 兩邊的大小。</p><h3 id="用-偽元素來做裝飾"><a href="#用-偽元素來做裝飾" class="headerlink" title="用 偽元素來做裝飾"></a>用 偽元素來做裝飾</h3><p>方框是裝飾性的元素，不需要多一個 element 來多擺放，用偽元素達成裝飾性就可以了。  </p><p>再用 z-index : -1，讓偽元素不要蓋住文字</p><hr><h3 id="不一定非要定位在上一層，也可以上上層"><a href="#不一定非要定位在上一層，也可以上上層" class="headerlink" title="不一定非要定位在上一層，也可以上上層"></a>不一定非要定位在上一層，也可以上上層</h3><p>可以做出更多變化。</p><h3 id="旋轉的軸心點-transform-origin"><a href="#旋轉的軸心點-transform-origin" class="headerlink" title="旋轉的軸心點 transform-origin"></a>旋轉的軸心點 transform-origin</h3><p>預設的旋轉軸心點是元素的中心，可以透過改變軸心點來旋轉。  </p><p>第一個版面想要固定左上進行旋轉，再轉 90 度時才不會差距太大。<br>可以直接寫位置，也可以寫 %  數。  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.element</span><span class="token punctuation">&#123;</span><span class="token property">transform-origin</span> <span class="token punctuation">:</span> top<span class="token punctuation">,</span>left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="文字陰影-text-shadow"><a href="#文字陰影-text-shadow" class="headerlink" title="文字陰影 text-shadow"></a>文字陰影 text-shadow</h3><p>讓文字跟背景同色，再做陰影。<br>跟 box-shadow 不一樣的是，沒有第四個擴張值。<br>同時也可以多重陰影 !  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.element</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token property">text-shadow</span> <span class="token punctuation">:</span> 10px 2px 0px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>.4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="與其用-border-不如用偽元素"><a href="#與其用-border-不如用偽元素" class="headerlink" title="與其用 border 不如用偽元素"></a>與其用 border 不如用偽元素</h3><p>第一個排版兩條線分別擺在標題上下方，雖然可以使用 border-top &amp; bottom，但這兩者會填滿整個容器，因為 block 屬性的關係。  </p><p>這兩條線不屬於內容，只是裝飾性，利用偽元素 ::before 跟 ::after 也可以達成。</p><ol><li>設定 position : absolute ，h1 本身要設定位 relative 給偽元素定位</li><li>控制長短</li></ol><h3 id="flex-grow-分配剩餘的空間"><a href="#flex-grow-分配剩餘的空間" class="headerlink" title="flex-grow 分配剩餘的空間"></a>flex-grow 分配剩餘的空間</h3><p>第二個排版是分布在 h1 的前後，透過 h1 display : flex 會並排，但是這邊的長度應該自由分配，讓 h1 文字置中，剩餘空間給剩下的 ::before 跟 :after。<br>再透過個別設置 margin-left 或 right 讓線條距離隔開。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;本篇成果&quot;&gt;&lt;a href=&quot;#本篇成果&quot; class=&quot;headerlink&quot; title=&quot;本篇成果&quot;&gt;&lt;/a&gt;本篇成果&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codepen.io/shan473/pen/abVaLWx&quot;&gt;Codepen&lt;/a&gt;&lt;b</summary>
      
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="CSS" scheme="https://blog.rosa.tw/categories/Frontend/CSS/"/>
    
    
    <category term="CSS" scheme="https://blog.rosa.tw/tags/CSS/"/>
    
    <category term="CSSZeroToOneSeries" scheme="https://blog.rosa.tw/tags/CSSZeroToOneSeries/"/>
    
  </entry>
  
  <entry>
    <title>CSSZeroToOneSeries | 18 | 不規則邊緣</title>
    <link href="https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-18/"/>
    <id>https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-18/</id>
    <published>2022-04-13T15:34:23.936Z</published>
    <updated>2022-04-13T15:43:30.028Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/abVaLWx">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4m9T4H16Ta75kDzYcQq5DvDiixK4mUT7-zgyeMbwFltHZbFafI5uejyNEI2PKXuVsHwbitph6KpHB-W1twOqWHvFYJXV0ZHqpaK31pEbAbsnH7ffzVJrY4jCn-DQT8BuQlWSI7mhiwxpMOte8vgXL82SlBMc9CDVnRs4GQaX5zSfAIPFEVdD6wo429FOHMt4kh?width=1024&height=133&cropmode=none" alt="導覽列"></p><h3 id="box-shadow-疊疊樂"><a href="#box-shadow-疊疊樂" class="headerlink" title="box-shadow 疊疊樂"></a>box-shadow 疊疊樂</h3><p>box-shadow 可以堆疊很多層，利用位移的技巧產出很多個一樣的圖案</p><h3 id="用另一個偽元素來遮住"><a href="#用另一個偽元素來遮住" class="headerlink" title="用另一個偽元素來遮住"></a>用另一個偽元素來遮住</h3><p><code>:after</code> 用完陰影後，下方半圓凸出來要用 <code>:before</code> 產出長方形遮住<br>但是長方塊就會遮住下方的內容，因此透過 z-index 來處理</p><h3 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h3><p>z-index 一定要使用 position 定位屬性，才能知道誰在哪一層<br>類似 PS 的圖層概念。</p><h3 id="border-的陰影還是正方塊"><a href="#border-的陰影還是正方塊" class="headerlink" title="border 的陰影還是正方塊"></a>border 的陰影還是正方塊</h3><p>原本想說用三角形做小山丘之類的，但是發現 border 做 box-shadow 有點小技巧<br>border 原型還是方塊，因此需要透過其中的兩邊來拼出半個三角，在透過旋轉來達成三角</p><p>通通常會用 上 左 右 下 的 <code>下右</code> 來做， transform-origin 就要重新訂個旋轉點，才會比較好 rotate</p><p><a href="https://codepen.io/shan473/pen/NWXKxYG?editors=0100">triangle shadow</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;本篇成果&quot;&gt;&lt;a href=&quot;#本篇成果&quot; class=&quot;headerlink&quot; title=&quot;本篇成果&quot;&gt;&lt;/a&gt;本篇成果&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codepen.io/shan473/pen/abVaLWx&quot;&gt;Codepen&lt;/a&gt;&lt;b</summary>
      
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="CSS" scheme="https://blog.rosa.tw/categories/Frontend/CSS/"/>
    
    
    <category term="CSS" scheme="https://blog.rosa.tw/tags/CSS/"/>
    
    <category term="CSSZeroToOneSeries" scheme="https://blog.rosa.tw/tags/CSSZeroToOneSeries/"/>
    
  </entry>
  
  <entry>
    <title>CSSZeroToOneSeries | 17 | 旋轉拼接方塊</title>
    <link href="https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-17/"/>
    <id>https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-17/</id>
    <published>2022-04-13T15:34:07.910Z</published>
    <updated>2022-04-13T15:43:06.238Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/abVaLWx">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4m9T4H16Ta75kDzYcQq5DvDiixK4mUT7-zgyeMbwFltHZbFafI5uejyNEI2PKXuVsHwbitph6KpHB-W1twOqWHvFYJXV0ZHqpaK31pEbAbsnH7ffzVJrY4jCn-DQT8BuQlWSI7mhiwxpMOte8vgXL82SlBMc9CDVnRs4GQaX5zSfAIPFEVdD6wo429FOHMt4kh?width=1024&height=133&cropmode=none" alt="導覽列"></p><h3 id="計算區塊"><a href="#計算區塊" class="headerlink" title="計算區塊"></a>計算區塊</h3><ol><li>(960 / 3) - 200 = 120 / 2 = 60 margin 左右相隔 60px</li><li>要算第二排位移， 左右相隔 60， 200 - 120 = 80 ，重疊部分 / 2 = 40，200 - 40 = 160 一共要往左 160</li><li>(margin top + bottom 的算法還沒想出來)</li></ol><h3 id="不是元素轉而是偽元素轉"><a href="#不是元素轉而是偽元素轉" class="headerlink" title="不是元素轉而是偽元素轉"></a>不是元素轉而是偽元素轉</h3><p>元素轉包含裡面的文字也會一起轉動，所以背景是偽元素的背景色<br>這這樣不用轉文字</p><h3 id="用-sass-來迴圈來快速寫背景色"><a href="#用-sass-來迴圈來快速寫背景色" class="headerlink" title="用 sass 來迴圈來快速寫背景色"></a>用 sass 來迴圈來快速寫背景色</h3><p>List 寫法</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$colorList</span></span> <span class="token punctuation">:</span> #de1a1aff<span class="token punctuation">,</span> #304188<span class="token punctuation">,</span> #acbed8ff<span class="token punctuation">,</span> #f2d398ff<span class="token punctuation">,</span> #d78521ff<span class="token punctuation">,</span> #403d58ff<span class="token punctuation">,</span> #dbd56eff<span class="token punctuation">,</span> #2cf6b3ff<span class="token punctuation">,</span> #71f79fff<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>for 迴圈，<code>@for $i from _min through _max</code></p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@for</span> <span class="token variable">$i</span> <span class="token keyword">from</span> 1 <span class="token keyword">through</span> <span class="token selector">9</span><span class="token punctuation">&#123;</span>    <span class="token selector">.box<span class="token variable">#&#123;$i&#125;</span>:before</span><span class="token punctuation">&#123;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">nth</span><span class="token punctuation">(</span><span class="token variable">$colorList</span><span class="token punctuation">,</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要向陣列 <code>array[index]</code>，可以使用 List.nth，<code>nth($list,$index)</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;本篇成果&quot;&gt;&lt;a href=&quot;#本篇成果&quot; class=&quot;headerlink&quot; title=&quot;本篇成果&quot;&gt;&lt;/a&gt;本篇成果&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codepen.io/shan473/pen/abVaLWx&quot;&gt;Codepen&lt;/a&gt;&lt;b</summary>
      
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="CSS" scheme="https://blog.rosa.tw/categories/Frontend/CSS/"/>
    
    
    <category term="CSS" scheme="https://blog.rosa.tw/tags/CSS/"/>
    
    <category term="CSSZeroToOneSeries" scheme="https://blog.rosa.tw/tags/CSSZeroToOneSeries/"/>
    
  </entry>
  
  <entry>
    <title>CSSZeroToOneSeries | 16 | 時間軸</title>
    <link href="https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-16/"/>
    <id>https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-16/</id>
    <published>2022-04-13T15:32:48.622Z</published>
    <updated>2022-04-16T16:37:00.843Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/abVaLWx">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4m9T4H16Ta75kDzYcQq5DvDiixK4mUT7-zgyeMbwFltHZbFafI5uejyNEI2PKXuVsHwbitph6KpHB-W1twOqWHvFYJXV0ZHqpaK31pEbAbsnH7ffzVJrY4jCn-DQT8BuQlWSI7mhiwxpMOte8vgXL82SlBMc9CDVnRs4GQaX5zSfAIPFEVdD6wo429FOHMt4kh?width=1024&height=133&cropmode=none" alt="導覽列"></p><h2 id="float-排版"><a href="#float-排版" class="headerlink" title="float 排版"></a>float 排版</h2><h3 id="問題-如果內容大小很小，只需要裝其中一邊，但是內容很多的時候，應該要避免掉讓並排的情形"><a href="#問題-如果內容大小很小，只需要裝其中一邊，但是內容很多的時候，應該要避免掉讓並排的情形" class="headerlink" title="問題 : 如果內容大小很小，只需要裝其中一邊，但是內容很多的時候，應該要避免掉讓並排的情形"></a>問題 : 如果內容大小很小，只需要裝其中一邊，但是內容很多的時候，應該要避免掉讓並排的情形</h3><p>原因在於 float 左右邊，但是本身的高度太高沒辦法往下推，當內容太多的時候就會被重疊因為比預計的 50%多。</p><p>原本是用</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">li</span><span class="token punctuation">&#123;</span><span class="token property">transform</span> <span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>50%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>求好看性質可以直接在元素上補 clear : both，讓下一個元素都錯開上一層 float 無法撐開的原因， 但是這邊就要兩邊都加上 中間線。原本只有一側有加，如果沒加中間會像斷掉一樣</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;本篇成果&quot;&gt;&lt;a href=&quot;#本篇成果&quot; class=&quot;headerlink&quot; title=&quot;本篇成果&quot;&gt;&lt;/a&gt;本篇成果&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codepen.io/shan473/pen/abVaLWx&quot;&gt;Codepen&lt;/a&gt;&lt;b</summary>
      
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="CSS" scheme="https://blog.rosa.tw/categories/Frontend/CSS/"/>
    
    
    <category term="CSS" scheme="https://blog.rosa.tw/tags/CSS/"/>
    
    <category term="CSSZeroToOneSeries" scheme="https://blog.rosa.tw/tags/CSSZeroToOneSeries/"/>
    
  </entry>
  
  <entry>
    <title>CSSZeroToOneSeries | 15 | 對話框</title>
    <link href="https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-15/"/>
    <id>https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-15/</id>
    <published>2022-04-13T13:58:23.373Z</published>
    <updated>2022-04-13T15:33:19.024Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/abVaLWx">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4m9T4H16Ta75kDzYcQq5DvDiixK4mUT7-zgyeMbwFltHZbFafI5uejyNEI2PKXuVsHwbitph6KpHB-W1twOqWHvFYJXV0ZHqpaK31pEbAbsnH7ffzVJrY4jCn-DQT8BuQlWSI7mhiwxpMOte8vgXL82SlBMc9CDVnRs4GQaX5zSfAIPFEVdD6wo429FOHMt4kh?width=1024&height=133&cropmode=none" alt="導覽列"></p><h3 id="照片圓角"><a href="#照片圓角" class="headerlink" title="照片圓角"></a>照片圓角</h3><p>不用對著照片進行圓角，利用父層做 <code>overflow : hidden</code></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.pic</span> <span class="token punctuation">&#123;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span>50%<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.pic img</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="html-結構"><a href="#html-結構" class="headerlink" title="html 結構"></a>html 結構</h3><p>可以分成本地跟遠端，裡面的結構差不多，只有在一些地方進行微調</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user remote<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://reqres.in/img/faces/7-image.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Michael<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce tristique mattis lectus, at convallis est.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user local<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://reqres.in/img/faces/8-image.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Lindsay<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>山話情老約院到又，廣紀你布廣溫告看中空不：家你運向是電中數達地動，目樹們以不其始體小飛速？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><p>flex 特性，因為要將本地端的對話框跟使用者圖片往右推，而且照片要在最右邊。<br>根據結構要麼調換，不然就是利用 flex 的 order ，把對話框往前推。</p><p><code>order : -1</code></p><h3 id="flex-shirnk"><a href="#flex-shirnk" class="headerlink" title="flex-shirnk"></a>flex-shirnk</h3><p>flex 的壓縮值。flex 在預設況下是會不會換行的，因此裡面的內容會被壓縮，如果不想被壓，在子元素補上 <code>flex-shrink : 0</code>。</p><p>實作是因為圖片會被長文字給擠壓，避免圖片便陀圓型，可以加上。</p><h3 id="bouns-英文長文破格-word-break"><a href="#bouns-英文長文破格-word-break" class="headerlink" title="bouns : 英文長文破格 - word-break"></a>bouns : 英文長文破格 - word-break</h3><p>word-break 可以處理過長文字，word-break 有幾種屬性  </p><ol><li>normal : 按照預設的斷句，通常如果掛上 flex ，就永不斷</li><li>break-word : 根據單字來斷句</li><li>break-all : 根據容器來斷句，不管單字的完整性，超出就斷</li></ol><p>但是這個屬性未來會被棄用 :O</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;本篇成果&quot;&gt;&lt;a href=&quot;#本篇成果&quot; class=&quot;headerlink&quot; title=&quot;本篇成果&quot;&gt;&lt;/a&gt;本篇成果&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codepen.io/shan473/pen/abVaLWx&quot;&gt;Codepen&lt;/a&gt;&lt;b</summary>
      
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="CSS" scheme="https://blog.rosa.tw/categories/Frontend/CSS/"/>
    
    
    <category term="CSS" scheme="https://blog.rosa.tw/tags/CSS/"/>
    
    <category term="CSSZeroToOneSeries" scheme="https://blog.rosa.tw/tags/CSSZeroToOneSeries/"/>
    
  </entry>
  
  <entry>
    <title>CSSZeroToOneSeries | 14 | 表單</title>
    <link href="https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-14/"/>
    <id>https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-14/</id>
    <published>2022-04-13T13:58:19.920Z</published>
    <updated>2022-04-16T16:36:27.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/abVaLWx">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4m9T4H16Ta75kDzYcQq5DvDiixK4mUT7-zgyeMbwFltHZbFafI5uejyNEI2PKXuVsHwbitph6KpHB-W1twOqWHvFYJXV0ZHqpaK31pEbAbsnH7ffzVJrY4jCn-DQT8BuQlWSI7mhiwxpMOte8vgXL82SlBMc9CDVnRs4GQaX5zSfAIPFEVdD6wo429FOHMt4kh?width=1024&height=133&cropmode=none" alt="導覽列"></p><h3 id="backdrop-filter-毛玻璃特效"><a href="#backdrop-filter-毛玻璃特效" class="headerlink" title="backdrop-filter : 毛玻璃特效"></a>backdrop-filter : 毛玻璃特效</h3><p>backdrop-filter 只有背景圖模糊，filter 是整個元素一起模糊<br>跟 filter 的屬性很像，都有基本的 <code>blur</code>、<code>contrast</code> 等等  </p><p>在 ios 支援度要用到 webkit 前綴。  </p><h3 id="button-之間的空隙"><a href="#button-之間的空隙" class="headerlink" title="button 之間的空隙"></a>button 之間的空隙</h3><p>跟 a 標籤一樣，如果 html 擺放的時候有空隙，實際上畫面會有幾 px 的空格。(好像是空白字元 ?)</p><p>可以在父容器使用 <code>font-size : 0</code>，讓空白字元消失，inline 屬性的東西就不會有空白了。</p><h3 id="line-height"><a href="#line-height" class="headerlink" title="line-height"></a>line-height</h3><p>line-height 可以設定行高，也可以把子容器撐大</p><h3 id="bouns-label-checkbox-custom-check"><a href="#bouns-label-checkbox-custom-check" class="headerlink" title="bouns : label + checkbox + custom check"></a>bouns : label + checkbox + custom check</h3><p>這邊的結構把 input 放在最上面，可以用 ~ 或是 + 來選到下面的 label 以及打勾元素。  </p><p>使用 label 包住兩個 span，一個是打勾用，另一個是文字</p><blockquote><p>不過應該也可以使用 label 的 before 跟 after 做出打勾框格</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;本篇成果&quot;&gt;&lt;a href=&quot;#本篇成果&quot; class=&quot;headerlink&quot; title=&quot;本篇成果&quot;&gt;&lt;/a&gt;本篇成果&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codepen.io/shan473/pen/abVaLWx&quot;&gt;Codepen&lt;/a&gt;&lt;b</summary>
      
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="CSS" scheme="https://blog.rosa.tw/categories/Frontend/CSS/"/>
    
    
    <category term="CSS" scheme="https://blog.rosa.tw/tags/CSS/"/>
    
    <category term="CSSZeroToOneSeries" scheme="https://blog.rosa.tw/tags/CSSZeroToOneSeries/"/>
    
  </entry>
  
  <entry>
    <title>CSSZeroToOneSeries | 13 | 訂單進度條</title>
    <link href="https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-13/"/>
    <id>https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-13/</id>
    <published>2022-04-13T13:58:16.901Z</published>
    <updated>2022-04-13T15:32:09.952Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/abVaLWx">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4m9T4H16Ta75kDzYcQq5DvDiixK4mUT7-zgyeMbwFltHZbFafI5uejyNEI2PKXuVsHwbitph6KpHB-W1twOqWHvFYJXV0ZHqpaK31pEbAbsnH7ffzVJrY4jCn-DQT8BuQlWSI7mhiwxpMOte8vgXL82SlBMc9CDVnRs4GQaX5zSfAIPFEVdD6wo429FOHMt4kh?width=1024&height=133&cropmode=none" alt="導覽列"></p><h3 id="讓後面的都…"><a href="#讓後面的都…" class="headerlink" title="~ 讓後面的都…"></a>~ 讓後面的都…</h3><p>ol 有順序的 list，無障礙的網站比較好，有一定的流程順序<br>比如說目前(已啟動)的進度以後背景是灰色</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自己以後的兄弟都選起來  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">li.active ~li</span><span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="box-shadow-做邊框"><a href="#box-shadow-做邊框" class="headerlink" title="box-shadow 做邊框"></a>box-shadow 做邊框</h3><p>好處是不會算在 box model 裡面<br>使用 border 要扣除延伸的尺寸，例如上下左右為 4 px ，總共寬跟高各扣 8px</p><p>box-shadow 有六個值</p><ol><li>inset : 內陰影，預設是沒有顯示的</li><li>offset-x : x 值偏移量，正值往下，負值往上</li><li>offset-Y : y 值偏移量，正值往右，負值往左</li><li>blur : 模糊程度</li><li>擴散值 : 以圓心往外擴散多少</li><li>顏色</li></ol><h3 id="flex-shrink-壓縮多少"><a href="#flex-shrink-壓縮多少" class="headerlink" title="flex-shrink : 壓縮多少 ?"></a>flex-shrink : 壓縮多少 ?</h3><p>display flex 在縮小 viewport 時，裡面的東西都會一起被壓一壓<br>flex-shrink 預設是 1，讓 flex 自動壓縮內容<br>如果不想被押就 <code>flex-shrink:0;</code></p><p>![[Pasted image 20220306100652.png]]</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;本篇成果&quot;&gt;&lt;a href=&quot;#本篇成果&quot; class=&quot;headerlink&quot; title=&quot;本篇成果&quot;&gt;&lt;/a&gt;本篇成果&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codepen.io/shan473/pen/abVaLWx&quot;&gt;Codepen&lt;/a&gt;&lt;b</summary>
      
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="CSS" scheme="https://blog.rosa.tw/categories/Frontend/CSS/"/>
    
    
    <category term="CSS" scheme="https://blog.rosa.tw/tags/CSS/"/>
    
    <category term="CSSZeroToOneSeries" scheme="https://blog.rosa.tw/tags/CSSZeroToOneSeries/"/>
    
  </entry>
  
  <entry>
    <title>CSSZeroToOneSeries | 12 | 側邊選單 + 收合式 + 多層</title>
    <link href="https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-12/"/>
    <id>https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-12/</id>
    <published>2022-04-13T13:58:13.853Z</published>
    <updated>2022-04-13T15:31:32.575Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/abVaLWx">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4m9T4H16Ta75kDzYcQq5DvDiixK4mUT7-zgyeMbwFltHZbFafI5uejyNEI2PKXuVsHwbitph6KpHB-W1twOqWHvFYJXV0ZHqpaK31pEbAbsnH7ffzVJrY4jCn-DQT8BuQlWSI7mhiwxpMOte8vgXL82SlBMc9CDVnRs4GQaX5zSfAIPFEVdD6wo429FOHMt4kh?width=1024&height=133&cropmode=none" alt="導覽列"></p><h2 id="側邊選單"><a href="#側邊選單" class="headerlink" title="側邊選單"></a>側邊選單</h2><h3 id="form-submit-圖案"><a href="#form-submit-圖案" class="headerlink" title="form submit 圖案"></a>form submit 圖案</h3><p>input 想要放圖示，可以用 button，不要用 input submit，這樣可以更客製化<br>因為在 form 中按鈕會有 submit 的效果，更正確一點需要加上 <code>type=submit</code> 或是 <code>type=button</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span> 這裡可以插 icon font<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="border-不想全滿"><a href="#border-不想全滿" class="headerlink" title="border 不想全滿"></a>border 不想全滿</h3><p>position 可以讓 top、bottom、left、right 這些屬性起作用<br>可以讓空間離邊界多少距離，來控制 border 的範圍。</p><p>border 預設是容器的大小</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span><span class="token punctuation">&#123;</span><span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span><span class="token property">right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token property">left</span> <span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token property">border-bottom</span> <span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h3><p>根據區塊元素來計算，如果想要 width 按照想要的出現，可以使用 box-sizing，來控制確實的範圍。</p><h3 id="box-shadow"><a href="#box-shadow" class="headerlink" title="box-shadow"></a>box-shadow</h3><p>做陰影可以帶背景色，才不會太突兀</p><h3 id="placeholder-提示字偽元素"><a href="#placeholder-提示字偽元素" class="headerlink" title="::placeholder  提示字偽元素"></a>::placeholder  提示字偽元素</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>請打字<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以控制提示字的一些屬性</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">input::placeholder</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="一點變化-收合式"><a href="#一點變化-收合式" class="headerlink" title="一點變化 : 收合式"></a>一點變化 : 收合式</h2><h3 id="checked"><a href="#checked" class="headerlink" title=":checked"></a>:checked</h3><p>radio 跟 checkbox 都可以使用，可以 input 搭配 label 更靈活<br>[[Day 16 - checked 表單狀態選取器]]</p><h3 id="垂直置中-字單行"><a href="#垂直置中-字單行" class="headerlink" title="垂直置中 : 字單行"></a>垂直置中 : 字單行</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="再一點變化-多層次"><a href="#再一點變化-多層次" class="headerlink" title="再一點變化 : 多層次"></a>再一點變化 : 多層次</h2><h3 id="改變-html-結構"><a href="#改變-html-結構" class="headerlink" title="改變 html 結構"></a>改變 html 結構</h3><p>每個節點也變成同一個結構，在撰寫時要把 <strong>下一層</strong> 給定義好，並免全部一次套用。<br>![[Pasted image 20220305142725.png]]</p><h3 id="top-加一點偏移"><a href="#top-加一點偏移" class="headerlink" title="top 加一點偏移"></a>top 加一點偏移</h3><p>延伸出來的欄位盡量不用到全部對齊，會造成閱讀層級混亂，可以加一些偏移。<br>![[Pasted image 20220305141604.png]]</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;本篇成果&quot;&gt;&lt;a href=&quot;#本篇成果&quot; class=&quot;headerlink&quot; title=&quot;本篇成果&quot;&gt;&lt;/a&gt;本篇成果&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codepen.io/shan473/pen/abVaLWx&quot;&gt;Codepen&lt;/a&gt;&lt;b</summary>
      
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="CSS" scheme="https://blog.rosa.tw/categories/Frontend/CSS/"/>
    
    
    <category term="CSS" scheme="https://blog.rosa.tw/tags/CSS/"/>
    
    <category term="CSSZeroToOneSeries" scheme="https://blog.rosa.tw/tags/CSSZeroToOneSeries/"/>
    
  </entry>
  
  <entry>
    <title>CSSZeroToOneSeries | 11 | 表格</title>
    <link href="https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-11/"/>
    <id>https://blog.rosa.tw/Frontend/CSS/CSSSeriesZeroToOne-11/</id>
    <published>2022-04-13T13:58:10.317Z</published>
    <updated>2022-04-13T14:00:41.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本篇成果"><a href="#本篇成果" class="headerlink" title="本篇成果"></a>本篇成果</h2><p><a href="https://codepen.io/shan473/pen/abVaLWx">Codepen</a><br><img data-src="https://dsm01pap006files.storage.live.com/y4m9T4H16Ta75kDzYcQq5DvDiixK4mUT7-zgyeMbwFltHZbFafI5uejyNEI2PKXuVsHwbitph6KpHB-W1twOqWHvFYJXV0ZHqpaK31pEbAbsnH7ffzVJrY4jCn-DQT8BuQlWSI7mhiwxpMOte8vgXL82SlBMc9CDVnRs4GQaX5zSfAIPFEVdD6wo429FOHMt4kh?width=1024&height=133&cropmode=none" alt="導覽列"></p><h2 id="表格基本結構"><a href="#表格基本結構" class="headerlink" title="表格基本結構"></a>表格基本結構</h2><p><strong>表格元素</strong></p><ul><li><code>tr</code> : 表格列 (table row)</li><li><code>td</code> : 表格資料 (table data)，表格儲存格</li><li><code>th</code> : 標題頭部 </li></ul><p><strong>表格結構</strong></p><ul><li><code>thead</code> : 表格的最頂端標題欄</li><li><code>tbody</code> : 中間的表格資料所在區</li><li><code>tfooter</code> : 表格最底，通常放置一些備註等等的</li></ul><h3 id="scope-表格的讀取"><a href="#scope-表格的讀取" class="headerlink" title="scope : 表格的讀取"></a>scope : 表格的讀取</h3><p>告訴電腦要怎麼去定義標題，是 row 還是 column<br>畫面上不會有任何區別，如果是螢幕閱讀器，就會知道標題是要讀行還是列</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="colspan-跨欄"><a href="#colspan-跨欄" class="headerlink" title="colspan : 跨欄"></a>colspan : 跨欄</h3><p>td 會有跨欄的時候，在屬性加上要跨的數量</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我要跨兩欄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有 colspan 當然有 rowspan</p><h3 id="caption-表格標題"><a href="#caption-表格標題" class="headerlink" title="caption : 表格標題"></a>caption : 表格標題</h3><p>表格如果有標題，對 <strong>無障礙網站</strong> 很重要</p><h4 id="css-caption-side-把標題放…"><a href="#css-caption-side-把標題放…" class="headerlink" title="css - caption side : 把標題放…"></a>css - caption side : 把標題放…</h4><p>caption 可以寫在 html 結構的一開始，再透過 caption side 來放置 caption 的位置</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">caption <span class="token property">side</span><span class="token punctuation">:</span> bottom<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="結構選擇器"><a href="#結構選擇器" class="headerlink" title="結構選擇器"></a>結構選擇器</h2><ul><li>:nth-child : 看元素的順序，也可以 奇數偶數 (odd、even)</li><li>:first-chid : 第一個元素</li><li>:last-child : 最後一個元素</li></ul><h2 id="Table-RWD-的幾種方法"><a href="#Table-RWD-的幾種方法" class="headerlink" title="Table RWD 的幾種方法"></a>Table RWD 的幾種方法</h2><ol><li>加入橫向捲軸</li><li>破壞框線</li><li>:before conent</li></ol><h2 id="利用-grid-做表格"><a href="#利用-grid-做表格" class="headerlink" title="利用 grid 做表格"></a>利用 grid 做表格</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;本篇成果&quot;&gt;&lt;a href=&quot;#本篇成果&quot; class=&quot;headerlink&quot; title=&quot;本篇成果&quot;&gt;&lt;/a&gt;本篇成果&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codepen.io/shan473/pen/abVaLWx&quot;&gt;Codepen&lt;/a&gt;&lt;b</summary>
      
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="CSS" scheme="https://blog.rosa.tw/categories/Frontend/CSS/"/>
    
    
    <category term="CSS" scheme="https://blog.rosa.tw/tags/CSS/"/>
    
    <category term="CSSZeroToOneSeries" scheme="https://blog.rosa.tw/tags/CSSZeroToOneSeries/"/>
    
  </entry>
  
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - Closure 閉包(II) 常見陷阱題</title>
    <link href="https://blog.rosa.tw/Frontend/JavaScript/JavaScript-Closure-II/"/>
    <id>https://blog.rosa.tw/Frontend/JavaScript/JavaScript-Closure-II/</id>
    <published>2022-04-13T13:51:51.000Z</published>
    <updated>2022-04-13T13:51:51.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前學習閉包沒辦法很容易連結到<br>尤其 Function 有一堆名詞變異體<br>總會好奇實際的應用情境   </p><p>那發生什麼問題才會使用到 Closure 呢?<br>又怎麼在真正的專案解決問題 ?   </p><span id="more"></span><h2 id="問題-在迴圈中呼叫函式"><a href="#問題-在迴圈中呼叫函式" class="headerlink" title="問題 : 在迴圈中呼叫函式"></a>問題 : 在迴圈中呼叫函式</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>複習一下 :</p><blockquote><p><code>var</code> 的切分單位是 <code>function</code>  </p></blockquote><p>直覺來說會覺得 <code>i</code> 是會按順序列出<br>結果是 <code>5 5</code><br>因為 for 設立的 <code>i</code> 會存在 global 中  </p><p><strong>試著把運作拆開來</strong> </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>當迴圈跑完時， <code>i</code> 是 5，<code>var i  = 5</code><br>因為 5 不符合迴圈條件跳出<br>所以不管 <code>arr[?]()</code>，直接印出 <code>i</code> 是 5    </p><h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><h4 id="閉包"><a href="#閉包" class="headerlink" title="閉包"></a>閉包</h4><p>把 function 獨立出來  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">logN</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//閉包，記住當下的 i</span><span class="token keyword">function</span> <span class="token function">logN</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//0</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="IIFE"><a href="#IIFE" class="headerlink" title="IIFE"></a>IIFE</h4><p>IIFE(Immediately Invoked Function Expression) 定義完就回傳的 function</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//拿到當下的 i</span>  arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//0</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把原本有名的函式改為匿名函式，用<code>()</code>包裹 function，尾巴是帶入參數<code>(參數)</code>，沒有的話為空</p><h4 id="ES6-的-let"><a href="#ES6-的-let" class="headerlink" title="ES6 的 let"></a>ES6 的 let</h4><p>上面出現的原因都是 <code>var</code> 的 scope 問題<br>ES6 的 let 將作用域限制在 block <code>&#123;&#125;</code>  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>只要 <code>var -&gt; let</code> ， 就解決問題了，離開之後就不會保留。</p></blockquote><h2 id="Closure-應用"><a href="#Closure-應用" class="headerlink" title="Closure 應用"></a>Closure 應用</h2><h3 id="Cache-暫存"><a href="#Cache-暫存" class="headerlink" title="Cache 暫存"></a>Cache 暫存</h3><p>計算量大的時候避免重新計算，預先把已算好的值存起來  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 複雜計算</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'calculate'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> num<span class="token operator">*</span>num<span class="token operator">*</span>num<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">cache</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 查看是不是有算過</span>  <span class="token keyword">var</span> ans <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//有的話回傳索引裡的值</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> ans<span class="token punctuation">[</span>num<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 沒有的話才做重新計算</span>    ans<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token keyword">return</span> ans<span class="token punctuation">[</span>num<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> cacheComplex <span class="token operator">=</span> <span class="token function">cahe</span><span class="token punctuation">(</span>complex<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">cacheComplex</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 第一次計算</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">cacheComplex</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 從 cache 拿到的值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">cacheComplex</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 從 cache 拿到的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用 <code>console.time</code> 計時執行的時間<br>比起直接用 complex 算再重新算<br>會發現第二次的計算的時間明顯縮短很多  </p><h3 id="隱匿資訊"><a href="#隱匿資訊" class="headerlink" title="隱匿資訊"></a>隱匿資訊</h3><p>想隱匿一些資訊，讓別人不可以直接更改。<br>把方法以及變數封裝在內部，別人要調用只能呼叫你規定好的方法。  </p><ul><li>以簡易計算機為例<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token parameter">initNum</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">var</span> sum <span class="token operator">=</span> initNum <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token function-variable function">add</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> sum <span class="token operator">+=</span>num<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token function-variable function">minus</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> sum <span class="token operator">-=</span>num<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token function-variable function">mutiply</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> sum <span class="token operator">*=</span>num<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token function-variable function">divided</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> sum<span class="token operator">/=</span>num<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token function-variable function">getresult</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> counter1 <span class="token operator">=</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">let</span> counter2 <span class="token operator">=</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>counter1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>counter2<span class="token punctuation">.</span><span class="token function">mutiply</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter1<span class="token punctuation">.</span><span class="token function">getresult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter2<span class="token punctuation">.</span><span class="token function">getresult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>一個簡單的計算機 (?)🤔<br>counter1 跟 counter2 並不會影響到彼此<br>我們只能透過現有的方法來修改 sum 的值  </li></ul><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>閉包讓我感覺是很神奇的東西<br>看起來不熟悉，但實際上我們都用到了🤔     </p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://lidemy.com/courses/enrolled/390599"> [JS201] 進階 JavaScript：那些你一直搞不懂的地方 </a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前學習閉包沒辦法很容易連結到&lt;br&gt;尤其 Function 有一堆名詞變異體&lt;br&gt;總會好奇實際的應用情境   &lt;/p&gt;
&lt;p&gt;那發生什麼問題才會使用到 Closure 呢?&lt;br&gt;又怎麼在真正的專案解決問題 ?   &lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/Frontend/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>⟬ 筆記 ⟭ JavaScript - Closure 閉包(I) 基礎概念</title>
    <link href="https://blog.rosa.tw/Frontend/JavaScript/JavaScript-Closure-I/"/>
    <id>https://blog.rosa.tw/Frontend/JavaScript/JavaScript-Closure-I/</id>
    <published>2022-04-13T13:51:39.000Z</published>
    <updated>2022-04-13T13:51:39.314Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Closure 是 JavaScript 很重要的基礎<br>藉由本篇幫助自己釐清 Closure 的概念  </p><span id="more"></span><h2 id="先認識-Scope-Chain"><a href="#先認識-Scope-Chain" class="headerlink" title="先認識 Scope Chain"></a>先認識 Scope Chain</h2><p><a href="https://blog.rosa.tw/Frontend/JavaScript/JavaScript-Hoisting-II/?highlight=scope#%E4%BD%9C%E7%94%A8%E5%9F%9F-Scope">Scope</a> 是變數生存的範圍，如果在自己層級找不到就會一層一層往外找，直到 Global 為止。  </p><p>這種行為就稱為「<strong>範圍鏈</strong>」(Scope Chain)。</p><blockquote><p>範圍鏈是在函式<strong>被定義的當下決定</strong> (lexical scope 來決定)的，不是在被呼叫的時候決定。</p></blockquote><h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'global'</span><span class="token keyword">function</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> a  <span class="token operator">=</span> <span class="token string">'change'</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// change</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">//global</span><span class="token punctuation">&#125;</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一開始會以為 <code>test()</code> 在 change 裡面呼叫，取得的變數 a 是 change 對不對 ? </p><p>NO NO NO,再重複一次 !      </p><blockquote><p>範圍鏈是在函式<strong>被定義的當下決定</strong> 的，不是在被呼叫的時候決定。</p></blockquote><p><code>test</code> 函式在 Lexical Environments 是 gloabal 的下一層，Scope Chain 是根據 Lexical scope 決定，往上找是 gloabl 那層，所以結果才會是 <code>&#39;global&#39;</code></p><h2 id="為什麼要有-Closure"><a href="#為什麼要有-Closure" class="headerlink" title="為什麼要有 Closure ?"></a>為什麼要有 Closure ?</h2><blockquote><p>反問 👉 <strong>沒有 Closure 會怎樣 ?</strong></p></blockquote><p>我們知道 Execution Context 執行環境在執行完 function 後，Stack 會抽掉，有關這個 function 的一切變數也會被回收而且不可再使用。</p><ul><li>如果要使用 function 裡的變數呢 ? (<code>private variable</code> 的概念)</li></ul><p>直覺可能會丟到 <code>global</code> 進行宣告，但當專案結構逐漸龐大，久而久之會造成 <strong>全域變數汙染</strong>  </p><p><strong>那閉包的出現解決了…</strong> :</p><ul><li>自由變數 (free variable)，只有在 function 內部可讀取變數，在外部則無法讀取。</li><li>變數暫存，減少重複的複雜計算</li></ul><h2 id="Closure-的優缺點"><a href="#Closure-的優缺點" class="headerlink" title="Closure 的優缺點"></a>Closure 的優缺點</h2><ul><li><p>優點 : </p><ol><li>避免 <strong>全域變數汙染</strong></li><li>提供 <strong>自由變數</strong>，讓該 function 執行完後，變數的作用域不會因 function 結束被回收，而是會繼續存在。</li><li>避免重複執行龐大的計算<br> 可以記錄前一次計算的狀態，下一次再呼叫不用重算一次 (cache 的概念)。  </li><li>在多人協作的時候，有些隱密的資訊不想讓人去修改，可以使用封裝閉包的方式。<br> 別人必須依照固定的寫法來取得資料，且不能修改到內部的資訊。<br> 在開源資料或 API 的方法常使用這樣的方式，以免改動到內部數值。</li></ol></li><li><p>缺點 :</p><ol><li>可能保留到一些不必要的變數或資訊，造成資源多餘消耗。</li><li>只能使用涵式提供的方法，因為內部的資訊被隱蔽，在更動上較不彈性。<br>  (但是相反如果不想要被改動會是優點)  </li></ol></li></ul><h2 id="什麼是閉包"><a href="#什麼是閉包" class="headerlink" title="什麼是閉包 ?"></a>什麼是閉包 ?</h2><p>除了自己本身的程式碼外，也可以取得了<strong>內部函式「當時環境」的變數值</strong>，記住了執行當時的環境，這就是「閉包」。 </p><h2 id="簡單的-Closure-範例"><a href="#簡單的-Closure-範例" class="headerlink" title="簡單的 Closure 範例"></a>簡單的 Closure 範例</h2><ul><li><p>沒有使用閉包  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> rate <span class="token operator">=</span> <span class="token number">.75</span><span class="token keyword">function</span> <span class="token function">itmePrice</span><span class="token punctuation">(</span><span class="token parameter">price</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> price <span class="token operator">>=</span> <span class="token number">100</span> <span class="token operator">?</span> price<span class="token operator">*</span>rate <span class="token operator">:</span> price<span class="token punctuation">&#125;</span>rate <span class="token operator">=</span> <span class="token number">.1</span> <span class="token keyword">let</span> bag <span class="token operator">=</span> <span class="token function">itmePrice</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以透過直接修改數值 (👎)<br>任何人都可以在外部進行修改</p></blockquote></li><li><p>使用閉包</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">itmePrice</span><span class="token punctuation">(</span><span class="token parameter">price</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 把 rate 變成私有變數</span><span class="token keyword">var</span> rate <span class="token operator">=</span> <span class="token number">.75</span><span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> price <span class="token operator">>=</span> <span class="token number">100</span> <span class="token operator">?</span> price<span class="token operator">*</span>rate <span class="token operator">:</span> price<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> bag <span class="token operator">=</span> <span class="token function">itmePrice</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>只要呼叫需要的東西即可 (👍)<br>不會被外部修改</p></blockquote></li></ul><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="https://blog.huli.tw/2018/12/08/javascript-closure/">所有的函式都是閉包：談 JS 中的作用域與 Closure - Huli</a></li><li><a href="https://javascript.info/closure#lexical-environment">Variable scope, closure</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10193009">重新認識 JavaScript: Day 19 閉包 Closure</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Closure 是 JavaScript 很重要的基礎&lt;br&gt;藉由本篇幫助自己釐清 Closure 的概念  &lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://blog.rosa.tw/categories/Frontend/"/>
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/categories/Frontend/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.rosa.tw/tags/JavaScript/"/>
    
  </entry>
  
</feed>
